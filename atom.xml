<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leslie Waong</title>
  
  <subtitle>Lesliewaongの博客</subtitle>
  <link href="https://lesliewaong.top/atom.xml" rel="self"/>
  
  <link href="https://lesliewaong.top/"/>
  <updated>2021-12-04T06:52:16.486Z</updated>
  <id>https://lesliewaong.top/</id>
  
  <author>
    <name>Leslie Waong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript数据结构与算法</title>
    <link href="https://lesliewaong.top/posts/2181d083.html"/>
    <id>https://lesliewaong.top/posts/2181d083.html</id>
    <published>2021-09-30T09:57:47.000Z</published>
    <updated>2021-12-04T06:52:16.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><h3 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h3><ul><li><p>官方定义</p><p>无</p></li><li><p>民间定义</p><ul><li>“数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。” — 《数据结构、算法与应用》</li><li>“数据结构是ADT（抽象数据类型 Abstract Data Type）的物理实现。” — 《数据结构与算法分析》</li><li>“数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。” —中文维基百科</li></ul></li><li><p>从自己角度认识</p><p>在计算机中，存储和组织数据的方式。</p></li></ul><h3 id="数据结构在生活中应用"><a href="#数据结构在生活中应用" class="headerlink" title="数据结构在生活中应用"></a>数据结构在生活中应用</h3><p>我们知道，计算机中数据量非常庞大，如何以高效的方式组织和存储呢?</p><p>例如：一个庞大的图书馆中存放了大量的书籍，我们不仅仅要把书放进入，还应该在合适的时候能够取出来。</p><p>图书摆放要使得两个相关操作方便实现：</p><ul><li>操作 1：新书怎么插入？</li><li>操作 2：怎么找到某本指定的书？</li></ul><p>图书各种摆放方式：</p><ul><li><p>方法 1：随便放</p><ul><li>操作 1：哪里有空位放哪里。</li><li>操作 2：找某本书，累死。</li></ul></li><li><p>方法 2：按照书名的拼音字母顺序排放</p><ul><li>操作 1：新进一本《阿 Q 正传》， 按照字母顺序找到位置，插入。</li><li>操作 2：二分查找法。</li></ul></li><li><p>方法 3：把书架划分成几块区域，按照类别存放，类别中按照字母顺序</p><ul><li>操作 1：先定类别，二分查找确定位置，移出空位。</li><li>操作 2：先定类别，再二分查找。</li></ul></li></ul><p>结论：</p><ul><li>解决问题方法的效率，根据数据的组织方式有关。</li><li>计算机中存储的数据量相对于图书馆的书籍来说数据量更大，数据更加多。</li><li>以什么样的方式，来存储和组织我们的数据才能在使用数据时更加方便呢?</li><li>这就是数据结构需要考虑的问题。</li></ul><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><ul><li>数组（Aarray）</li><li>栈（Stack）</li><li>链表（Linked List）</li><li>图（Graph）</li><li>散列表（Hash）</li><li>队列（Queue）</li><li>树（Tree）</li><li>堆（Heap）</li></ul><blockquote><p>注意：数据结构与算法与语言无关，常见的编程语言都有<strong>直接或间接</strong>的使用上述常见的数据结构。</p></blockquote><h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><h3 id="算法（Algorithm）的定义"><a href="#算法（Algorithm）的定义" class="headerlink" title="算法（Algorithm）的定义"></a>算法（Algorithm）的定义</h3><ul><li>一个有限指令集，每条指令的描述不依赖于语言。</li><li>接收一些输入（有些情况下不需要输入）。</li><li>产生输出。</li><li>一定在有限步骤之后终止。</li></ul><h3 id="算法通俗理解"><a href="#算法通俗理解" class="headerlink" title="算法通俗理解"></a>算法通俗理解</h3><ul><li>Algorithm 这个单词本意就是解决问题的办法/步骤逻辑。</li><li>数据结构的实现，离不开算法。</li></ul><h3 id="算法案例"><a href="#算法案例" class="headerlink" title="算法案例"></a>算法案例</h3><p>假如上海和杭州之间有一条高架线，高架线长度是 1,000,000 米，有一天高架线中有其中一米出现了故障，请你想出一种算法，可以快速定位到处问题的地方。</p><ul><li><p>线性查找</p><ul><li>从上海的起点开始一米一米的排查，最终一定能找到出问题的线段。</li><li>但是如果线段在另一头，我们需要排查 1,000,000 次，这是最坏的情况，平均需要 500,000 次。</li></ul></li><li><p>二分查找</p><ul><li>从中间位置开始排查，看一下问题出在上海到中间位置，还是中间到杭州的位置。</li><li>查找对应的问题后，再从中间位置分开，重新锁定一半的路程。</li><li>最坏的情况，需要多少次可以排查完呢? 最坏的情况是 20 次就可以找到出问题的地方。</li><li>怎么计算出来的呢? log(1000000, 2)，以 2 位底，1000000 的对数 ≈ 20。</li></ul></li></ul><p>结论： </p><p>你会发现，解决问题的办法有很多，但是好的算法对比于差的算法，效率天壤之别。</p><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><h3 id="什么是大O表示法"><a href="#什么是大O表示法" class="headerlink" title="什么是大O表示法"></a>什么是大O表示法</h3><p>大O表示法可以告诉我们算法的快慢。</p><p>大O比较的是操作数，它指出了算法运行时间的增速。</p><p>O(n) 括号里的是操作数。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>画一个16个格子的网格，下面分别列举几种不同的画法，并用大O表示法表示</p><ol><li>一次画一个格子。O(n)</li></ol><p><a href="https://imgtu.com/i/hiJNrT"><img src="https://z3.ax1x.com/2021/08/24/hiJNrT.png" alt="hiJNrT.png"></a></p><ol start="2"><li>折叠纸张，折叠四次就能出现16个格子。O(log n)</li></ol><p><a href="https://imgtu.com/i/hiJ3Ps"><img src="https://z3.ax1x.com/2021/08/24/hiJ3Ps.png"></a></p><p> <strong>大O表示法所表示的是一个算法在最糟糕情况下的运行时间。</strong></p><h3 id="一些常见的大O运行时间"><a href="#一些常见的大O运行时间" class="headerlink" title="一些常见的大O运行时间"></a>一些常见的大O运行时间</h3><ul><li>O(log n)，也叫对数时间，二分查找。</li><li>O(n)，也叫线性时间，简单查找。</li><li>O(n * log n)，快速排序——一种速度较快的排序算法。</li><li>O(n²)，选择排序——一种速度较慢的排序算法。</li><li>O(n!)，旅行商问题的解决方案——一种非常慢的算法。</li></ul><p><a href="https://imgtu.com/i/hiJ8Gn"><img src="https://z3.ax1x.com/2021/08/24/hiJ8Gn.png" alt="hiJ8Gn.png"></a></p><h3 id="主要启示"><a href="#主要启示" class="headerlink" title="主要启示"></a>主要启示</h3><ul><li>算法的速度指的是操作数的增速，而非时间。</li><li>谈论算法速度说的是随着输入的增加，其运行时间将以什么样的速度增加。</li><li>用大O表示法表示算法的运行时间。</li><li>随着元素的增加，快算法比慢算法增加的速度是指数级的。比如，O(log n)和O(n)</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>几乎所有的编程语言都原生支持数组类型，因为数组是最简单的内存数据结构。</p><p>数组通常情况下用于存储一系列同一种数据类型的值。</p><p>但在 JavaScript 里，数组中可以保存不同类型的值。但我们还是要遵守最佳实践，别这么做（大多数语言都没这个能力）。</p><h2 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h2><ul><li><p><code>new Array()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> daysOfWeek = <span class="keyword">new</span> <span class="built_in">Array</span>(</span><br><span class="line">  <span class="string">&quot;Sunday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Monday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Tuesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Thursday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Friday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Saturday&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><code>[]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> daysOfWeek = [</span><br><span class="line">  <span class="string">&quot;Sunday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Monday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Tuesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Thursday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Friday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Saturday&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li><p>添加一个元素到数组的最后位置 <code>array.push(item)</code></p></li><li><p>在数组首位插入一个元素 <code>array.unshift(item)</code></p></li><li><p>在指定索引位置插入元素 <code>array.splice(index, 0, item)</code></p><blockquote><p>splice() 第二个参数为 0 时，表示插入数据。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 在 索引 0 的位置，插入 A</span></span><br><span class="line">myArray.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">//--&gt; [&#x27;A&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li><p>删除数组最后的元素 <code>array.pop(item)</code></p></li><li><p>删除数组首位的元素 <code>array.shift(item)</code></p></li><li><p>删除指定索引位置的元素 <code>array.splice(start, number)</code><br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起，2 个元素</span></span><br><span class="line">myArray2.splice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray2); <span class="comment">//--&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><ul><li><p>修改指定索引位置的元素 <code>array.splice(index, 1, item)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 修改 索引 1 的位置的元素为 AA</span></span><br><span class="line">myArray2.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, &quot;AA&quot;, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>修改指定索引位置的几个元素 <code>array.splice(index, number, item)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span></span><br><span class="line">myArray2.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, 2, &quot;AA&quot;, &quot;BB&quot;, 5, 6, 7]</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>数组是一个线性结构，并且可以在数组的任意位置插入和删除元素。</p><p>但是有时候，我们为了实现某些功能，必须对这种任意性加以限制。</p><p>栈和队列就是比较常见的受限的线性结构。</p><h2 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h2><p>栈（stack）是一种运算受限的线性表：</p><ul><li><code>LIFO（last in first out）</code>表示就是后进入的元素，第一个弹出栈空间。类似于自动餐托盘，最后放上的托盘，往往先把拿出去使用。</li><li>其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</li><li>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；</li><li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li></ul><p>如下图所示：<br><a href="https://imgtu.com/i/hiYXX6"><img src="https://z3.ax1x.com/2021/08/24/hiYXX6.png" alt="hiYXX6.png"></a></p><p>栈的特点：<strong>先进后出，后进先出</strong>。</p><h2 id="程序中的栈结构"><a href="#程序中的栈结构" class="headerlink" title="程序中的栈结构"></a>程序中的栈结构</h2><ul><li><p>函数调用栈：A(B(C(D())))：<br>即 A 函数中调用 B，B 调用 C，C 调用 D；在 A 执行的过程中会将 A 压入栈，随后 B 执行时 B 也被压入栈，函数 C 和 D 执行时也会被压入栈。所以当前栈的顺序为：A-&gt;B-&gt;C-&gt;D（栈顶）；函数 D 执行完之后，会弹出栈被释放，弹出栈的顺序为 D-&gt;C-&gt;B-&gt;A;</p></li><li><p>递归：<br>==为什么没有停止条件的递归会造成栈溢出？比如函数 A 为递归函数，不断地调用自己（因为函数还没有执行完，不会把函数弹出栈），不停地把相同的函数 A 压入栈，最后造成栈溢出（Queue Overfloat）==。</p></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>题目：有 6 个元素 6，5，4，3，2，1 按顺序进栈，问下列哪一个不是合法的出栈顺序？</p><ul><li>A：5 4 3 6 1 2 （√）</li><li>B：4 5 3 2 1 6 （√）</li><li>C：3 4 6 5 2 1 （×）</li><li>D：2 3 4 1 5 6 （√）</li></ul><p>题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为 6 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1。</p><p>解析：</p><ul><li>A 答案：65 进栈，5 出栈，4 进栈出栈，3 进栈出栈，6 出栈，21 进栈，1 出栈，2 出栈（整体入栈顺序符合 654321）。</li><li>B 答案：654 进栈，4 出栈，5 出栈，3 进栈出栈，2 进栈出栈，1 进栈出栈，6 出栈（整体的入栈顺序符合 654321）。</li><li>C 答案：6543 进栈，3 出栈，4 出栈，之后应该 5 出栈而不是 6，所以错误。</li><li>D 答案：65432 进栈，2 出栈，3 出栈，4 出栈，1 进栈出栈，5 出栈，6 出栈。符合入栈顺序。</li></ul><h2 id="栈结构实现"><a href="#栈结构实现" class="headerlink" title="栈结构实现"></a>栈结构实现</h2><h3 id="栈常见的操作"><a href="#栈常见的操作" class="headerlink" title="栈常见的操作"></a>栈常见的操作</h3><ul><li><code>push()</code> 添加一个新元素到栈顶位置。</li><li><code>pop()</code> 移除栈顶的元素，同时返回被移除的元素。</li><li><code>peek()</code> 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）。</li><li><code>isEmpty()</code> 如果栈里没有任何元素就返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>size()</code> 返回栈里的元素个数。这个方法和数组的 <code>length</code> 属性类似。</li><li><code>toString()</code> 将栈结构的内容以字符串的形式返回。</li></ul><h3 id="JavaScript-代码实现栈结构"><a href="#JavaScript-代码实现栈结构" class="headerlink" title="JavaScript 代码实现栈结构"></a>JavaScript 代码实现栈结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈结构的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push(item) 压栈操作，往栈里面添加元素</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pop() 出栈操作，从栈中取出元素，并返回取出的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// peek() 查看栈顶元素</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断栈是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取栈中元素个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 返回以字符串形式的栈内元素数据</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试封装的栈结构"><a href="#测试封装的栈结构" class="headerlink" title="测试封装的栈结构"></a>测试封装的栈结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push() 测试</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stack.items); <span class="comment">//--&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.pop()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// peek() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.peek()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.toString()); <span class="comment">//--&gt; 1 2</span></span><br></pre></td></tr></table></figure><h2 id="栈结构的简单应用"><a href="#栈结构的简单应用" class="headerlink" title="栈结构的简单应用"></a>栈结构的简单应用</h2><p>利用栈结构的特点封装实现十进制转换为二进制的方法。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">dec</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new 一个 Map，保存余数</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当不确定循环次数时，使用 while 循环</span></span><br><span class="line">  <span class="keyword">while</span> (dec &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 除二取余法</span></span><br><span class="line">    stack.push(dec % <span class="number">2</span>); <span class="comment">// 获取余数，放入栈中</span></span><br><span class="line">    dec = <span class="built_in">Math</span>.floor(dec / <span class="number">2</span>); <span class="comment">// 除数除以二，向下取整</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 不断地从栈中取出元素（0 或 1），并拼接到一起。</span></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    binaryString += stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dec2bin() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">100</span>)); <span class="comment">//--&gt; 1100100</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">88</span>)); <span class="comment">//--&gt; 1011000</span></span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="认识队列"><a href="#认识队列" class="headerlink" title="认识队列"></a>认识队列</h2><p>队列（Queue）是一种运算受限的线性表，特点：先进先出。(FIFO：First In First Out)</p><p><strong>受限之处：</strong></p><ul><li>只允许在表的前端（front）进行删除操作。</li><li>只允许在表的后端（rear）进行插入操作。</li></ul><p>生活中类似队列结构的场景：</p><ul><li>排队，比如在电影院，商场，甚至是厕所排队。</li><li>优先排队的人，优先处理。 (买票、结账、WC)。</li></ul><p><a href="https://imgtu.com/i/hZkfFx"><img src="https://z3.ax1x.com/2021/08/25/hZkfFx.png" alt="hZkfFx.png"></a></p><h3 id="队列图解"><a href="#队列图解" class="headerlink" title="队列图解"></a>队列图解</h3><p><a href="https://imgtu.com/i/hZAS1S"><img src="https://z3.ax1x.com/2021/08/25/hZAS1S.png" alt="hZAS1S.png"></a></p><h3 id="队列在程序中的应用"><a href="#队列在程序中的应用" class="headerlink" title="队列在程序中的应用"></a>队列在程序中的应用</h3><ul><li>打印队列：计算机打印多个文件的时候，需要排队打印。</li><li>线程队列：当开启多线程时，当新开启的线程所需的资源不足时就先放入线程队列，等待 CPU 处理。</li></ul><h2 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h2><p>队列的实现和栈一样，有两种方案：</p><ul><li>基于数组实现。</li><li>基于链表实现。</li></ul><h3 id="队列常见的操作"><a href="#队列常见的操作" class="headerlink" title="队列常见的操作"></a>队列常见的操作</h3><ul><li><code>enqueue(element)</code> 向队列尾部添加一个（或多个）新的项。</li><li><code>dequeue()</code> 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</li><li><code>front()</code> 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息与 Map 类的 peek 方法非常类似）。</li><li><code>isEmpty()</code> 如果队列中不包含任何元素，返回 true，否则返回 false。</li><li><code>size()</code> 返回队列包含的元素个数，与数组的 length 属性类似。</li><li><code>toString()</code> 将队列中的内容，转成字符串形式。</li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(item) 入队，将元素加入到队列中</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除队头元素，返回删除的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的队头元素</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中的元素以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// enqueue() 测试</span></span><br><span class="line">queue.enqueue(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dequeue() 测试</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// front() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.front()); <span class="comment">//--&gt; c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.toString()); <span class="comment">//--&gt; c d</span></span><br></pre></td></tr></table></figure><h2 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h2><p>使用队列实现小游戏：<strong>击鼓传花</strong>。</p><p>分析：传入一组数据集合和设定的数字 number，循环遍历数组内元素，遍历到的元素为指定数字 number 时将该元素删除，直至数组剩下一个元素。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用队列结构的特点实现击鼓传花游戏求解方法的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passGame</span>(<span class="params">nameList, number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1、new 一个 Queue 对象</span></span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、将 nameList 里面的每一个元素入队</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> nameList) &#123;</span><br><span class="line">    queue.enqueue(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、开始数数</span></span><br><span class="line">  <span class="comment">// 队列中只剩下 1 个元素时就停止数数</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是 number 时，重新加入到队尾</span></span><br><span class="line">    <span class="comment">// 是 number 时，将其删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; number - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// number 数字之前的人重新放入到队尾（即把队头删除的元素，重新加入到队列中）</span></span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number 对应这个人，直接从队列中删除</span></span><br><span class="line">    <span class="comment">// 由于队列没有像数组一样的下标值不能直接取到某一元素，</span></span><br><span class="line">    <span class="comment">// 所以采用，把 number 前面的 number - 1 个元素先删除后添加到队列末尾，</span></span><br><span class="line">    <span class="comment">// 这样第 number 个元素就排到了队列的最前面，可以直接使用 dequeue 方法进行删除</span></span><br><span class="line">    queue.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、获取最后剩下的那个人</span></span><br><span class="line">  <span class="keyword">const</span> endName = queue.front();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、返回这个人在原数组中对应的索引</span></span><br><span class="line">  <span class="keyword">return</span> nameList.indexOf(endName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// passGame() 测试</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;tony&quot;</span>, <span class="string">&quot;jack&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> targetIndex = passGame(names, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;击鼓传花&quot;</span>, names[targetIndex]); <span class="comment">//--&gt; lily</span></span><br></pre></td></tr></table></figure><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>生活中类似<strong>优先队列</strong>的场景：</p><ul><li>优先排队的人，优先处理。 (买票、结账、WC)。</li><li>排队中，有紧急情况（特殊情况）的人可优先处理。</li></ul><h2 id="优先队列-1"><a href="#优先队列-1" class="headerlink" title="优先队列"></a>优先队列</h2><p>优先级队列主要考虑的问题：</p><ul><li>每个元素不再只是一个数据，还包含优先级。</li><li>在添加元素过程中，根据优先级放入到正确位置。</li></ul><h2 id="优先队列的实现"><a href="#优先队列的实现" class="headerlink" title="优先队列的实现"></a>优先队列的实现</h2><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先队列内部的元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列类（继承 Queue 类）</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(element, priority) 入队，将元素按优先级加入到队列中</span></span><br><span class="line">  <span class="comment">// 重写 enqueue()</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据传入的元素，创建 QueueElement 对象</span></span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 如果为空，不用判断优先级，直接添加</span></span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素进行优先级比较，priority 值越小，优先级越大</span></span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; <span class="built_in">this</span>.items[i].priority) &#123;</span><br><span class="line">          <span class="comment">// 在指定的位置插入元素</span></span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果遍历完所有元素，优先级都大于新插入的元素，就将新插入的元素插入到最后</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除前端元素，返回删除的元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 dequeue()</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的前端元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 front()</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.front();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 isEmpty()</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 size()</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中元素以字符串形式返回</span></span><br><span class="line">  <span class="comment">// 重写 toString()</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item.element + <span class="string">&quot;-&quot;</span> + item.priority + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队 enqueue() 测试</span></span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;B&quot;</span>, <span class="number">15</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;C&quot;</span>, <span class="number">11</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;D&quot;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;E&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;A&quot;, priority: 10&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;C&quot;, priority: 11&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队 dequeue() 测试</span></span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.toString()); <span class="comment">//--&gt; B-15 E-18 D-20</span></span><br></pre></td></tr></table></figure><h2 id="数组、栈和队列图解"><a href="#数组、栈和队列图解" class="headerlink" title="数组、栈和队列图解"></a>数组、栈和队列图解</h2><p><a href="https://imgtu.com/i/hZAXDJ"><img src="https://z3.ax1x.com/2021/08/25/hZAXDJ.png" alt="hZAXDJ.png"></a></p><h1 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h1><h2 id="认识链表"><a href="#认识链表" class="headerlink" title="认识链表"></a>认识链表</h2><h3 id="链表和数组"><a href="#链表和数组" class="headerlink" title="链表和数组"></a>链表和数组</h3><p>链表和数组一样，可以用于存储一系列的元素，但是链表和数组的实现机制完全不同。</p><h4 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h4><ul><li><p>存储多个元素，数组（或列表）可能是最常用的数据结构。</p></li><li><p>几乎每一种编程语言都有默认实现数组结构，提供了一个便利的 <code>[]</code> 语法来访问数组元素。</p></li><li><p>数组缺点：</p><p>数组的创建需要申请一段连续的内存空间(一整块内存)，并且大小是固定的，当前数组不能满足容量需求时，需要扩容。 (一般情况下是申请一个更大的数组，比如 2 倍，然后将原数组中的元素复制过去)</p><p>在数组开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</p></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li><p>存储多个元素，另外一个选择就是使用链表。</p></li><li><p>不同于数组，链表中的元素在内存中不必是连续的空间。</p></li><li><p>链表的每个元素由一个存储元素本身的节点和一个指向下一个元素的引用(有些语言称为指针)组成。</p></li><li><p>链表优点：</p><p>内存空间不必是连续的，可以充分利用计算机的内存，实现灵活的内存动态管理。</p><p>链表不必在创建时就确定大小，并且大小可以无限延伸下去。</p><p>链表在插入和删除数据时，时间复杂度可以达到 O(1)，相对数组效率高很多。</p></li><li><p>链表缺点：</p><p>访问任何一个位置的元素时，需要从头开始访问。(无法跳过第一个元素访问任何一个元素)</p><p>无法通过下标值直接访问元素，需要从头开始一个个访问，直到找到对应的元素。</p><p>虽然可以轻松地到达下一个节点，但是回到前一个节点是很难的。</p></li></ul><h2 id="单向链表-1"><a href="#单向链表-1" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表类似于火车，有一个火车头，火车头会连接一个节点，节点上有乘客，并且这个节点会连接下一个节点，以此类推。</p><ul><li><p>链表的火车结构</p><p><a href="https://imgtu.com/i/hZEBMF"><img src="https://z3.ax1x.com/2021/08/25/hZEBMF.png" alt="hZEBMF.png"></a></p></li><li><p>链表的数据结构</p><p>head 属性指向链表的第一个节点。<br>链表中的最后一个节点指向 <code>null</code>。<br>当链表中一个节点也没有的时候，head 直接指向 <code>null</code>。</p></li></ul><p>  <a href="https://imgtu.com/i/hZEDr4"><img src="https://z3.ax1x.com/2021/08/25/hZEDr4.png" alt="hZEDr4.png"></a></p><ul><li><p>给火车加上数据后的结构</p><p><a href="https://imgtu.com/i/hZErqJ"><img src="https://z3.ax1x.com/2021/08/25/hZErqJ.png" alt="hZErqJ.png"></a></p></li></ul><h3 id="链表中的常见操作"><a href="#链表中的常见操作" class="headerlink" title="链表中的常见操作"></a>链表中的常见操作</h3><ul><li><code>append(element)</code> 向链表尾部添加一个新的项。</li><li><code>insert(position, element)</code> 向链表的特定位置插入一个新的项。</li><li><code>get(position)</code> 获取对应位置的元素。</li><li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回-1。</li><li><code>update(position, element)</code> 修改某个位置的元素。</li><li><code>removeAt(position)</code> 从链表的特定位置移除一项。</li><li><code>remove(element)</code> 从链表中移除一项。</li><li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 true，如果链表长度大于 0 则返回 false。</li><li><code>size()</code> 返回链表包含的元素个数，与数组的 length 属性类似。</li><li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</li></ul><h3 id="单向链表的封装"><a href="#单向链表的封装" class="headerlink" title="单向链表的封装"></a>单向链表的封装</h3><h4 id="创建单向链表类"><a href="#创建单向链表类" class="headerlink" title="创建单向链表类"></a>创建单向链表类</h4><p>先创建单向链表类 LinkedList，添加基本属性，再逐步实现单向链表的常用方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-append-方法"><a href="#实现-append-方法" class="headerlink" title="实现 append() 方法"></a>实现 append() 方法</h4><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">    <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="过程图解"><a href="#过程图解" class="headerlink" title="过程图解"></a>过程图解</h5><ul><li><p>首先让 <code>currentNode</code> 指向第一个节点。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.5iskrdf4nu40.png" alt="image"></p></li><li><p>通过 <code>while</code> 循环使 <code>currentNode</code> 指向最后一个节点，最后通过 <code>currentNode.next = newNode</code>，让最后一个节点指向新节点 <code>newNode</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4mw3bx5g80m0.png" alt="image"></p></li></ul><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">// 测试 append 方法</span></span><br><span class="line">linkedList.append(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.6kx4qbq8e5c.png" alt="image"></p><h4 id="实现-toString-方法"><a href="#实现-toString-方法" class="headerlink" title="实现 toString() 方法"></a>实现 toString() 方法</h4><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    result += currentNode.data + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 toString 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; AA BB CC</span></span><br></pre></td></tr></table></figure><h4 id="实现-insert-方法"><a href="#实现-insert-方法" class="headerlink" title="实现 insert() 方法"></a>实现 insert() 方法</h4><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// position = 0 的情况</span></span><br><span class="line">    <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">    newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一些变量</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">    <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">    newNode.next = currentNode;</span><br><span class="line">    previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-2"><a href="#代码测试-2" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 insert 方法</span></span><br><span class="line">linkedList.insert(<span class="number">0</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">linkedList.insert(<span class="number">2</span>, <span class="string">&quot;456&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 123 AA 456 BB CC</span></span><br></pre></td></tr></table></figure><h4 id="实现-getData-方法"><a href="#实现-getData-方法" class="headerlink" title="实现 getData() 方法"></a>实现 getData() 方法</h4><p>获取指定位置（position）的 data。</p><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-3"><a href="#代码测试-3" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 getData 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">0</span>)); <span class="comment">//--&gt; 123</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; AA</span></span><br></pre></td></tr></table></figure><h4 id="实现-indexOf-方法"><a href="#实现-indexOf-方法" class="headerlink" title="实现 indexOf() 方法"></a>实现 indexOf() 方法</h4><p>indexOf(data) 返回指定 data 的 index，如果没有，返回 -1。</p><h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-4"><a href="#代码测试-4" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 indexOf 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;AA&quot;</span>)); <span class="comment">//--&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;ABC&quot;</span>)); <span class="comment">//--&gt; -1</span></span><br></pre></td></tr></table></figure><h4 id="实现-update-方法"><a href="#实现-update-方法" class="headerlink" title="实现 update() 方法"></a>实现 update() 方法</h4><p>update(position, data) 修改指定位置节点的 data。</p><h5 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-5"><a href="#代码测试-5" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 update 方法</span></span><br><span class="line">linkedList.update(<span class="number">0</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 AA 456 BB CC</span></span><br><span class="line">linkedList.update(<span class="number">1</span>, <span class="string">&quot;54321&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 BB CC</span></span><br></pre></td></tr></table></figure><h4 id="实现-removeAt-方法"><a href="#实现-removeAt-方法" class="headerlink" title="实现 removeAt() 方法"></a>实现 removeAt() 方法</h4><p>removeAt(position) 删除指定位置的节点。</p><h5 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// position = 0 的情况</span></span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">    <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">    previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-6"><a href="#代码测试-6" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 removeAt 方法</span></span><br><span class="line">linkedList.removeAt(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 CC</span></span><br></pre></td></tr></table></figure><h4 id="实现-remove-方法"><a href="#实现-remove-方法" class="headerlink" title="实现 remove() 方法"></a>实现 remove() 方法</h4><p>remove(data) 删除指定 data 所在的节点。</p><h5 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-7"><a href="#代码测试-7" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 remove 方法</span></span><br><span class="line">linkedList.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456</span></span><br></pre></td></tr></table></figure><h4 id="实现-isEmpty-方法"><a href="#实现-isEmpty-方法" class="headerlink" title="实现 isEmpty() 方法"></a>实现 isEmpty() 方法</h4><p>isEmpty() 判断链表是否为空。</p><h5 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-8"><a href="#代码测试-8" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 isEmpty 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.isEmpty()); <span class="comment">//--&gt; false</span></span><br></pre></td></tr></table></figure><h4 id="实现-size-方法"><a href="#实现-size-方法" class="headerlink" title="实现 size() 方法"></a>实现 size() 方法</h4><p>size() 获取链表的长度。</p><h5 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-9"><a href="#代码测试-9" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 size 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.size()); <span class="comment">//--&gt; 3</span></span><br></pre></td></tr></table></figure><h4 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">      <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">      <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化一些变量</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">      <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 获取指定位置的 data</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 返回指定 data 的 index，如果没有，返回 -1。</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update() 修改指定位置节点的 data</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">      <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove() 删除指定 data 的节点</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 链表数据以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><h2 id="单向链表和双向链表"><a href="#单向链表和双向链表" class="headerlink" title="单向链表和双向链表"></a>单向链表和双向链表</h2><h3 id="单向链表-2"><a href="#单向链表-2" class="headerlink" title="单向链表"></a>单向链表</h3><ul><li>只能从头遍历到尾或者从尾遍历到头（一般从头到尾）。</li><li>链表相连的过程是单向的，实现原理是上一个节点中有指向下一个节点的引用。</li><li>单向链表有一个比较明显的缺点：可以轻松到达下一个节点，但回到前一个节点很难，在实际开发中, 经常会遇到需要回到上一个节点的情况。</li></ul><h3 id="双向链表-1"><a href="#双向链表-1" class="headerlink" title="双向链表"></a>双向链表</h3><ul><li>既可以从头遍历到尾，也可以从尾遍历到头。</li><li>链表相连的过程是双向的。实现原理是一个节点既有向前连接的引用，也有一个向后连接的引用。</li><li>双向链表可以有效的解决单向链表存在的问题。</li><li>双向链表缺点：<ul><li>每次在插入或删除某个节点时，都需要处理四个引用，而不是两个，实现起来会困难些。</li><li>相对于单向链表，所占内存空间更大一些。</li><li>但是，相对于双向链表的便利性而言，这些缺点微不足道。</li></ul></li></ul><h2 id="双向链表结构"><a href="#双向链表结构" class="headerlink" title="双向链表结构"></a>双向链表结构</h2><p><a href="https://imgtu.com/i/hZZ2jO"><img src="https://z3.ax1x.com/2021/08/25/hZZ2jO.png" alt="hZZ2jO.png"></a></p><ul><li>双向链表不仅有 head 指针指向第一个节点，而且有 tail 指针指向最后一个节点。</li><li>每一个节点由三部分组成：item 储存数据、prev 指向前一个节点、next 指向后一个节点。</li><li>双向链表的第一个节点的 prev 指向 null。</li><li>双向链表的最后一个节点的 next 指向 null。</li></ul><h2 id="双向链表常见的操作"><a href="#双向链表常见的操作" class="headerlink" title="双向链表常见的操作"></a>双向链表常见的操作</h2><ul><li><code>append(element)</code> 向链表尾部追加一个新元素。</li><li><code>insert(position, element)</code> 向链表的指定位置插入一个新元素。</li><li><code>getElement(position)</code> 获取指定位置的元素。</li><li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回 -1。</li><li><code>update(position, element)</code> 修改指定位置上的元素。</li><li><code>removeAt(position)</code> 从链表中的删除指定位置的元素。</li><li><code>remove(element)</code> 从链表删除指定的元素。</li><li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 <code>trun</code>，如果链表长度大于 0 则返回 <code>false</code>。</li><li><code>size()</code> 返回链表包含的元素个数，与数组的 <code>length</code> 属性类似。</li><li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 <code>toString</code> 方法，让其只输出元素的值。</li><li><code>forwardString()</code> 返回正向遍历节点字符串形式。</li><li><code>backwordString()</code> 返回反向遍历的节点的字符串形式。</li></ul><h2 id="双向链表的封装"><a href="#双向链表的封装" class="headerlink" title="双向链表的封装"></a>双向链表的封装</h2><h3 id="创建双向链表类-DoublyLinkedList"><a href="#创建双向链表类-DoublyLinkedList" class="headerlink" title="创建双向链表类 DoublyLinkedList"></a>创建双向链表类 DoublyLinkedList</h3><ul><li>DoublyNode 类继承单向链表的 Node 类，新添加 <code>this.prev</code> 属性，该属性用于指向上一个节点。</li><li>DoublyLinkedList 类继承 LinkedList 类，新添加 <code>this.tail</code> 属性，该属性指向末尾的节点。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向链表的节点类（继承单向链表的节点类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(element);</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表类继承单向链表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="append-element"><a href="#append-element" class="headerlink" title="append(element)"></a>append(element)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line"><span class="comment">// 重写 append()</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建双向链表节点</span></span><br><span class="line"><span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、追加元素</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.head = newNode;</span><br><span class="line">  <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">  <span class="comment">// 巧妙之处</span></span><br><span class="line">  <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">  newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">  <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-position-element"><a href="#insert-position-element" class="headerlink" title="insert(position, element)"></a>insert(position, element)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line"><span class="comment">// 重写 insert()</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123; <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="insert-position-element-1"><a href="#insert-position-element-1" class="headerlink" title="insert(position, element)"></a>insert(position, element)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line"><span class="comment">// 重写 insert()</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123; <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="removeAt-position"><a href="#removeAt-position" class="headerlink" title="removeAt(position)"></a>removeAt(position)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line"><span class="comment">// 重写 removeAt()</span></span><br><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1、position 越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123; <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">      <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123; <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">    currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">      previousNode = currentNode;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    previousNode.next = currentNode.next;</span><br><span class="line">    currentNode.next.perv = previousNode;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.length--;</span><br><span class="line">  <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="update-position-data"><a href="#update-position-data" class="headerlink" title="update(position, data)"></a>update(position, data)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line"><span class="comment">// 重写 update()</span></span><br><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">  <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forwardToString"><a href="#forwardToString" class="headerlink" title="forwardToString()"></a>forwardToString()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="backwardString"><a href="#backwardString" class="headerlink" title="backwardString()"></a>backwardString()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="其他方法的实现"><a href="#其他方法的实现" class="headerlink" title="其他方法的实现"></a>其他方法的实现</h3><p>双向链表的其他方法通过继承单向链表来实现。</p><h3 id="完整实现-1"><a href="#完整实现-1" class="headerlink" title="完整实现"></a>完整实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line">  <span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line">  <span class="comment">// 重写 append()</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">      <span class="comment">// 巧妙之处</span></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line">  <span class="comment">// 重写 insert()</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getData(position);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.indexOf(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 removeAt()</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">      currentNode.next.perv = previousNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 update()</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">    <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(data) 删除指定 data 所在的节点（继承单向链表）</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.remove(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码测试-10"><a href="#代码测试-10" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doublyLinkedList = <span class="keyword">new</span> DoublyLinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// append() 测试</span></span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;ZZ&quot;</span>);</span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert() 测试</span></span><br><span class="line">doublyLinkedList.insert(<span class="number">0</span>, <span class="string">&quot;00&quot;</span>);</span><br><span class="line">doublyLinkedList.insert(<span class="number">2</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getData() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; ZZ</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.indexOf(<span class="string">&quot;XX&quot;</span>)); <span class="comment">//--&gt; 3</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeAt() 测试</span></span><br><span class="line">doublyLinkedList.removeAt(<span class="number">0</span>);</span><br><span class="line">doublyLinkedList.removeAt(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// update() 测试</span></span><br><span class="line">doublyLinkedList.update(<span class="number">0</span>, <span class="string">&quot;111111&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.remove(<span class="string">&quot;111111&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.remove(<span class="string">&quot;22222&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// forwardToString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.forwardToString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// backwardString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.backwardString());</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合-1"><a href="#集合-1" class="headerlink" title="集合"></a>集合</h2><p>几乎每种编程语言中，都有集合结构。集合比较常见的实现方式是哈希表，这里使用 JavaScript 的 Object 进行封装。</p><h3 id="集合特点"><a href="#集合特点" class="headerlink" title="集合特点"></a>集合特点</h3><ul><li><p>集合通常是由一组<strong>无序的</strong>、<strong>不能重复的</strong>元素构成。</p></li><li><p>数学中常指的集合中的元素是可以重复的，但是计算机中集合的元素不能重复。</p></li><li><p>集合是特殊的数组。</p><ul><li>特殊之处在于里面的元素没有顺序，也不能重复。</li><li>没有顺序意味着不能通过下标值进行访问，不能重复意味着相同的对象在集合中只会存在一份。</li></ul></li></ul><h3 id="封装集合"><a href="#封装集合" class="headerlink" title="封装集合"></a>封装集合</h3><p>ES6 中的 <code>Set</code> 就是一个集合类，这里我们重新封装一个 <code>Set</code> 类，了解集合的底层实现。</p><h4 id="集合常见的操作"><a href="#集合常见的操作" class="headerlink" title="集合常见的操作"></a>集合常见的操作</h4><ul><li><code>add(value)</code> 向集合添加一个新的项。</li><li><code>remove(value)</code> 从集合移除一个值。</li><li><code>has(value)</code> 如果值在集合中，返回 <code>true</code>，否则返回<code> false</code>。</li><li><code>clear()</code> 移除集合中的所有项。</li><li><code>size()</code> 返回集合所包含元素的数量。与数组的 <code>length</code> 属性类似。</li><li><code>values()</code> 返回一个包含集合中所有值的数组。</li><li>还有其他的方法，用的不多，这里不做封装。</li></ul><h4 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合结构的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// has(value) 判断集合中是否存在 value 值，存在返回 true，否则返回 false</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add(value) 往集合中添加 value</span></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.items[value] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(value) 删除集合中指定的 value</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果集合不存在该 value，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[value];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear() 清空集合中所有 value</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取集合中的 value 个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items).length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// values() 获取集合中所有的 value</span></span><br><span class="line">  <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试-11"><a href="#代码测试-11" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// add() 测试</span></span><br><span class="line">set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;zxc&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//--&gt; &#123;items: &#123;123: &quot;123&quot;, abc: &quot;abc&quot;, zxc: &quot;zxc&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="string">&quot;123&quot;</span>)); <span class="comment">//--&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="string">&quot;456&quot;</span>)); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line">set.remove(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//--&gt; &#123;items: &#123;123: &quot;123&quot;, zxc: &quot;zxc&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//--&gt; [&quot;123&quot;, &quot;zxc&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear() 测试</span></span><br><span class="line">set.clear();</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//--&gt; []</span></span><br></pre></td></tr></table></figure><h3 id="集合间的操作"><a href="#集合间的操作" class="headerlink" title="集合间的操作"></a>集合间的操作</h3><ul><li>并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。</li><li>交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。</li><li>差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合。</li><li>子集：验证一个给定集合是否是另一个集合的子集。</li></ul><p><a href="https://imgtu.com/i/hZem5R"><img src="https://z3.ax1x.com/2021/08/25/hZem5R.png" alt="hZem5R.png"></a></p><h4 id="并集的实现"><a href="#并集的实现" class="headerlink" title="并集的实现"></a>并集的实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// union() 求两个集合的并集</span></span><br><span class="line"><span class="function"><span class="title">union</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、将当前集合（this）的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        unionSet.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将 otherSet 集合的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> otherSet.values()) &#123;</span><br><span class="line">        unionSet.add(value); <span class="comment">// add() 已经有重复判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交集的实现"><a href="#交集的实现" class="headerlink" title="交集的实现"></a>交集的实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// intersection() 求两个集合的交集</span></span><br><span class="line"><span class="function"><span class="title">intersection</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (otherSet.has(value)) &#123;</span><br><span class="line">            intersectionSet.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="差集的实现"><a href="#差集的实现" class="headerlink" title="差集的实现"></a>差集的实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// difference() 差集</span></span><br><span class="line"><span class="function"><span class="title">difference</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，不存在的即为差集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">            differenceSet.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子集的实现"><a href="#子集的实现" class="headerlink" title="子集的实现"></a>子集的实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subset() 子集</span></span><br><span class="line"><span class="function"><span class="title">subset</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，有不存在的返回 false</span></span><br><span class="line">    <span class="comment">// 遍历完所有的，返回 true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合的完整实现"><a href="#集合的完整实现" class="headerlink" title="集合的完整实现"></a>集合的完整实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合结构的封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// has(value) 判断集合中是否存在 value 值，存在返回 true，否则返回 false</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add(value) 往集合中添加 value</span></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.items[value] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(value) 删除集合中指定的 value</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果集合不存在该 value，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[value];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear() 清空集合中所有 value</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取集合中的 value 个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items).length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// values() 获取集合中所有的 value</span></span><br><span class="line">  <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------- 集合间的操作 ------- //</span></span><br><span class="line">  <span class="comment">// union() 求两个集合的并集</span></span><br><span class="line">  <span class="function"><span class="title">union</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、将当前集合（this）的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      unionSet.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将 otherSet 集合的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> otherSet.values()) &#123;</span><br><span class="line">      unionSet.add(value); <span class="comment">// add() 已经有重复判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// intersection() 求两个集合的交集</span></span><br><span class="line">  <span class="function"><span class="title">intersection</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (otherSet.has(value)) &#123;</span><br><span class="line">        intersectionSet.add(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// difference() 差集</span></span><br><span class="line">  <span class="function"><span class="title">difference</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，不存在的即为差集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">        differenceSet.add(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subset() 子集</span></span><br><span class="line">  <span class="function"><span class="title">subset</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，有不存在的返回 false</span></span><br><span class="line">    <span class="comment">// 遍历完所有的，返回 true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a>字典</h2><h3 id="字典特点"><a href="#字典特点" class="headerlink" title="字典特点"></a>字典特点</h3><ul><li>字典存储的是<strong>键值对</strong>，主要特点是<strong>一一对应</strong>。</li><li>比如保存一个人的信息<ul><li>数组形式：<code>[19，&quot;Tom&quot;, 1.65]</code>，可通过下标值取出信息。</li><li>字典形式：<code>&#123;&quot;age&quot;: 19, &quot;name&quot;: &quot;Tom&quot;, &quot;height&quot;: 165&#125;</code>，可以通过 <code>key</code> 取出 <code>value</code>。</li></ul></li><li>此外，在字典中 key 是不能重复且无序的，而 Value 可以重复。</li></ul><h3 id="字典和映射的关系"><a href="#字典和映射的关系" class="headerlink" title="字典和映射的关系"></a>字典和映射的关系</h3><ul><li>有些编程语言中称这种映射关系为<strong>字典</strong>，如 Swift 中的 <code>Dictonary</code>，Python 中的 <code>dict</code>。</li><li>有些编程语言中称这种映射关系为 <strong>Map</strong>，比如 Java 中的 <code>HashMap</code> 和 <code>TreeMap</code> 等。</li></ul><h3 id="字典常见的操作"><a href="#字典常见的操作" class="headerlink" title="字典常见的操作"></a>字典常见的操作</h3><ul><li><code>set(key,value)</code> 向字典中添加新元素。</li><li><code>remove(key)</code> 通过使用键值来从字典中移除键值对应的数据值。</li><li><code>has(key)</code> 如果某个键值存在于这个字典中，则返回 <code>true</code>，反之则返回 <code>false</code>。</li><li><code>get(key)</code> 通过键值查找特定的数值并返回。</li><li><code>clear()</code> 将这个字典中的所有元素全部删除。</li><li><code>size()</code> 返回字典所包含元素的数量。与数组的 <code>length</code> 属性类似。</li><li><code>keys()</code> 将字典所包含的所有键名以数组形式返回。</li><li><code>values()</code> 将字典所包含的所有数值以数组形式返回。</li></ul><h3 id="字典封装"><a href="#字典封装" class="headerlink" title="字典封装"></a>字典封装</h3><h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字典结构的封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// has(key) 判断字典中是否存在某个 key</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set(key, value) 在字典中添加键值对</span></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(key) 在字典中删除指定的 key</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果集合不存在该 key，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(key)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get(key) 获取指定 key 的 value，如果没有，返回 undefined</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.has(key) ? <span class="built_in">this</span>.items[key] : <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有的 key</span></span><br><span class="line">  <span class="function"><span class="title">keys</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有的 value</span></span><br><span class="line">  <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.values(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取字典中的键值对个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.keys().length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear() 清空字典中所有的键值对</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试-12"><a href="#代码测试-12" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// set() 测试</span></span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;XPoet&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">map.set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;i@xpoet.cn&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// &#123;items: &#123;name: &quot;XPoet&quot;, age: 18, email: &quot;i@xpoet.cn&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;name&quot;</span>)); <span class="comment">//--&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;address&quot;</span>)); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line">map.remove(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// &#123;age: 18, email: &quot;i@xpoet.cn&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;age&quot;</span>)); <span class="comment">//--&gt; 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.keys()); <span class="comment">//--&gt; [&quot;age&quot;, &quot;email&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.values()); <span class="comment">//--&gt; [18, &quot;i@xpoet.cn&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.size()); <span class="comment">//--&gt; 2</span></span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="认识哈希表"><a href="#认识哈希表" class="headerlink" title="认识哈希表"></a>认识哈希表</h2><p>哈希表是一种非常重要的数据结构，几乎所有的编程语言都直接或者间接应用这种数据结构。</p><p>哈希表通常是基于数组实现的，但是相对于数组，它存在更多优势：</p><ul><li>哈希表可以提供非常快速的 <strong>插入-删除-查找</strong> 操作。</li><li>无论多少数据，插入和删除值都只需接近常量的时间，即 <strong>O(1)</strong> 的时间复杂度。实际上，只需要几个机器指令即可完成。</li><li>哈希表的速度比树还要快，基本可以瞬间查找到想要的元素。</li><li>哈希表相对于树来说编码要简单得多。</li></ul><p>哈希表同样存在不足之处：</p><ul><li>哈希表中的数据是没有顺序的，所以不能以一种固定的方式（比如从小到大 ）来遍历其中的元素。</li><li>通常情况下，哈希表中的 <code>key</code> 是不允许重复的，不能放置相同的 <code>key</code>，用于保存不同的元素。</li></ul><p>哈希表是什么？</p><ul><li>哈希表并不好理解，不像数组、链表和树等可通过图形的形式表示其结构和原理。</li><li>哈希表的结构就是数组，但它<strong>神奇之处在于对下标值的一种变换</strong>，这种变换我们可以称之为<strong>哈希函数</strong>，通过哈希函数可以获取 HashCode。</li></ul><p>通过以下案例了解哈希表：</p><ul><li><p>案例一：公司想要存储 1000 个人的信息，每一个工号对应一个员工的信息。若使用数组，增删数据时比较麻烦；使用链表，获取数据时比较麻烦。有没有一种数据结构，能把某一员工的姓名转换为它对应的工号，再根据工号查找该员工的完整信息呢？没错此时就可以使用哈希表的哈希函数来实现。</p></li><li><p>案例二：存储联系人和对应的电话号码：当要查找张三（比如）的号码时，若使用数组：由于不知道存储张三数据对象的下标值，所以查找起来十分麻烦，使用链表时也同样麻烦。而使用哈希表就能通过哈希函数把张三这个名称转换为它对应的下标值，再通过下标值查找效率就非常高了。</p></li></ul><p>也就是说：哈希表最后还是基于数据来实现的，只不过哈希表能够通过哈希函数把字符串转化为对应的下标值，建立字符串和下标值的映射关系。</p><h3 id="认识哈希化"><a href="#认识哈希化" class="headerlink" title="认识哈希化"></a>认识哈希化</h3><p>为了把字符串转化为对应的下标值，需要有一套编码系统，为了方便理解我们创建这样一套编码系统：比如 a 为 1，b 为 2，c 为 3，以此类推 z 为 26，空格为 27（不考虑大写情况）。</p><p>有了编码系统后，将字母转化为数字也有很多种方案：</p><ul><li>方案一：数字相加。</li></ul><p>例如 cats 转化为数字：<code>3 + 1 + 20 + 19 = 43</code>，那么就把 43 作为 cats 单词的下标值储存在数组中；</p><p>但是这种方式会存在这样的问题：很多的单词按照该方式转化为数字后都是 43，比如 was。而在数组中一个下标值只能储存一个数据，所以该方式不合理。</p><ul><li>方案二：幂的连乘。</li></ul><p>我们平时使用的大于 10 的数字，就是用幂的连乘来表示它的唯一性的。<br>比如： <code>6543 = 6 * 10^3 + 5 * 10^2 + 4 * 10 + 3</code>；这样单词也可以用该种方式来表示：<code>cats = 3 * 27^3 + 1 * 27^2 + 20 * 27 + 17 = 60337</code>。</p><p>虽然该方式可以保证字符的唯一性，但是如果是较长的字符（如 aaaaaaaaaa）所表示的数字就非常大，此时要求很大容量的数组，然而其中却有许多下标值指向的是无效的数据（比如不存在 zxcvvv 这样的单词），造成了数组空间的浪费。</p><p>两种方案总结：</p><ul><li>第一种方案（让数字相加求和）产生的数组下标太少。</li><li>第二种方案（与 27 的幂相乘求和）产生的数组下标又太多。</li></ul><p>现在需要一种压缩方法，把幂的连乘方案系统中得到的<strong>巨大整数范围压缩到可接受的数组范围中</strong>。可以通过<strong>取余</strong>操作来实现。虽然取余操作得到的结构也有可能重复，但是可以通过其他方式解决。</p><h3 id="哈希表的一些概念"><a href="#哈希表的一些概念" class="headerlink" title="哈希表的一些概念"></a>哈希表的一些概念</h3><ul><li><p><strong>哈希化</strong></p><p>将<strong>大数字</strong>转化成<strong>数组范围内下标</strong>的过程，称之为哈希化。</p></li><li><p><strong>哈希函数</strong></p><p>我们通常会将单词转化成大数字，把大数字进行哈希化的代码实现放在一个函数中，该函数就称为哈希函数。</p></li><li><p><strong>哈希表</strong></p><p>对最终数据插入的数组进行整个结构的封装，得到的就是哈希表。</p></li></ul><h3 id="地址的冲突"><a href="#地址的冲突" class="headerlink" title="地址的冲突"></a>地址的冲突</h3><p>在实际中，经过哈希函数哈希化过后得到的下标值可能有重复，这种情况称为冲突，冲突是不可避免的，我们只能解决冲突。</p><p>解决冲突常见的两种方案：链地址法（拉链法）和开放地址法。</p><h4 id="链地址法（拉链法）"><a href="#链地址法（拉链法）" class="headerlink" title="链地址法（拉链法）"></a>链地址法（拉链法）</h4><p>如下图所示，我们将每一个数字都对 10 进行取余操作，则余数的范围 0~9 作为数组的下标值。并且，数组每一个下标值对应的位置存储的不再是一个数字了，而是存储由经过取余操作后得到相同余数的数字组成的数组或链表。</p><p><a href="https://imgtu.com/i/hZmGlV"><img src="https://z3.ax1x.com/2021/08/25/hZmGlV.png" alt="hZmGlV.png"></a></p><p>这样可以根据下标值获取到整个数组或链表，之后继续在数组或链表中查找就可以了。而且，产生冲突的元素一般不会太多。</p><p>总结：链地址法解决冲突的办法是每个数组单元中存储的不再是单个数据，而是一条链条，这条链条常使用的数据结构为数组或链表，两种数据结构查找的效率相当（因为链条的元素一般不会太多）。</p><h4 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h4><p>开放地址法的主要工作方式是寻找空白的单元格来放置冲突的数据项。</p><p><a href="https://imgtu.com/i/hZmrSx"><img src="https://z3.ax1x.com/2021/08/25/hZmrSx.png" alt="hZmrSx.png"></a></p><p>根据探测空白单元格位置方式的不同，可分为三种方法：</p><ul><li>线性探测</li><li>二次探测</li><li>再哈希法</li></ul><h5 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h5><ul><li>当插入 13 时：</li></ul><p>经过哈希化（对 10 取余）之后得到的下标值 index=3，但是该位置已经放置了数据 33。而线性探测就是从 index 位置+1 开始向后一个一个来查找合适的位置来放置 13，所谓合适的位置指的是空的位置，如上图中 index=4 的位置就是合适的位置。</p><ul><li><p>当查询 13 时：</p><ul><li>首先 13 经过哈希化得到 index=3，如果 index=3 的位置存放的数据与需要查询的数据 13 相同，就直接返回；<br>不相同时，则线性查找，从 index+1 位置开始一个一个位置地查找数据 13。</li><li>查询过程中不会遍历整个哈希表，只要查询到空位置，就停止，因为插入 13 时不会跳过空位置去插入其他位置。</li></ul></li><li><p>当删除 13 时：</p><ul><li>删除操作和上述两种情况类似，但需要注意的是，删除一个数据项时，不能将该位置下标的内容设置为 null，否则会影响到之后其他的查询操作，因为一遇到为 null 的位置就会停止查找。</li><li>通常删除一个位置的数据项时，我们可以将它进行特殊处理（比如设置为-1），这样在查找时遇到-1 就知道要继续查找。</li></ul></li></ul><p>线性探测存在的问题：</p><ul><li><p>线性探测存在一个比较严重的问题，就是聚集。</p></li><li><p>如哈希表中还没插入任何元素时，插入 23、24、25、26、27，这就意味着下标值为 3、4、5、6、7 的位置都放置了数据，这种一连串填充单元就称为聚集。</p></li><li><p>聚集会影响哈希表的性能，无论是插入/查询/删除都会影响。</p></li><li><p>比如插入 13 时就会发现，连续的单元 3~7 都不允许插入数据，并且在插入的过程中需要经历多次这种情况。二次探测法可以解决该问题。</p></li></ul><p><a href="https://imgtu.com/i/hZm20e"><img src="https://z3.ax1x.com/2021/08/25/hZm20e.png" alt="hZm20e.png"></a></p><h5 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a>二次探测</h5><p>上文所说的线性探测存在的问题：</p><ul><li><p>如果之前的数据是连续插入的，那么新插入的一个数据可能需要探测很长的距离；</p><p>二次探测是在线性探测的基础上进行了优化：</p></li><li><p>线性探测：我们可以看成是步长为 1 的探测，比如从下表值 x 开始，那么线性探测就是按照下标值：x+1、x+2、x+3 等依次探测；</p></li><li><p>二次探测：对步长进行了优化，比如从下标值 x 开始探测：x+1^2^、x+2^2^、x+3^3^ 。这样一次性探测比较长的距离，避免了数据聚集带来的影响。</p></li><li><p>二次探测存在的问题：</p><p>当插入数据分布性较大的一组数据时，比如：13-163-63-3-213，这种情况会造成步长不一的一种聚集（虽然这种情况出现的概率较线性探测的聚集要小），同样会影响性能。</p></li></ul><h5 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h5><p>在开放地址法中寻找空白单元格的最好的解决方式为再哈希化。</p><ul><li>二次探测的步长是固定的：1，4，9，16 依次类推。</li><li>现在需要一种方法：产生一种依赖关键字(数据)的探测序列，而不是每个关键字探测步长都一样。</li><li>这样，不同的关键字即使映射到相同的数组下标，也可以使用不同的探测序列。</li><li>再哈希法的做法为：把关键字用另一个哈希函数，再做一次哈希化，用这次哈希化的结果作为该关键字的步长。</li></ul><p>第二次哈希化需要满足以下两点：</p><ul><li>和第一个哈希函数不同，不然哈希化后的结果仍是原来位置；</li><li>不能输出为 0，否则每次探测都是原地踏步的死循环；</li></ul><p>优秀的哈希函数：</p><ul><li>stepSize = constant - （key % constant）；</li><li>其中 constant 是质数，且小于数组的容量；</li><li>例如：stepSize = 5 - （key % 5），满足需求，并且结果不可能为 0；</li></ul><p>哈希化的效率</p><p>哈希表中执行插入和搜索操作效率是非常高的。</p><ul><li>如果没有发生冲突，那么效率就会更高；</li><li>如果发生冲突，存取时间就依赖后来的探测长度；</li><li>平均探测长度以及平均存取时间，取决于填装因子，随着填装因子变大，探测长度会越来越长。</li></ul><h4 id="装填因子"><a href="#装填因子" class="headerlink" title="装填因子"></a>装填因子</h4><ul><li>装填因子表示当前哈希表中已经包含的数据项和整个哈希表长度的比值；</li><li>装填因子 = 总数据项 / 哈希表长度；</li><li>开放地址法的装填因子最大为 1，因为只有空白的单元才能放入元素；</li><li>链地址法的装填因子可以大于 1，因为只要愿意，拉链法可以无限延伸下去；</li></ul><h4 id="不同探测方式性能的比较"><a href="#不同探测方式性能的比较" class="headerlink" title="不同探测方式性能的比较"></a>不同探测方式性能的比较</h4><ul><li><p>线性探测</p><p>可以看到，随着装填因子的增大，平均探测长度呈指数形式增长，性能较差。实际情况中，最好的装填因子取决于存储效率和速度之间的平衡，随着装填因子变小，存储效率下降，而速度上升。</p><p><a href="https://imgtu.com/i/hZmo1P"><img src="https://z3.ax1x.com/2021/08/25/hZmo1P.png" alt="hZmo1P.png"></a></p></li><li><p>二次探测和再哈希化的性能</p><p>二次探测和再哈希法性能相当，它们的性能比线性探测略好。由下图可知，随着装填因子的变大，平均探测长度呈指数形式增长，需要探测的次数也呈指数形式增长，性能不高。</p><p><a href="https://imgtu.com/i/hZniBF"><img src="https://z3.ax1x.com/2021/08/25/hZniBF.png" alt="hZniBF.png"></a></p></li><li><p>链地址法的性能</p><p>可以看到随着装填因子的增加，平均探测长度呈线性增长，较为平缓。在开发中使用链地址法较多，比如 Java 中的 HashMap 中使用的就是链地址法。</p><p><a href="https://imgtu.com/i/hZnMnO"><img src="https://z3.ax1x.com/2021/08/25/hZnMnO.png" alt="hZnMnO.png"></a></p></li></ul><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>哈希表的优势在于它的速度，所以哈希函数不能采用消耗性能较高的复杂算法。提高速度的一个方法是在哈希函数中尽量减少乘法和除法。</p><p>性能高的哈希函数应具备以下两个优点：</p><ul><li>快速的计算；</li><li>均匀的分布；</li></ul><h4 id="快速计算"><a href="#快速计算" class="headerlink" title="快速计算"></a>快速计算</h4><p>霍纳法则：在中国霍纳法则也叫做秦久韶算法，具体算法为：</p><p><a href="https://imgtu.com/i/hZnrNj"><img src="https://z3.ax1x.com/2021/08/25/hZnrNj.png" alt="hZnrNj.png"></a></p><p>求多项式的值时，首先计算最内层括号内一次多项式的值，然后由内向外逐层计算一次多项式的值。这种算法把求 n 次多项式 f(x)的值就转化为求 n 个一次多项式的值。</p><ul><li><p>变换之前：</p><ul><li>乘法次数：n(n+1)/2 次；</li><li>加法次数：n 次；</li></ul></li><li><p>变换之后：</p><ul><li>乘法次数：n 次；</li><li>加法次数：n 次；</li></ul></li></ul><p>如果使用大 O 表示时间复杂度的话，直接从变换前的 O(N^2)降到了 O(N)。</p><h4 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h4><p>在设计哈希表时，我们已经有办法处理映射到相同下标值的情况：链地址法或者开放地址法。但是，为了提供效率，最好的情况还是让数据在哈希表中均匀分布。因此，我们需要在使用常量的地方，尽量使用质数。比如：哈希表的长度、N 次幂的底数等。</p><p>Java 中的 HashMap 采用的是链地址法，哈希化采用的是公式为：index = HashCode(key) &amp; (Length-1) 即将数据化为二进制进行与运算，而不是取余运算。这样计算机直接运算二进制数据，效率更高。但是 JavaScript 在进行较大数据的与运算时会出现问题，所以我们使用 JavaScript 实现哈希化时采用取余运算。</p><h2 id="封装哈希表"><a href="#封装哈希表" class="headerlink" title="封装哈希表"></a>封装哈希表</h2><h3 id="哈希表常见操作"><a href="#哈希表常见操作" class="headerlink" title="哈希表常见操作"></a>哈希表常见操作</h3><ul><li><code>put(key, value)</code> 插入或修改操作。</li><li><code>get(key)</code> 获取哈希表中特定位置的元素。</li><li><code>remove(key)</code> 删除哈希表中特定位置的元素。</li><li><code>isEmpty()</code> 如果哈希表中不包含任何元素，返回 <code>trun</code>，如果哈希表长度大于 0 则返回 <code>false</code>。</li><li><code>size()</code> 返回哈希表包含的元素个数。</li><li><code>resize(value)</code> 对哈希表进行扩容操作。</li></ul><h3 id="哈希函数的简单实现"><a href="#哈希函数的简单实现" class="headerlink" title="哈希函数的简单实现"></a>哈希函数的简单实现</h3><p>首先使用霍纳法则计算 hashCode 的值，通过取余操作实现哈希化，此处先简单地指定数组的大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hashFn</span>(<span class="params">string, limit = <span class="number">7</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自己采用的一个质数（无强制要求，质数即可）</span></span><br><span class="line">  <span class="keyword">const</span> PRIME = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、定义存储 hashCode 的变量</span></span><br><span class="line">  <span class="keyword">let</span> hashCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、使用霍纳法则（秦九韶算法），计算 hashCode 的值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> string) &#123;</span><br><span class="line">    hashCode = PRIME * hashCode + item.charCodeAt();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、对 hashCode 取余，并返回</span></span><br><span class="line">  <span class="keyword">return</span> hashCode % limit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈希函数测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(hashFn(<span class="string">&quot;123&quot;</span>)); <span class="comment">//--&gt; 5</span></span><br><span class="line"><span class="built_in">console</span>.log(hashFn(<span class="string">&quot;abc&quot;</span>)); <span class="comment">//--&gt; 6</span></span><br></pre></td></tr></table></figure><h3 id="哈希表的实现"><a href="#哈希表的实现" class="headerlink" title="哈希表的实现"></a>哈希表的实现</h3><h4 id="创建哈希表类"><a href="#创建哈希表类" class="headerlink" title="创建哈希表类"></a>创建哈希表类</h4><p>封装的哈希表的数据结构模型：</p><p><a href="https://imgtu.com/i/hZnfDU"><img src="https://z3.ax1x.com/2021/08/25/hZnfDU.png" alt="hZnfDU.png"></a></p><p>首先创建哈希表类 HashTable，并添加必要的属性和上面实现的哈希函数，再进行其他方法的实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage = []; <span class="comment">// 哈希表存储数据的变量</span></span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// 当前存放的元素个数</span></span><br><span class="line">    <span class="built_in">this</span>.limit = <span class="number">7</span>; <span class="comment">// 哈希表长度（初始设为质数 7）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="put-key-value"><a href="#put-key-value" class="headerlink" title="put(key,value)"></a>put(key,value)</h4><p>哈希表的插入和修改操作是同一个函数：因为，当使用者传入一个 <code>[key, value]</code> 时，如果原来不存在该 key，那么就是插入操作，如果原来已经存在该 key，那么就是修改操作。</p><p><a href="https://imgtu.com/i/hZnjbD"><img src="https://z3.ax1x.com/2021/08/25/hZnjbD.png" alt="hZnjbD.png"></a></p><p>实现思路：</p><ul><li>首先，根据 key 获取索引值 index，目的为将数据插入到 storage 的对应位置；</li><li>然后，根据索引值取出 bucket，如果 bucket 不存在，先创建 bucket，随后放置在该索引值的位置；</li><li>接着，判断新增还是修改原来的值。如果已经有值了，就修改该值；如果没有，就执行后续操作。</li><li>最后，进行新增数据操作。</li></ul><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// put(key, value) 往哈希表里添加数据</span></span><br><span class="line"><span class="function"><span class="title">put</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、根据 key 获取要映射到 storage 里面的 index（通过哈希函数获取）</span></span><br><span class="line">  <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、根据 index 取出对应的 bucket</span></span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、判断是否存在 bucket</span></span><br><span class="line">  <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    bucket = [];  <span class="comment">// 不存在则创建</span></span><br><span class="line">    <span class="built_in">this</span>.storage[index] = bucket;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、判断是插入数据操作还是修改数据操作</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> tuple = bucket[i]; <span class="comment">// tuple 的格式：[key, value]</span></span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123; <span class="comment">// 如果 key 相等，则修改数据</span></span><br><span class="line">      tuple[<span class="number">1</span>] = value;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 修改完 tuple 里数据，return 终止不再往下执行。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、bucket 新增数据</span></span><br><span class="line">  bucket.push([key, value]); <span class="comment">// bucket 存储元组 tuple，格式为 [key, value]</span></span><br><span class="line">  <span class="built_in">this</span>.count++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">    <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h4><p>实现思路：</p><ul><li>首先，根据 key 通过哈希函数获取它在 <code>storage</code> 中对应的索引值 <code>index</code>。</li><li>然后，根据索引值获取对应的 <code>bucket</code>。</li><li>接着，判断获取到的 <code>bucket</code> 是否为 <code>null</code>，如果为 <code>null</code>，直接返回 <code>null</code>。</li><li>随后，线性遍历 <code>bucket</code> 中每一个 <code>key</code> 是否等于传入的 <code>key</code>。如果等于，直接返回对应的 <code>value</code>。</li><li>最后，遍历完 <code>bucket</code> 后，仍然没有找到对应的 <code>key</code>，直接 <code>return null</code> 即可。</li></ul><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 get(key) 获取 value</span></span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">  <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> tuple <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">return</span> tuple[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remove-key"><a href="#remove-key" class="headerlink" title="remove(key)"></a>remove(key)</h4><p>实现思路：</p><ul><li>首先，根据 key 通过哈希函数获取它在 <code>storage</code> 中对应的索引值 <code>index</code>。</li><li>然后，根据索引值获取对应的 <code>bucket</code>。</li><li>接着，判断获取到的 <code>bucket</code> 是否为 <code>null</code>，如果为 <code>null</code>，直接返回 <code>null</code>。</li><li>随后，线性查找 <code>bucket</code>，寻找对应的数据，并且删除。</li><li>最后，依然没有找到，返回 <code>null</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// remove(key) 删除指定 key 的数据</span></span><br><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">  <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历 bucket，找到对应位置的 tuple，将其删除</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = bucket.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> tuple = bucket[i];</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      bucket.splice(i, <span class="number">1</span>); <span class="comment">// 删除对应位置的数组项</span></span><br><span class="line">      <span class="built_in">this</span>.count--;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">        <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> tuple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表的扩容与压缩"><a href="#哈希表的扩容与压缩" class="headerlink" title="哈希表的扩容与压缩"></a>哈希表的扩容与压缩</h2><p>为什么需要扩容？</p><ul><li><p>前面我们在哈希表中使用的是长度为 7 的数组，由于使用的是链地址法，装填因子(loadFactor)可以大于 1，所以这个哈希表可以无限制地插入新数据。</p></li><li><p>但是，随着数据量的增多，storage 中每一个 <code>index</code> 对应的 <code>bucket</code> 数组（链表）就会越来越长，这就会造成哈希表效率的降低。</p></li></ul><p>什么情况下需要扩容？</p><ul><li>常见的情况是 <code>loadFactor &gt; 0.75</code> 的时候进行扩容。</li></ul><p>如何进行扩容？</p><ul><li>简单的扩容可以直接扩大两倍（关于质数，之后讨论）。</li><li>扩容之后所有的数据项都要进行同步修改。</li></ul><p>实现思路：</p><ul><li>首先，定义一个变量，比如 oldStorage 指向原来的 <code>storage</code>。</li><li>然后，创建一个新的容量更大的数组，让 <code>this.storage</code> 指向它。</li><li>最后，将 oldStorage 中的每一个 bucket 中的每一个数据取出来依次添加到 <code>this.storage</code> 指向的新数组中。</li></ul><p><a href="https://imgtu.com/i/hZu6de"><img src="https://z3.ax1x.com/2021/08/25/hZu6de.png" alt="hZu6de.png"></a></p><h3 id="resize-的实现"><a href="#resize-的实现" class="headerlink" title="resize() 的实现"></a>resize() 的实现</h3><p>装填因子 = 哈希表中数据 / 哈希表长度，即 <code>loadFactor = count / HashTable.length</code>。</p><p>resize 方法，既可以实现哈希表的扩容，也可以实现哈希表容量的压缩。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新调整哈希表大小，扩容或压缩</span></span><br><span class="line"><span class="function"><span class="title">resize</span>(<span class="params">newLimit</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、保存旧的 storage 数组内容</span></span><br><span class="line">  <span class="keyword">const</span> oldStorage = <span class="built_in">this</span>.storage;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、重置所有属性</span></span><br><span class="line">  <span class="built_in">this</span>.storage = [];</span><br><span class="line">  <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>.limit = newLimit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、遍历 oldStorage，取出所有数据，重新 put 到 this.storage</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> bucket <span class="keyword">of</span> oldStorage) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">        <span class="built_in">this</span>.put(b[<span class="number">0</span>], b[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通常情况下当装填因子 <code>laodFactor &gt; 0.75</code> 时，对哈希表进行扩容。在哈希表中的添加方法（push 方法）中添加如下代码，判断是否需要调用扩容函数进行扩容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>当装填因子 <code>laodFactor &lt; 0.25</code> 时，对哈希表容量进行压缩。在哈希表中的删除方法（remove 方法）中添加如下代码，判断是否需要调用扩容函数进行压缩。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="选择质数作为哈希表容量"><a href="#选择质数作为哈希表容量" class="headerlink" title="选择质数作为哈希表容量"></a>选择质数作为哈希表容量</h3><h4 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h4><blockquote><p>1 不是质数</p></blockquote><ul><li><p>方法一：针对质数的特点：只能被 1 和 number 整除，不能被 2 ~ (number-1)整除。遍历 2 ~ (num-1) 。</p><p>这种方法虽然能实现质数的判断，但是效率不高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (number % i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：只需要遍历 2 ~ num 的平方根即可。该方法性能较好。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">1</span> || number === <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> temp = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(number));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; temp; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (number % i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现扩容或压缩后的哈希表容量为质数"><a href="#实现扩容或压缩后的哈希表容量为质数" class="headerlink" title="实现扩容或压缩后的哈希表容量为质数"></a>实现扩容或压缩后的哈希表容量为质数</h4><p>实现思路：</p><p>2 倍扩容或压缩之后，通过循环调用 <code>isPrime</code> 判断得到的容量是否为质数，不是则+1，直到是为止。比如原长度：7，2 倍扩容后长度为 14，14 不是质数，<code>14 + 1 = 15</code> 不是质数，<code>15 + 1 = 16</code> 不是质数，<code>16 + 1 = 17</code> 是质数，停止循环，由此得到质数 17。</p><ul><li><p>第一步：首先需要为 HashTable 类添加判断质数的 <code>isPrime</code> 方法和获取质数的 <code>getPrime</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getPrime(number) 根据传入的 number 获取最临近的质数</span></span><br><span class="line"><span class="function"><span class="title">getPrime</span>(<span class="params">number</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (!isPrime(number)) &#123;</span><br><span class="line">    number++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改添加元素的 <code>put</code> 方法和删除元素的 <code>remove</code> 方法中关于数组扩容的相关操作：</p><p>在 <code>put</code> 方法中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>remove</code> 方法中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="哈希表完整实现"><a href="#哈希表完整实现" class="headerlink" title="哈希表完整实现"></a>哈希表完整实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage = []; <span class="comment">// 哈希表存储数据的变量</span></span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// 当前存放的元素个数</span></span><br><span class="line">    <span class="built_in">this</span>.limit = <span class="number">7</span>; <span class="comment">// 哈希表长度（初始设为质数 7）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装填因子(已有个数/总个数)</span></span><br><span class="line">    <span class="built_in">this</span>.loadFactor = <span class="number">0.75</span>;</span><br><span class="line">    <span class="built_in">this</span>.minLoadFactor = <span class="number">0.25</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getPrime(number) 根据传入的 number 获取最临近的质数</span></span><br><span class="line">  <span class="function"><span class="title">getPrime</span>(<span class="params">number</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!isPrime(number)) &#123;</span><br><span class="line">      number++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// put(key, value) 往哈希表里添加数据</span></span><br><span class="line">  <span class="function"><span class="title">put</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、根据 key 获取要映射到 storage 里面的 index（通过哈希函数获取）</span></span><br><span class="line">    <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据 index 取出对应的 bucket</span></span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断是否存在 bucket</span></span><br><span class="line">    <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      bucket = []; <span class="comment">// 不存在则创建</span></span><br><span class="line">      <span class="built_in">this</span>.storage[index] = bucket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、判断是插入数据操作还是修改数据操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tuple = bucket[i]; <span class="comment">// tuple 的格式：[key, value]</span></span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">        <span class="comment">// 如果 key 相等，则修改数据</span></span><br><span class="line">        tuple[<span class="number">1</span>] = value;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 修改完 tuple 里数据，return 终止，不再往下执行。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、bucket 新增数据</span></span><br><span class="line">    bucket.push([key, value]); <span class="comment">// bucket 存储元组 tuple，格式为 [key, value]</span></span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">      <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 get(key) 获取 value</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">    <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> tuple <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> tuple[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(key) 删除指定 key 的数据</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">    <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 bucket，找到对应位置的 tuple，将其删除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = bucket.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> tuple = bucket[i];</span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">        bucket.splice(i, <span class="number">1</span>); <span class="comment">// 删除对应位置的数组项</span></span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">          <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tuple;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新调整哈希表大小，扩容或压缩</span></span><br><span class="line">  <span class="function"><span class="title">resize</span>(<span class="params">newLimit</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、保存旧的 storage 数组内容</span></span><br><span class="line">    <span class="keyword">const</span> oldStorage = <span class="built_in">this</span>.storage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、重置所有属性</span></span><br><span class="line">    <span class="built_in">this</span>.storage = [];</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.limit = newLimit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、遍历 oldStorage，取出所有数据，重新 put 到 this.storage</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> bucket <span class="keyword">of</span> oldStorage) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">          <span class="built_in">this</span>.put(b[<span class="number">0</span>], b[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h2><h3 id="什么是树？"><a href="#什么是树？" class="headerlink" title="什么是树？"></a>什么是树？</h3><h4 id="真实的树："><a href="#真实的树：" class="headerlink" title="真实的树："></a>真实的树：</h4><p><a href="https://imgtu.com/i/hZKkWR"><img src="https://z3.ax1x.com/2021/08/25/hZKkWR.png" alt="hZKkWR.png"></a></p><h4 id="树的特点："><a href="#树的特点：" class="headerlink" title="树的特点："></a>树的特点：</h4><ul><li>树一般都有一个根，连接着根的是树干；</li><li>树干会发生分叉，形成许多树枝，树枝会继续分化成更小的树枝；</li><li>树枝的最后是叶子；</li></ul><p>现实生活中很多结构都是树的抽象，模拟的树结构相当于旋转 <code>180°</code> 的树。</p><p><a href="https://imgtu.com/i/hZKQFH"><img src="https://z3.ax1x.com/2021/08/25/hZKQFH.png" alt="hZKQFH.png"></a></p><h4 id="树结构对比于数组-链表-哈希表有哪些优势呢？"><a href="#树结构对比于数组-链表-哈希表有哪些优势呢？" class="headerlink" title="树结构对比于数组/链表/哈希表有哪些优势呢？"></a>树结构对比于数组/链表/哈希表有哪些优势呢？</h4><p>数组：</p><ul><li>优点：可以通过下标值访问，效率高；</li><li>缺点：查找数据时需要先对数据进行排序，生成有序数组，才能提高查找效率；并且在插入和删除元素时，需要大量的位移操作；</li></ul><p>链表：</p><ul><li>优点：数据的插入和删除操作效率都很高；</li><li>缺点：查找效率低，需要从头开始依次查找，直到找到目标数据为止；当需要在链表中间位置插入或删除数据时，插入或删除的效率都不高。</li></ul><p>哈希表：</p><ul><li>优点：哈希表的插入/查询/删除效率都非常高；</li><li>缺点：空间利用率不高，底层使用的数组中很多单元没有被利用；并且哈希表中的元素是无序的，不能按照固定顺序遍历哈希表中的元素；而且不能快速找出哈希表中最大值或最小值这些特殊值。</li></ul><p>树结构：</p><ul><li>优点：树结构综合了上述三种结构的优点，同时也弥补了它们存在的缺点（虽然效率不一定都比它们高），比如树结构中数据都是有序的，查找效率高；空间利用率高；并且可以快速获取最大值和最小值等。</li></ul><p>总的来说：每种数据结构都有自己特定的应用场景。</p><p>树结构：</p><ul><li><p>树（Tree）：由 n（n ≥ 0）个节点构成的有限集合。当 n = 0 时，称为空树。</p></li><li><p>对于任意一棵非空树（n &gt; 0），它具备以下性质：</p><ul><li>数中有一个称为根（Root）的特殊节点，用 <strong>r</strong> 表示；</li><li>其余节点可分为 m（m &gt; 0）个互不相交的有限集合 T1，T2，…，Tm，其中每个集合本身又是一棵树，称为原来树的子树（SubTree）。</li></ul></li></ul><h4 id="树的常用术语："><a href="#树的常用术语：" class="headerlink" title="树的常用术语："></a>树的常用术语：</h4><p><a href="https://imgtu.com/i/hZKNm8"><img src="https://z3.ax1x.com/2021/08/25/hZKNm8.png" alt="hZKNm8.png"></a></p><ul><li>节点的度（Degree）：节点的子树个数，比如节点 B 的度为 2；</li><li>树的度：树的所有节点中最大的度数，如上图树的度为 2；</li><li>叶节点（Leaf）：度为 0 的节点（也称为叶子节点），如上图的 H，I 等；</li><li>父节点（Parent）：度不为 0 的节点称为父节点，如上图节点 B 是节点 D 和 E 的父节点；</li><li>子节点（Child）：若 B 是 D 的父节点，那么 D 就是 B 的子节点；</li><li>兄弟节点（Sibling）：具有同一父节点的各节点彼此是兄弟节点，比如上图的 B 和 C，D 和 E 互为兄弟节点；</li><li>路径和路径长度：路径指的是一个节点到另一节点的通道，路径所包含边的个数称为路径长度，比如 A-&gt;H 的路径长度为 3；</li><li>节点的层次（Level）：规定根节点在 1 层，其他任一节点的层数是其父节点的层数加 1。如 B 和 C 节点的层次为 2；</li><li>树的深度（Depth）：树种所有节点中的最大层次是这棵树的深度，如上图树的深度为 4；</li></ul><h4 id="树结构的表示方式"><a href="#树结构的表示方式" class="headerlink" title="树结构的表示方式"></a>树结构的表示方式</h4><h5 id="最普通的表示方法："><a href="#最普通的表示方法：" class="headerlink" title="最普通的表示方法："></a>最普通的表示方法：</h5><p><a href="https://imgtu.com/i/hZK20U"><img src="https://z3.ax1x.com/2021/08/25/hZK20U.png" alt="hZK20U.png"></a></p><p>如图，树结构的组成方式类似于链表，都是由一个个节点连接构成。不过，根据每个父节点子节点数量的不同，每一个父节点需要的引用数量也不同。比如节点 A 需要 3 个引用，分别指向子节点 B，C，D；B 节点需要 2 个引用，分别指向子节点 E 和 F；K 节点由于没有子节点，所以不需要引用。</p><p>这种方法缺点在于我们无法确定某一结点的引用数。</p><h5 id="儿子-兄弟表示法："><a href="#儿子-兄弟表示法：" class="headerlink" title="儿子-兄弟表示法："></a>儿子-兄弟表示法：</h5><p><a href="https://imgtu.com/i/hZKbnK"><img src="https://z3.ax1x.com/2021/08/25/hZKbnK.png" alt="hZKbnK.png"></a></p><p>这种表示方法可以完整地记录每个节点的数据，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点A</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="comment">//存储数据</span></span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="comment">//统一只记录左边的子节点</span></span><br><span class="line">  <span class="built_in">this</span>.leftChild = B</span><br><span class="line">  <span class="comment">//统一只记录右边的第一个兄弟节点</span></span><br><span class="line">  <span class="built_in">this</span>.rightSibling = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点B</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="built_in">this</span>.leftChild = E</span><br><span class="line">  <span class="built_in">this</span>.rightSibling = C</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点F</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="built_in">this</span>.leftChild = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.rightSibling = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种表示法的优点在于每一个节点中引用的数量都是确定的。</p><h5 id="儿子-兄弟表示法旋转"><a href="#儿子-兄弟表示法旋转" class="headerlink" title="儿子-兄弟表示法旋转"></a>儿子-兄弟表示法旋转</h5><p>以下为儿子-兄弟表示法组成的树结构：</p><p><a href="https://imgtu.com/i/hZMNg1"><img src="https://z3.ax1x.com/2021/08/25/hZMNg1.png" alt="hZMNg1.png"></a></p><p>将其顺时针旋转 45° 之后：</p><p><a href="https://imgtu.com/i/hZM0HO"><img src="https://z3.ax1x.com/2021/08/25/hZM0HO.png" alt="hZM0HO.png"></a></p><p>这样就成为了一棵二叉树，由此我们可以得出结论：任何树都可以通过二叉树进行模拟。但是这样父节点不是变了吗？其实，父节点的设置只是为了方便指向子节点，在代码实现中谁是父节点并没有关系，只要能正确找到对应节点即可。</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h2><p>如果树中的每一个节点最多只能由两个子节点，这样的树就称为二叉树；</p><h2 id="二叉树的组成"><a href="#二叉树的组成" class="headerlink" title="二叉树的组成"></a>二叉树的组成</h2><ul><li>二叉树可以为空，也就是没有节点；</li><li>若二叉树不为空，则它由根节点和称为其左子树 TL 和右子树 TR 的两个不相交的二叉树组成；</li></ul><h2 id="二叉树的五种形态"><a href="#二叉树的五种形态" class="headerlink" title="二叉树的五种形态"></a>二叉树的五种形态</h2><p><a href="https://imgtu.com/i/hZM7Cj"><img src="https://z3.ax1x.com/2021/08/25/hZM7Cj.png" alt="hZM7Cj.png"></a></p><p>上图分别表示：空的二叉树、只有一个节点的二叉树、只有左子树 TL 的二叉树、只有右子树 TR 的二叉树和有左右两个子树的二叉树。</p><h2 id="二叉树的特性"><a href="#二叉树的特性" class="headerlink" title="二叉树的特性"></a>二叉树的特性</h2><ul><li>一个二叉树的第 i 层的最大节点树为：2^(i-1)^，i &gt;= 1；</li><li>深度为 k 的二叉树的最大节点总数为：2^k^ - 1 ，k &gt;= 1；</li><li>对任何非空二叉树，若 n<del>0</del> 表示叶子节点的个数，n<del>2</del>表示度为 2 的非叶子节点个数，那么两者满足关系：n<del>0</del> = n<del>2</del> + 1；如下图所示：H，E，I，J，G 为叶子节点，总数为 5；A，B，C，F 为度为 2 的非叶子节点，总数为 4；满足 n<del>0</del> = n<del>2</del> + 1 的规律。</li></ul><p><a href="https://imgtu.com/i/hZMXrV"><img src="https://z3.ax1x.com/2021/08/25/hZMXrV.png" alt="hZMXrV.png"></a></p><h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><h3 id="完美二叉树"><a href="#完美二叉树" class="headerlink" title="完美二叉树"></a>完美二叉树</h3><p>完美二叉树（Perfect Binary Tree）也成为满二叉树（Full Binary Tree），在二叉树中，除了最下一层的叶子节点外，每层节点都有 2 个子节点，这就构成了完美二叉树。</p><p><a href="https://imgtu.com/i/hZQeaD"><img src="https://z3.ax1x.com/2021/08/25/hZQeaD.png" alt="hZQeaD.png"></a></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>完全二叉树（Complete Binary Tree）:</p><ul><li>除了二叉树最后一层外，其他各层的节点数都达到了最大值；</li><li>并且，最后一层的叶子节点从左向右是连续存在，只缺失右侧若干叶子节点；</li><li>完美二叉树是特殊的完全二叉树；</li></ul><p><a href="https://imgtu.com/i/hZQzOP"><img src="https://z3.ax1x.com/2021/08/25/hZQzOP.png" alt="hZQzOP.png"></a></p><p>在上图中，由于 H 缺失了右子节点，所以它不是完全二叉树。</p><h2 id="二叉树的数据存储"><a href="#二叉树的数据存储" class="headerlink" title="二叉树的数据存储"></a>二叉树的数据存储</h2><p>常见的二叉树存储方式为数组和链表：</p><h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><ul><li>完全二叉树：按从上到下，从左到右的方式存储数据。</li></ul><p><a href="https://imgtu.com/i/hZlCTS"><img src="https://z3.ax1x.com/2021/08/25/hZlCTS.png" alt="hZlCTS.png"></a></p><table><thead><tr><th align="center">节点</th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th><th align="center">G</th><th align="center">H</th><th align="center">I</th></tr></thead><tbody><tr><td align="center">序号</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td></tr></tbody></table><p>使用数组存储时，取数据的时候也十分方便：左子节点的序号等于父节点序号 _ 2，右子节点的序号等于父节点序号 _ 2 + 1 。</p><ul><li>非完全二叉树：非完全二叉树需要转换成完全二叉树才能按照上面的方案存储，这样会浪费很大的存储空间。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4jgiq6r2xee0.png" alt="image"></p><table><thead><tr><th align="center">节点</th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">^</th><th align="center">^</th><th align="center">F</th><th align="center">^</th><th align="center">^</th><th align="center">^</th><th align="center">^</th><th align="center">^</th><th align="center">^</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">序号</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td></tr></tbody></table><h3 id="使用链表"><a href="#使用链表" class="headerlink" title="使用链表"></a>使用链表</h3><p>二叉树最常见的存储方式为链表：每一个节点封装成一个 Node，Node 中包含存储的数据、左节点的引用和右节点的引用。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.2mlscfad5420.png" alt="image"></p><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="二叉搜索树-1"><a href="#二叉搜索树-1" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>二叉搜索树（BST，Binary Search Tree），也称为二叉排序树和二叉查找树。</p><p>二叉搜索树是一棵二叉树，可以为空。</p><p>如果不为空，则满足以下性质：</p><ul><li>条件 1：非空左子树的所有键值小于其根节点的键值。比如三中节点 6 的所有非空左子树的键值都小于 6；</li><li>条件 2：非空右子树的所有键值大于其根节点的键值；比如三中节点 6 的所有非空右子树的键值都大于 6；</li><li>条件 3：左、右子树本身也都是二叉搜索树；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.1lhxcdph4vpc.png" alt="image"></p><p>如上图所示，树二和树三符合 3 个条件属于二叉树，树一不满足条件 3 所以不是二叉树。</p><p>总结：二叉搜索树的特点主要是较小的值总是保存在左节点上，相对较大的值总是保存在右节点上。这种特点使得二叉搜索树的查询效率非常高，这也就是二叉搜索树中“搜索”的来源。</p><h2 id="二叉搜索树应用举例"><a href="#二叉搜索树应用举例" class="headerlink" title="二叉搜索树应用举例"></a>二叉搜索树应用举例</h2><p>下面是一个二叉搜索树：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3l21fsg6qbc0.png" alt="image"></p><p>若想在其中查找数据 10，只需要查找 4 次，查找效率非常高。</p><ul><li>第 1 次：将 10 与根节点 9 进行比较，由于 10 &gt; 9，所以 10 下一步与根节点 9 的右子节点 13 比较；</li><li>第 2 次：由于 10 &lt; 13，所以 10 下一步与父节点 13 的左子节点 11 比较；</li><li>第 3 次：由于 10 &lt; 11，所以 10 下一步与父节点 11 的左子节点 10 比较；</li><li>第 4 次：由于 10 = 10，最终查找到数据 10 。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.5x9xyvmbxy80.png" alt="image"></p><p>同样是 15 个数据，在排序好的数组中查询数据 10，需要查询 10 次：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.2gqz4t2jekw0.png" alt="image"></p><p>其实：如果是排序好的数组，可以通过二分查找：第一次找 9，第二次找 13，第三次找 15…。我们发现如果把每次二分的数据拿出来以树的形式表示的话就是二叉搜索树。这就是数组二分法查找效率之所以高的原因。</p><h2 id="二叉搜索树的封装"><a href="#二叉搜索树的封装" class="headerlink" title="二叉搜索树的封装"></a>二叉搜索树的封装</h2><p>二叉搜索树有四个最基本的属性：指向节点的根（root），节点中的键（key）、左指针（right）、右指针（right）。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.5vdbb5to1n40.png" alt="image"></p><ul><li><p>所以，二叉搜索树中除了定义 root 属性外，还应定义一个节点内部类，里面包含每个节点中的 left、right 和 key 三个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的常见操作："><a href="#二叉搜索树的常见操作：" class="headerlink" title="二叉搜索树的常见操作："></a>二叉搜索树的常见操作：</h3><ul><li><code>insert(key)</code> 向树中插入一个新的键。</li><li><code>search(key)</code> 在树中查找一个键，如果节点存在，则返回 true；如果不存在，则返回 <code>false</code>。</li><li><code>preOrderTraverse</code> 通过先序遍历方式遍历所有节点。</li><li><code>inOrderTraverse</code> 通过中序遍历方式遍历所有节点。</li><li><code>postOrderTraverse</code> 通过后序遍历方式遍历所有节点。</li><li><code>min</code> 返回树中最小的值/键。</li><li><code>max</code> 返回树中最大的值/键。</li><li><code>remove(key)</code> 从树中移除某个键。</li></ul><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>实现思路：</p><ul><li>首先根据传入的 key 创建节点对象。</li><li>然后判断根节点是否存在，不存在时通过：this.root = newNode，直接把新节点作为二叉搜索树的根节点。</li><li>若存在根节点则重新定义一个内部方法 <code>insertNode()</code> 用于查找插入点。</li></ul><p>insert(key) 代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert(key) 插入数据</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.insertNode(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>insertNode() 的实现思路:</p><p>根据比较传入的两个节点，一直查找新节点适合插入的位置，直到成功插入新节点为止。</p><ul><li><p>当 newNode.key &lt; node.key 向左查找:</p><ul><li><p>情况 1：当 node 无左子节点时，直接插入：</p></li><li><p>情况 2：当 node 有左子节点时，递归调用 insertNode()，直到遇到无左子节点成功插入 newNode 后，不再符合该情况，也就不再调用 insertNode()，递归停止。</p></li></ul></li><li><p>当 newNode.key &gt;= node.key 向右查找，与向左查找类似：</p><ul><li><p>情况 1：当 node 无右子节点时，直接插入：</p></li><li><p>情况 2：当 node 有右子节点时，依然递归调用 insertNode()，直到遇到传入 insertNode 方法 的 node 无右子节点成功插入 newNode 为止。</p></li></ul></li></ul><p>insertNode(root, node) 代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">insertNode</span>(<span class="params">root, node</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (node.key &lt; root.key) &#123; <span class="comment">// 往左边查找插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      root.left = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(root.left, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 往右边查找插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      root.right = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(root.right, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历数据"><a href="#遍历数据" class="headerlink" title="遍历数据"></a>遍历数据</h4><p>这里所说的树的遍历不仅仅针对二叉搜索树，而是适用于所有的二叉树。由于树结构不是线性结构，所以遍历方式有多种选择，常见的三种二叉树遍历方式为：</p><ul><li>先序遍历；</li><li>中序遍历；</li><li>后序遍历；</li></ul><p>还有层序遍历，使用较少。</p><h5 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h5><p>先序遍历的过程为：</p><p>首先，遍历根节点；<br>然后，遍历其左子树；<br>最后，遍历其右子树；</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.69ooahvtbbo0.png" alt="image"></p><p>如上图所示，二叉树的节点遍历顺序为：A -&gt; B -&gt; D -&gt; H -&gt; I -&gt; E -&gt; C -&gt; F -&gt; G。</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历（根左右 DLR）</span></span><br><span class="line"><span class="function"><span class="title">preorderTraversal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">this</span>.preorderTraversalNode(<span class="built_in">this</span>.root, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">preorderTraversalNode</span>(<span class="params">node, result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  result.push(node.key);</span><br><span class="line">  <span class="built_in">this</span>.preorderTraversalNode(node.left, result);</span><br><span class="line">  <span class="built_in">this</span>.preorderTraversalNode(node.right, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>实现思路：与先序遍历原理相同，只不过是遍历的顺序不一样了。</p><p>首先，遍历其左子树；<br>然后，遍历根（父）节点；<br>最后，遍历其右子树；</p><p>过程图解：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.762l4sxdr7o0.png" alt="image"></p><p>输出节点的顺序应为：3 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11 -&gt; 12 -&gt; 13 -&gt; 14 -&gt; 15 -&gt; 18 -&gt; 20 -&gt; 25 。</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历（左根右 LDR）</span></span><br><span class="line"><span class="function"><span class="title">inorderTraversal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">this</span>.inorderTraversalNode(<span class="built_in">this</span>.root, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">inorderTraversalNode</span>(<span class="params">node, result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  <span class="built_in">this</span>.inorderTraversalNode(node.left, result);</span><br><span class="line">  result.push(node.key);</span><br><span class="line">  <span class="built_in">this</span>.inorderTraversalNode(node.right, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>实现思路：与先序遍历原理相同，只不过是遍历的顺序不一样了。</p><p>首先，遍历其左子树；<br>然后，遍历其右子树；<br>最后，遍历根（父）节点；</p><p>过程图解：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.5lqmen4jds80.png" alt="image"></p><p>输出节点的顺序应为：3 -&gt; 6 -&gt; 5 -&gt; 8 -&gt; 10 -&gt; 9 -&gt; 7 -&gt; 12 -&gt; 14 -&gt; 13 -&gt; 18 -&gt; 25 -&gt; 20 -&gt; 15 -&gt; 11 。</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历（左右根 LRD）</span></span><br><span class="line"><span class="function"><span class="title">postorderTraversal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">this</span>.postorderTraversalNode(<span class="built_in">this</span>.root, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">postorderTraversalNode</span>(<span class="params">node, result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  <span class="built_in">this</span>.postorderTraversalNode(node.left, result);</span><br><span class="line">  <span class="built_in">this</span>.postorderTraversalNode(node.right, result);</span><br><span class="line">  result.push(node.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>以遍历根（父）节点的顺序来区分三种遍历方式。比如：先序遍历先遍历根节点、中序遍历第二遍历根节点、后续遍历最后遍历根节点。</p><h4 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h4><h5 id="查找最大值或最小值"><a href="#查找最大值或最小值" class="headerlink" title="查找最大值或最小值"></a>查找最大值或最小值</h5><p>在二叉搜索树中查找最值非常简单，最小值在二叉搜索树的最左边，最大值在二叉搜索树的最右边。只需要一直向左/右查找就能得到最值，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3h3yfhyqgi00.png" alt="image"></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// min() 获取二叉搜索树最小值</span></span><br><span class="line"><span class="function"><span class="title">min</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node = node.left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// max() 获取二叉搜索树最大值</span></span><br><span class="line"><span class="function"><span class="title">max</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node = node.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查找特定值"><a href="#查找特定值" class="headerlink" title="查找特定值"></a>查找特定值</h5><p>查找二叉搜索树当中的特定值效率也非常高。只需要从根节点开始将需要查找节点的 key 值与之比较，若 node.key &lt; root 则向左查找，若 node.key &gt; root 就向右查找，直到找到或查找到 null 为止。这里可以使用递归实现，也可以采用循环来实现。</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// search(key) 查找二叉搜索树中是否有相同的key，存在返回 true，否则返回 false</span></span><br><span class="line"><span class="function"><span class="title">search</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.searchNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过递归实现</span></span><br><span class="line"><span class="function"><span class="title">searchNode</span>(<span class="params">node, key</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.searchNode(node.left, key);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.searchNode(node.right, key);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 while 循环实现</span></span><br><span class="line"><span class="function"><span class="title">search2</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      node = node.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      node = node.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>实现思路：</p><p>第一步：先找到需要删除的节点，若没找到，则不需要删除；</p><p>首先定义变量 current 用于保存需要删除的节点、变量 parent 用于保存它的父节点、变量 isLeftChild 保存 current 是否为 parent 的左节点，这样方便之后删除节点时改变相关节点的指向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line"><span class="keyword">let</span> parentNode = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环查找到要删除的节点 currentNode，以及它的 parentNode、isLeftChild</span></span><br><span class="line"><span class="keyword">while</span> (currentNode.key !== key) &#123;</span><br><span class="line">  parentNode = currentNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小于，往左查找</span></span><br><span class="line">  <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">    isLeftChild = <span class="literal">true</span>;</span><br><span class="line">    currentNode = currentNode.left;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则往右查找</span></span><br><span class="line">    isLeftChild = <span class="literal">false</span>;</span><br><span class="line">    currentNode = currentNode.right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到最后都没找到相等的节点，返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：删除找到的指定节点，后分 3 种情况：</p><ul><li>删除的是叶子节点；</li><li>删除的是只有一个子节点的节点；</li><li>删除的是有两个子节点的节点；</li></ul><h5 id="删除的是叶子节点"><a href="#删除的是叶子节点" class="headerlink" title="删除的是叶子节点"></a>删除的是叶子节点</h5><p>删除的是叶子节点分两种情况：</p><ul><li><p>叶子节点也是根节点</p><p>当该叶子节点为根节点时，如下图所示，此时 current == this.root，直接通过：this.root = null，删除根节点。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.1j9353rx9b7k.png" alt="image"></p></li><li><p>叶子节点不为根节点</p><p>当该叶子节点不为根节点时也有两种情况，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3r99a6ocvug0.png" alt="image"></p><p>若 current = 8，可以通过：parent.left = null，删除节点 8；</p><p>若 current = 10，可以通过：parent.right = null，删除节点 10；</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、删除的是叶子节点的情况</span></span><br><span class="line"><span class="keyword">if</span> (currentNode.left === <span class="literal">null</span> &amp;&amp; currentNode.right === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parentNode.left = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parentNode.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、删除的是只有一个子节点的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除的是只有一个子节点的节点"><a href="#删除的是只有一个子节点的节点" class="headerlink" title="删除的是只有一个子节点的节点"></a>删除的是只有一个子节点的节点</h5><p>有六种情况：</p><p>当 current 存在左子节点时（current.right == null）：</p><ul><li><p>情况 1：current 为根节点（current == this.root），如节点 11，此时通过：this.root = current.left，删除根节点 11；</p></li><li><p>情况 2：current 为父节点 parent 的左子节点（isLeftChild == true），如节点 5，此时通过：parent.left = current.left，删除节点 5；</p></li><li><p>情况 3：current 为父节点 parent 的右子节点（isLeftChild == false），如节点 9，此时通过：parent.right = current.left，删除节点 9；</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.27lwqd0qfnpc.png" alt="image"></p><p>当 current 存在右子节点时（current.left = null）：</p><ul><li><p>情况 4：current 为根节点（current == this.root），如节点 11，此时通过：this.root = current.right，删除根节点 11。</p></li><li><p>情况 5：current 为父节点 parent 的左子节点（isLeftChild == true），如节点 5，此时通过：parent.left = current.right，删除节点 5；</p></li><li><p>情况 6：current 为父节点 parent 的右子节点（isLeftChild == false），如节点 9，此时通过：parent.right = current.right，删除节点 9；</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3edzg72fx7y0.png" alt="image"></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、删除的是只有一个子节点的节点</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.right === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在左节点</span></span><br><span class="line">  <span class="comment">//-- 2.1、currentNode 只存在&lt;左节点&gt;的情况</span></span><br><span class="line">  <span class="comment">//---- 2.1.1、currentNode 等于 root</span></span><br><span class="line">  <span class="comment">//---- 2.1.2、parentNode.left 等于 currentNode</span></span><br><span class="line">  <span class="comment">//---- 2.1.3、parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = currentNode.left;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parentNode.left = currentNode.left;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parentNode.right = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.left === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在右节点</span></span><br><span class="line">  <span class="comment">//-- 2.2、currentNode 只存在&lt;右节点&gt;的情况</span></span><br><span class="line">  <span class="comment">//---- 2.1.1 currentNode 等于 root</span></span><br><span class="line">  <span class="comment">//---- 2.1.1 parentNode.left 等于 currentNode</span></span><br><span class="line">  <span class="comment">//---- 2.1.1 parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = currentNode.right;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parentNode.left = currentNode.right;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parentNode.right = currentNode.right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="删除的是有两个子节点的节点"><a href="#删除的是有两个子节点的节点" class="headerlink" title="删除的是有两个子节点的节点"></a>删除的是有两个子节点的节点</h5><p>这种情况十分复杂，首先依据以下二叉搜索树，讨论这样的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4g0geeyv6ya0.png" alt="image"></p><p><strong>删除节点 9</strong></p><p>在保证删除节点 9 后原二叉树仍为二叉搜索树的前提下，有两种方式：</p><ul><li>方式 1：从节点 9 的左子树中选择一合适的节点替代节点 9，可知节点 8 符合要求；</li><li>方式 2：从节点 9 的右子树中选择一合适的节点替代节点 9，可知节点 10 符合要求；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.73rduwimfvo0.png" alt="image"></p><p><strong>删除节点 7</strong></p><p>在保证删除节点 7 后原二叉树仍为二叉搜索树的前提下，也有两种方式：</p><ul><li>方式 1：从节点 7 的左子树中选择一合适的节点替代节点 7，可知节点 5 符合要求；</li><li>方式 2：从节点 7 的右子树中选择一合适的节点替代节点 7，可知节点 8 符合要求；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.2h9hjd5bhwo0.png" alt="image"></p><p><strong>删除节点 15</strong></p><p>在保证删除节点 15 后原树二叉树仍为二叉搜索树的前提下，同样有两种方式：</p><ul><li>方式 1：从节点 15 的左子树中选择一合适的节点替代节点 15，可知节点 14 符合要求；</li><li>方式 2：从节点 15 的右子树中选择一合适的节点替代节点 15，可知节点 18 符合要求；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4f5tzwdvueq0.png" alt="image"></p><p>相信你已经发现其中的规律了！</p><p>规律总结：如果要删除的节点有两个子节点，甚至子节点还有子节点，这种情况下需要从要删除节点下面的子节点中找到一个合适的节点，来替换当前的节点。</p><p>若用 current 表示需要删除的节点，则合适的节点指的是：</p><ul><li>current 左子树中比 current 小一点点的节点，即 current 左子树中的最大值；</li><li>current 右子树中比 current 大一点点的节点，即 current 右子树中的最小值；</li></ul><h6 id="前驱-amp-后继"><a href="#前驱-amp-后继" class="headerlink" title="前驱&amp;后继"></a>前驱&amp;后继</h6><p>在二叉搜索树中，这两个特殊的节点有特殊的名字：</p><ul><li>比 current 小一点点的节点，称为 current 节点的前驱。比如下图中的节点 5 就是节点 7 的前驱；</li><li>比 current 大一点点的节点，称为 current 节点的后继。比如下图中的节点 8 就是节点 7 的后继；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.71vg0g9z7io0.png" alt="image"></p><p>查找需要被删除的节点 current 的后继时，需要在 current 的右子树中查找最小值，即在 current 的右子树中一直向左遍历查找；</p><p>查找前驱时，则需要在 current 的左子树中查找最大值，即在 current 的左子树中一直向右遍历查找。</p><p>下面只讨论查找 current 后继的情况，查找前驱的原理相同，这里暂不讨论。</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 3、删除的是有两个子节点的节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、找到后续节点</span></span><br><span class="line">    <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(currentNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断是否为根节点</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将后续的左节点改为被删除的左节点</span></span><br><span class="line">    successor.left = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后续节点，即从要删除的节点的右边开始查找最小的值</span></span><br><span class="line"><span class="function"><span class="title">getSuccessor</span>(<span class="params">delNode</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义变量，保存要找到的后续</span></span><br><span class="line">  <span class="keyword">let</span> successor = delNode;</span><br><span class="line">  <span class="keyword">let</span> current = delNode.right;</span><br><span class="line">  <span class="keyword">let</span> successorParent = delNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环查找 current 的右子树节点</span></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    successorParent = successor;</span><br><span class="line">    successor = current;</span><br><span class="line">    current = current.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断寻找到的后续节点是否直接就是要删除节点的 right</span></span><br><span class="line">  <span class="keyword">if</span> (successor !== delNode.right) &#123;</span><br><span class="line">    successorParent.left = successor.right;</span><br><span class="line">    successor.right = delNode.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> successor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完整实现-2"><a href="#完整实现-2" class="headerlink" title="完整实现"></a>完整实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> parentNode = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环查找到要删除的节点 currentNode，以及它的 parentNode、isLeftChild</span></span><br><span class="line">  <span class="keyword">while</span> (currentNode.key !== key) &#123;</span><br><span class="line"></span><br><span class="line">    parentNode = currentNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小于，往左查找</span></span><br><span class="line">    <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">      isLeftChild = <span class="literal">true</span>;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 否则往右查找</span></span><br><span class="line">      isLeftChild = <span class="literal">false</span>;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到最后都没找到相等的节点，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、删除的是叶子节点的情况</span></span><br><span class="line">  <span class="keyword">if</span> (currentNode.left === <span class="literal">null</span> &amp;&amp; currentNode.right === <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除的是只有一个子节点的节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.right === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在左节点</span></span><br><span class="line">    <span class="comment">//-- 2.1、currentNode 只存在&lt;左节点&gt;的情况</span></span><br><span class="line">    <span class="comment">//---- 2.1.1、currentNode 等于 root</span></span><br><span class="line">    <span class="comment">//---- 2.1.2、parentNode.left 等于 currentNode</span></span><br><span class="line">    <span class="comment">//---- 2.1.3、parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.left === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在右节点</span></span><br><span class="line">    <span class="comment">//-- 2.2、currentNode 只存在&lt;右节点&gt;的情况</span></span><br><span class="line">    <span class="comment">//---- 2.1.1 currentNode 等于 root</span></span><br><span class="line">    <span class="comment">//---- 2.1.1 parentNode.left 等于 currentNode</span></span><br><span class="line">    <span class="comment">//---- 2.1.1 parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、删除的是有两个子节点的节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、找到后续节点</span></span><br><span class="line">    <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(currentNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断是否为根节点</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将后续的左节点改为被删除的左节点</span></span><br><span class="line">    successor.left = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后续节点，即从要删除的节点的右边开始查找最小的值</span></span><br><span class="line"><span class="function"><span class="title">getSuccessor</span>(<span class="params">delNode</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义变量，保存要找到的后续</span></span><br><span class="line">  <span class="keyword">let</span> successor = delNode;</span><br><span class="line">  <span class="keyword">let</span> current = delNode.right;</span><br><span class="line">  <span class="keyword">let</span> successorParent = delNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环查找 current 的右子树节点</span></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    successorParent = successor;</span><br><span class="line">    successor = current;</span><br><span class="line">    current = current.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断寻找到的后续节点是否直接就是要删除节点的 right</span></span><br><span class="line">  <span class="keyword">if</span> (successor !== delNode.right) &#123;</span><br><span class="line">    successorParent.left = successor.right;</span><br><span class="line">    successor.right = delNode.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> successor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><p>二叉搜索树的缺陷：当插入的数据是有序的数据，就会造成二叉搜索树的深度过大。比如原二叉搜索树由 11 7 15 组成，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.1nkd51rg5dz4.png" alt="image"></p><p>当插入一组有序数据：6 5 4 3 2 就会变成深度过大的搜索二叉树，会严重影响二叉搜索树的性能。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.154bnlgtd5z4.png" alt="image"></p><p>非平衡树</p><ul><li>比较好的二叉搜索树，它的数据应该是左右均匀分布的。</li><li>但是插入连续数据后，二叉搜索树中的数据分布就变得不均匀了，我们称这种树为非平衡树。</li><li>对于一棵平衡二叉树来说，插入/查找等操作的效率是 O(log n)。</li><li>而对于一棵非平衡二叉树来说，相当于编写了一个链表，查找效率变成了 O(n)。</li></ul><p>树的平衡性</p><p>为了能以较快的时间 O(log n)来操作一棵树，我们需要保证树总是平衡的：</p><ul><li>起码大部分是平衡的，此时的时间复杂度也是接近 O(log n) 的；</li><li>这就要求树中每个节点左边的子孙节点的个数，应该尽可能地等于右边的子孙节点的个数；</li></ul><p>常见的平衡树</p><ul><li>AVL 树：是最早的一种平衡树，它通过在每个节点多存储一个额外的数据来保持树的平衡。由于 AVL 树是平衡树，所以它的时间复杂度也是 O(log n)。但是它的整体效率不如红黑树，开发中比较少用。</li><li>红黑树：同样通过一些特性来保持树的平衡，时间复杂度也是 O(log n)。进行插入/删除等操作时，性能优于 AVL 树，所以平衡树的应用基本都是红黑树。</li></ul></li></ul><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h2><p>在计算机程序设计中，图也是一种非常常见的数据结构，图论其实是一个非常大的话题，在数学上起源于哥尼斯堡七桥问题。</p><h3 id="什么是图？"><a href="#什么是图？" class="headerlink" title="什么是图？"></a>什么是图？</h3><ul><li><p>图是一种与树有些相似的数据结构。</p><ul><li>实际上，在数学的概念上，树是图的一种。</li><li>我们知道树可以用来模拟很多现实的数据结构，比如：家谱/公司组织架构等等。</li></ul></li><li><p>那么图长什么样子呢？或者什么样的数据使用图来模拟更合适呢？</p><ul><li><p>人与人之间的关系网<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4cdhxz0ereu0.png" alt="image"></p></li><li><p>互联网中的网络关系<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4ljxyy69a1s0.png" alt="image"></p></li><li><p>广州地铁图<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.46k2cvwmthw0.png" alt="image"></p></li></ul></li><li><p>那么，什么是图呢?</p><ul><li>我们会发现，上面的结点（其实图中叫顶点 Vertex）之间的关系，是不能使用树来表示（几叉树都不可以）。</li><li>这个时候，我们就可以使用<strong>图</strong>来模拟它们。</li></ul></li><li><p>图通常有什么特点呢？</p><ul><li>一组顶点：通常用 V (Vertex) 表示顶点的集合</li><li>一组边：通常用 E (Edge) 表示边的集合</li><li>边是顶点和顶点之间的连线</li><li>边可以是有向的，也可以是无向的。（比如 A — B，通常表示无向。 A –&gt; B，通常表示有向）</li></ul></li></ul><h3 id="图的术语"><a href="#图的术语" class="headerlink" title="图的术语"></a>图的术语</h3><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><ul><li><p>我们在学习树的时候，树有很多的其他术语，了解这些术语有助于我们更深层次的理解图。</p></li><li><p>但是图的术语其实非常多，如果你找一本专门讲图的各个方面的书籍，会发现只是术语就可以占据一个章节。</p></li><li><p>这里，这里介绍几个比较常见的术语，某些术语后面用到的时候，再了解，没有用到的，不做赘述。</p></li><li><p>下面这是个抽象出来的图<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.rr153grdbc0.png" alt="image"></p></li><li><p>顶点</p><ul><li>顶点刚才我们已经介绍过了，表示图中的一个结点。</li><li>比如地铁站中某个站/多个村庄中的某个村庄/互联网中的某台主机/人际关系中的人。</li></ul></li><li><p>边</p><ul><li>边表示顶点和顶点之间的连线。</li><li>比如地铁站中两个站点之间的直接连线, 就是一个边。</li><li>注意：这里的边不要叫做路径，路径有其他的概念，后面会区分。</li></ul></li><li><p>相邻顶点</p><ul><li>由一条边连接在一起的顶点称为相邻顶点。</li><li>比如 <code>0 - 1</code> 是相邻的，<code>0 - 3</code> 是相邻的。<code>0 - 2</code> 是不相邻的。</li></ul></li><li><p>度</p><ul><li>一个顶点的度是相邻顶点的数量</li><li>比如 0 顶点和其他两个顶点相连，0 顶点的度是 2</li><li>比如 1 顶点和其他四个顶点相连，1 顶点的度是 4</li></ul></li><li><p>路径</p><ul><li>路径是顶点 <code>v1</code>，<code>v2</code>…，<code>vn</code> 的一个连续序列, 比如上图中 <code>0 1 5 9</code> 就是一条路径。</li><li>简单路径: 简单路径要求不包含重复的顶点. 比如 <code>0 1 5 9</code> 是一条简单路径。</li><li>回路：第一个顶点和最后一个顶点相同的路径称为回路。比如 <code>0 1 5 6 3 0</code>。</li></ul></li><li><p>无向图</p><ul><li>上面的图就是一张无向图，因为所有的边都没有方向。</li><li>比如 <code>0 - 1</code> 之间有变，那么说明这条边可以保证 <code>0 -&gt; 1</code>，也可以保证 <code>1 -&gt; 0</code>。</li></ul></li><li><p>有向图</p><ul><li>有向图表示的图中的边是有方向的。</li><li>比如 <code>0 -&gt; 1</code>，不能保证一定可以 <code>1 -&gt; 0</code>，要根据方向来定。</li></ul></li></ul><h4 id="无权图和带权图"><a href="#无权图和带权图" class="headerlink" title="无权图和带权图"></a>无权图和带权图</h4><ul><li><p>无权图</p><ul><li>我们上面的图就是一张无权图（边没有携带权重）</li><li>我们上面的图中的边是没有任何意义的，不能收 <code>0 - 1</code> 的边，比 <code>4 - 9</code> 的边更远或者用的时间更长。</li></ul></li><li><p>带权图</p><ul><li>带权图表示边有一定的权重</li><li>这里的权重可以是任意你希望表示的数据：比如距离或者花费的时间或者票价。</li><li>我们来看一张有向和带权的图<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3q0nj5eq5p80.png" alt="image"></li></ul></li></ul><h3 id="现实建模"><a href="#现实建模" class="headerlink" title="现实建模"></a>现实建模</h3><ul><li><p>对交通流量建模</p><ul><li>顶点可以表示街道的十字路口，边可以表示街道.。</li><li>加权的边可以表示限速或者车道的数量或者街道的距离。</li><li>建模人员可以用这个系统来判定最佳路线以及最可能堵车的街道。</li></ul></li><li><p>对飞机航线建模</p><ul><li>航空公司可以用图来为其飞行系统建模。</li><li>将每个机场看成顶点，将经过两个顶点的每条航线看作一条边。</li><li>加权的边可以表示从一个机场到另一个机场的航班成本，或两个机场间的距离。</li><li>建模人员可以利用这个系统有效的判断从一个城市到另一个城市的最小航行成本。<br>​</li></ul></li></ul><h2 id="二、图的表示"><a href="#二、图的表示" class="headerlink" title="二、图的表示"></a>二、图的表示</h2><p>我们知道一个图包含很多顶点，另外包含顶点和顶点之间的连线（边），这两个都是非常重要的图信息，因此都需要在程序中体现出来。</p><h3 id="顶点表示"><a href="#顶点表示" class="headerlink" title="顶点表示"></a>顶点表示</h3><ul><li><p>顶点的表示相对简单</p><ul><li>上面的顶点，我们抽象成了 1 2 3 4，也可以抽象成 A B C D。在后面的案例中，我们使用 A B C D。</li><li>那么这些 A B C D 我们可以使用一个数组来存储起来(存储所有的顶点)。</li><li>当然，A B C D 有可能还表示其他含义的数据(比如村庄的名字)，这个时候，可以另外创建一个数组，用于存储对应的其他数据。</li></ul></li><li><p>边的表示略微复杂</p><ul><li>因为边是两个顶点之间的关系，所以表示起来会稍微麻烦一些。</li><li>下面是变常见的表示方式。</li></ul></li></ul><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><ul><li><p>概述</p><ul><li>邻接矩阵让每个节点和一个整数向关联, 该整数作为数组的下标值.</li><li>我们用一个二维数组来表示顶点之间的连接.</li><li>演示<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.66y7l5b21nw0.png" alt="image"></li></ul></li><li><p>图片解析</p><ul><li>在二维数组中，0 表示没有连线，1 表示有连线。</li><li>通过二维数组，我们可以很快的找到一个顶点和哪些顶点有连线。（比如 A 顶点, 只需要 遍历第一行即可）</li><li>另外，A - A，B - B（也就是顶点到自己的连线），通常使用 0 表示。</li></ul></li><li><p>邻接矩阵的问题</p><ul><li><p>如果是一个无向图，邻接矩阵展示出来的二维数组，其实是一个对称图。</p><ul><li>也就是 A -&gt; D 是 1 的时候，对称的位置 D -&gt; 1 一定也是 1。</li><li>那么这种情况下会造成空间的浪费，解决办法需自己去研究下。</li></ul></li><li><p>邻接矩阵还有一个比较严重的问题就是如果图是一个稀疏图</p><ul><li>那么矩阵中将存在大量的 0，这意味着我们浪费了计算机存储空间来表示根本不存在的边。</li><li>而且即使只有一个边，我们也必须遍历一行来找出这个边，也浪费很多时间。</li></ul></li></ul></li></ul><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><ul><li><p>概述</p><ul><li>邻接表由图中每个顶点以及和顶点相邻的顶点列表组成。</li><li>这个列表有很多中方式来存储：数组/链表/字典(哈希表)都可以。</li><li>演示<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3mu1hv8a84u0.png" alt="image"></li></ul></li><li><p>图片解析</p><ul><li>其实图片比较容易理解</li><li>比如我们要表示和 A 顶点有关联的顶点（边），A 和 B/C/D 有边，那么我们可以通过 A 找到 对应的数组/链表/字典，再取出其中的内容就可以啦。</li></ul></li><li><p>邻接表的问题</p><ul><li>邻接表计算“出度”是比较简单的（出度：指向别人的数量, 入度: 指向自己的数量）</li><li>邻接表如果需要计算有向图的“入度”，那么是一件非常麻烦的事情。</li><li>它必须构造一个“逆邻接表”，才能有效的计算“入度”。而临街矩阵会非常简单。</li></ul></li></ul><h2 id="三、图的封装"><a href="#三、图的封装" class="headerlink" title="三、图的封装"></a>三、图的封装</h2><h3 id="创建图类"><a href="#创建图类" class="headerlink" title="创建图类"></a>创建图类</h3><ul><li>先来创建 Graph 类，定义了两个属性：<ul><li><code>vertexes</code> 用于存储所有的顶点，使用一个数组来保存。</li><li><code>adjList</code> adj 是 adjoin 的缩写，邻接的意思。adjList 用于存储所有的边，这里采用邻接表的形式。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.vertexes = []; <span class="comment">// 存储顶点</span></span><br><span class="line">    <span class="built_in">this</span>.adjList = <span class="keyword">new</span> Dictionay(); <span class="comment">//存储边信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h3><ul><li>添加顶点：可以向图中添加一些顶点。<ul><li>将添加的顶点放入到数组中。</li><li>另外，给该顶点创建一个数组<code>[]</code>，该数组用于存储顶点连接的所有的边.（回顾邻接表的实现方式）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加顶点</span></span><br><span class="line"><span class="function"><span class="title">addVertex</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加点</span></span><br><span class="line">    <span class="built_in">this</span>.vertexes.push(val)</span><br><span class="line">    <span class="comment">// 添加点的关系  采用邻接矩阵法 结构用Map</span></span><br><span class="line">    <span class="built_in">this</span>.adjList.set(val, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加边：可以指定顶点和顶点之间的边。<ul><li>添加边需要传入两个顶点，因为边是两个顶点之间的边，边不可能单独存在。</li><li>根据顶点 v 取出对应的数组，将 w 加入到它的数组中。</li><li>根据顶点 w 取出对应的数组，将 v 加入到它的数组中。</li><li>因为这里实现的是无向图，所以边是可以双向的。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加边</span></span><br><span class="line"><span class="function"><span class="title">addEdge</span>(<span class="params">val1, val2</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加边需要传入两个顶点, 因为边是两个顶点之间的边, 边不可能单独存在.</span></span><br><span class="line">    <span class="comment">// 这里实现的是无向图, 所以这里不考虑方向问题</span></span><br><span class="line">    <span class="built_in">this</span>.adjList.get(val1).push(val2)</span><br><span class="line">    <span class="built_in">this</span>.adjList.get(val2).push(val1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toString 方法：为了能够正确的显示图的结果，就是拿出二维数组的每一项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出图结构</span></span><br><span class="line"><span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">        res += <span class="built_in">this</span>.vertexes[i] + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> adj = <span class="built_in">this</span>.adjList.get(<span class="built_in">this</span>.vertexes[i])</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; adj.length; j++) &#123;</span><br><span class="line">            res += adj[j] + <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="string">&quot;\n&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> graph = <span class="keyword">new</span> Graph();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加顶点</span></span><br><span class="line"><span class="keyword">let</span> myVertexes = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertexes.length; i++) &#123;</span><br><span class="line">  graph.addVertex(myVertexes[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边</span></span><br><span class="line">graph.addEdge(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;G&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;G&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;H&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;E&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="四、图的遍历"><a href="#四、图的遍历" class="headerlink" title="四、图的遍历"></a>四、图的遍历</h2><p>和其他数据结构一样，需要通过某种算法来遍历图结构中每一个数据。这样可以保证，在我们需要时，通过这种算法来访问某个顶点的数据以及它对应的边。</p><h3 id="遍历的方式"><a href="#遍历的方式" class="headerlink" title="遍历的方式"></a>遍历的方式</h3><ul><li><p>图的遍历思想<br>图的遍历算法的思想在于必须访问每个第一次访问的节点，并且追踪有哪些顶点还没有被访问到。</p></li><li><p>有两种算法可以对图进行遍历</p><ul><li>广度优先搜索(Breadth-First Search, 简称 BFS)</li><li>深度优先搜索(Depth-First Search, 简称 DFS)</li><li>两种遍历算法，都需要明确指定第一个被访问的顶点。</li></ul></li><li><p>遍历的注意点</p><ul><li>完全探索一个顶点要求我们便查看该顶点的每一条边。</li><li>对于每一条所连接的没有被访问过的顶点，将其标注为被发现的，并将其加进待访问顶点列表中。</li><li>为了保证算法的效率：每个顶点至多访问两次。</li></ul></li><li><p>两种算法的思想</p><ul><li>BFS 基于队列，入队列的顶点先被探索。</li><li>DFS 基于栈，通过将顶点存入栈中，顶点是沿着路径被探索的，存在新的相邻顶点就去访问。</li></ul></li><li><p>为了记录顶点是否被访问过，我们使用三种颜色来反应它们的状态。(或者两种颜色也可以)</p><ul><li><strong>白色</strong>表示该顶点还没有被访问.</li><li><strong>灰色</strong>表示该顶点被访问过, 但并未被探索过.</li><li><strong>黑色</strong>表示该顶点被访问过且被完全探索过.</li><li>初始化颜色代码</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化顶点的颜色</span></span><br><span class="line"><span class="function"><span class="title">_initializeColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 白色: 表示该顶点还没有被访问.</span></span><br><span class="line">    <span class="comment">// 灰色: 表示该顶点被访问过, 但并未被探索过.</span></span><br><span class="line">    <span class="comment">// 黑色: 表示该顶点被访问过且被完全探索过.</span></span><br><span class="line">    <span class="keyword">let</span> colors = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">        colors[<span class="built_in">this</span>.vertexes[i]] = <span class="string">&quot;white&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> colors</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h3><ul><li><p>广度优先搜索算法的思路<br>广度优先算法会从指定的第一个顶点开始遍历图，先访问其所有的相邻点，就像一次访问图的一层。换句话说，就是先宽后深的访问顶点。</p></li><li><p>图解 BFS<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3vz7fx7tgvs0.png" alt="image"></p></li><li><p>广度优先搜索的实现</p><ol><li>创建一个队列 Q</li><li>将 v 标注为被发现的(灰色), 并将 v 将入队列 Q</li><li>如果 Q 非空, 执行下面的步骤：<ul><li>将 v 从 Q 中取出队列</li><li>将 v 标注为被发现的灰色</li><li>将 v 所有的未被访问过的邻接点（白色），加入到队列中</li><li>将 v 标志为黑色</li></ul></li></ol></li><li><p>广度优先搜索的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 广度优先搜索</span></span><br><span class="line"><span class="function"><span class="title">bfs</span>(<span class="params">handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.初始化颜色</span></span><br><span class="line">    <span class="keyword">let</span> color = <span class="built_in">this</span>._initializeColor()</span><br><span class="line">    <span class="comment">// 2. 创建队列</span></span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue</span><br><span class="line">    <span class="comment">// 3. 将传入的顶点放入队列</span></span><br><span class="line">    queue.enqueue(<span class="built_in">this</span>.vertexes[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 4.依赖队列操作数据   队列不为空时一直持续</span></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 4.1 拿到队头</span></span><br><span class="line">        <span class="keyword">let</span> qVal = queue.dequeue()</span><br><span class="line">        <span class="comment">//  4.2 拿到队头所关联（相连）的点并设置为访问中状态（灰色）</span></span><br><span class="line">        <span class="keyword">let</span> qAdj = <span class="built_in">this</span>.adjList.get(qVal)</span><br><span class="line">        color[qVal] = <span class="string">&quot;gray&quot;</span></span><br><span class="line">        <span class="comment">// 4.3 将队头关联的点添加到队尾</span></span><br><span class="line">        <span class="comment">// 这一步是完成bfs的关键，依赖队列的先进先出的特点。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; qAdj.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> a = qAdj[i]</span><br><span class="line">            <span class="keyword">if</span> (color[a] === <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">                color[a] = <span class="string">&quot;gray&quot;</span></span><br><span class="line">                queue.enqueue(a)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.5设置访问完的点为黑色。</span></span><br><span class="line">        color[qVal] = <span class="string">&quot;black&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (handle) [</span><br><span class="line">            handle(qVal)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用广度优先算法</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">graph.bfs(graph.vertexes[<span class="number">0</span>], <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// A B C D E F G H I</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h3><p>深度优先搜索的思路：</p><ul><li>深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径知道这条路径最后被访问了。</li><li>接着原路回退并探索吓一条路径。</li><li>图解 DFS<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.1bjimck65r8g.png" alt="image"></li></ul><p>深度优先搜索算法的实现：</p><ul><li><p>广度优先搜索算法我们使用的是队列，这里可以使用栈完成，也可以使用递归。</p></li><li><p>方便代码书写，我们还是使用递归(递归本质上就是函数栈的调用)</p></li><li><p>深度优先搜索算法的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深度优先搜索</span></span><br><span class="line"><span class="function"><span class="title">dfs</span>(<span class="params">handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.初始化颜色</span></span><br><span class="line">    <span class="keyword">let</span> color = <span class="built_in">this</span>._initializeColor()</span><br><span class="line">    <span class="comment">// 2. 遍历所有顶点，开始访问</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color[<span class="built_in">this</span>.vertexes[i]] === <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>._dfsVisit(<span class="built_in">this</span>.vertexes[i], color, handle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dfs的递归方法  这里直接使用函数的调用栈</span></span><br><span class="line"><span class="function"><span class="title">_dfsVisit</span>(<span class="params">val, color, handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 将颜色设置为访问中</span></span><br><span class="line">    color[val] = <span class="string">&quot;gray&quot;</span></span><br><span class="line">    <span class="comment">// 2. 执行相应的回调</span></span><br><span class="line">    <span class="keyword">if</span> (handle) &#123;</span><br><span class="line">        handle(val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 拿与该点相邻的点，对每个点操作</span></span><br><span class="line">    <span class="keyword">let</span> adj = <span class="built_in">this</span>.adjList.get(val)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; adj.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> w = adj[i]</span><br><span class="line">        <span class="comment">// 如果相邻点未未访问状态，开始访问。</span></span><br><span class="line">        <span class="keyword">if</span> (color[w] === <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>._dfsVisit(w, color, handle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 处理完后设置为访问过点。</span></span><br><span class="line">    color[val] = <span class="string">&quot;black&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用深度优先算法</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">graph.dfs(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出深度优先</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//A B E I F C D G H</span></span><br></pre></td></tr></table></figure></li><li><p>递归的代码较难理解一些，这副图来帮助理解过程：<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.6z6nkgmevxo0.png" alt="image"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;什么是数据结构？&quot;&gt;&lt;a href=&quot;#什么是数据结构？&quot; class=&quot;headerlink&quot; title=&quot;什么是数据结构？&quot;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://lesliewaong.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="JS" scheme="https://lesliewaong.top/tags/JS/"/>
    
    <category term="数据结构与算法" scheme="https://lesliewaong.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://lesliewaong.top/posts/d044eab7.html"/>
    <id>https://lesliewaong.top/posts/d044eab7.html</id>
    <published>2021-09-15T05:12:48.000Z</published>
    <updated>2021-12-05T05:20:30.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="TypeScript简介"><a href="#TypeScript简介" class="headerlink" title="TypeScript简介"></a>TypeScript简介</h2><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成TS使用。</li><li>相较于JS而言，TS拥有了<strong>静态类型</strong>，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><h2 id="TypeScript-开发环境搭建"><a href="#TypeScript-开发环境搭建" class="headerlink" title="TypeScript 开发环境搭建"></a>TypeScript 开发环境搭建</h2><ol><li><p>下载Node.js</p><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li>进入命令行</li><li>输入：<code>npm i -g typescript</code></li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入ts文件所在目录</p></li><li><p>执行命令：<code>tsc xxx.ts</code></p></li></ul></li></ol><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li><strong>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</strong></li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table></li><li><p>number</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> big: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li><li><p>boolean</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>string</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><p>使用 | 来连接多个类型（联合类型）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>any</p><ul><li><p>表示的是任意类型，一个变量设置类型为any后相当于对该变量关闭了TS的类型检测</p></li><li><p>使用TS时，不建议使用any类型</p></li><li><p>声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any （隐式的any）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>unknown</p><ul><li><p>类型是any，它可以赋值给任意变量</p></li><li><p>unknown 实际上就是一个类型安全的any</p></li><li><p>unknown类型的变量，不能直接赋值给其他变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: unknown = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>void</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li><li><p>never</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>object</p><ul><li><p>{} 用来指定对象中可以包含哪些属性</p></li><li><p>语法：{属性名:属性值,属性名:属性值}</p></li><li><p>在属性名后边加上?，表示属性是可选的</p></li><li><p><code>[propName: string]: any</code> 表示任意类型的属性</p></li><li><p>设置函数结构的类型声明：语法：<code>(形参:类型, 形参:类型 ...) =&gt; 返回值</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span>&#125;;</span><br><span class="line">b = &#123;<span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;;</span><br><span class="line">c = &#123;<span class="attr">name</span>: <span class="string">&#x27;猪八戒&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d: <span class="function">(<span class="params">a: <span class="built_in">number</span> ,b: <span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>array</p><ul><li><p><code>类型[]</code>   <code>Array&lt;类型&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>tuple</p><ul><li><p>元组就是固定长度的数组</p></li><li><p>语法：<code>[类型, 类型, 类型]</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li></ul></li><li><p>enum</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>补充</p><ul><li><p>&amp;表示同时</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> j: &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="comment">// j = &#123;name: &#x27;孙悟空&#x27;, age: 18&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>类型的别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> k: myType;</span><br><span class="line"><span class="keyword">let</span> l: myType;</span><br><span class="line"><span class="keyword">let</span> m: myType;</span><br><span class="line"></span><br><span class="line">k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p></li><li><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts <span class="literal">-w</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动编译整个项目</p><ul><li><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</p></li><li><p>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</p></li><li><p><code>tsconfig.json</code>是一个JSON文件，添加配置文件后，只需只需 <code>tsc</code> 命令即可完成对整个项目的编译</p></li><li><p>配置选项：</p><ul><li><p><code>include</code></p><ul><li><p>定义希望被编译文件所在的目录</p></li><li><p>默认值：[“<code>**表示任意目录</code>/<code>*表示任意文件</code>“]</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span>:[<span class="string">&quot;src/**/*&quot;</span>, <span class="string">&quot;tests/**/*&quot;</span>]</span><br></pre></td></tr></table></figure><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p></li></ul></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;./src/hello/**/*&quot;</span>]</span><br></pre></td></tr></table></figure><p>上述示例中，src下hello目录下的文件都不会被编译</p></li></ul></li><li><p>extends</p><ul><li><p>定义被继承的配置文件</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;extends&quot;</span>: <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>列表中的文件都会被TS编译器所编译</p></li><li><p><code>compilerOptions</code></p><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ul><li><p><code>target</code></p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p></li></ul></li><li><p><code>lib</code></p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>module</code></p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>outDir</code></p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置后编译后的js文件将会生成到dist目录</p></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>allowJs</p><ul><li>是否对js文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对js文件进行检查</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>removeComments</code></p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p><code>noEmit</code></p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul></li></ul></li><li><p>严格检查</p><ul><li><code>strict</code><ul><li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li></ul></li><li><code>alwaysStrict</code><ul><li>用来设置编译后的文件是否使用严格模式，默认false</li></ul></li><li><code>noImplicitAny</code><ul><li>禁止隐式的any类型</li></ul></li><li><code>noImplicitThis</code><ul><li>禁止类型不明确的this</li></ul></li><li>strictBindCallApply<ul><li>严格检查bind、call和apply的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li><code>strictNullChecks</code><ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查switch语句包含正确的break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li><code>noEmitOnError</code><ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><ul><li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p></li><li><p>步骤：</p><ol><li><p>初始化项目</p><ul><li>进入项目根目录，执行命令 <code> npm init -y</code><ul><li>主要作用：创建package.json文件</li></ul></li></ul></li><li><p>下载构建工具</p><ul><li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader html-webpack-plugin clean-webpack-plugin</code>  <ul><li>共安装了7个包<ul><li>webpack<ul><li>构建工具webpack</li></ul></li><li>webpack-cli<ul><li>webpack的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack的开发服务器</li></ul></li><li>typescript<ul><li>ts编译器</li></ul></li><li>ts-loader<ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li>clean-webpack-plugin<ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul></li></ul></li><li><p>根目录下创建webpack的配置文件webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">optimization</span>:&#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">//title:&#x27;TS测试&#x27;</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改package.json添加如下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...略...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p></li></ol></li></ul><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><ul><li><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p><ol><li><p>安装依赖包：</p><ul><li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li><li>共安装了4个包，分别是：<ul><li>@babel/core<ul><li>babel的核心工具</li></ul></li><li>@babel/preset-env<ul><li>babel的预定义环境</li></ul></li><li>@babel-loader<ul><li>babel在webpack中的加载器</li></ul></li><li>core-js<ul><li>core-js用来使老版本的浏览器支持新版ES语法</li></ul></li></ul></li></ul></li><li><p>修改webpack.config.js配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包后文件的文件</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告诉webpack不使用箭头</span></span><br><span class="line">        <span class="attr">environment</span>:&#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                use: [</span><br><span class="line">                     <span class="comment">// 配置babel</span></span><br><span class="line">                     &#123;</span><br><span class="line">                         <span class="comment">// 指定加载器</span></span><br><span class="line">                         <span class="attr">loader</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                         <span class="comment">// 设置babel</span></span><br><span class="line">                         <span class="attr">options</span>: &#123;</span><br><span class="line">                             <span class="comment">// 设置预定义的环境</span></span><br><span class="line">                             <span class="attr">presets</span>:[</span><br><span class="line">                                 [</span><br><span class="line">                                     <span class="comment">// 指定环境的插件</span></span><br><span class="line">                                     <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                     <span class="comment">// 配置信息</span></span><br><span class="line">                                     &#123;</span><br><span class="line">                                         <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                                         <span class="attr">targets</span>:&#123;</span><br><span class="line">                                             <span class="string">&quot;chrome&quot;</span>:<span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;ie&quot;</span>:<span class="string">&quot;11&quot;</span></span><br><span class="line">                                         &#125;,</span><br><span class="line">                                         <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                                         <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                         <span class="comment">// 使用corejs的方式 &quot;usage&quot; 表示按需加载</span></span><br><span class="line">                                         <span class="string">&quot;useBuiltIns&quot;</span>:<span class="string">&quot;usage&quot;</span></span><br><span class="line">                                     &#125;</span><br><span class="line">                                 ]</span><br><span class="line">                             ]</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;,</span><br><span class="line">                    <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置Webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// title: &quot;这是一个自定义的title&quot;</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p></li></ol></li></ul><h1 id="第二章：面向对象"><a href="#第二章：面向对象" class="headerlink" title="第二章：面向对象"></a>第二章：面向对象</h1><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分：数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为<strong>属性</strong>，而功能就被称为<strong>方法</strong>。所以简而言之，在程序中一切皆是对象。</p><h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">参数: 类型</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// constructor 被称为构造函数</span></span><br><span class="line">    <span class="comment">//  构造函数会在对象创建时调用</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 在实例方法中，this就表示当前当前的实例</span></span><br><span class="line">        <span class="comment">// 在构造函数中当前对象就是当前新建的那个对象</span></span><br><span class="line">        <span class="comment">// 可以通过this向新建的对象中添加属性</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 在方法中可以通过this来表示当前调用方法的对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.sayHello();</span><br></pre></td></tr></table></figure></li></ul><h2 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h2><ul><li><p>封装</p><ul><li><p><strong>对象实质上就是属性和方法的容器</strong>，它的主要作用就是存储属性和方法，这就是所谓的封装</p></li><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p></li><li><p><strong>只读属性（readonly）</strong>：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li><strong>public（默认值）</strong>，可以在类、子类和对象中修改</li><li><strong>protected</strong> ，可以在类、子类中修改</li><li><strong>private</strong> ，可以在类中修改</li></ul></li><li><p>示例：</p><ul><li><p>public</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li><li><p>protected</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li><li><p>private</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性存取器</p><ul><li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p></li><li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p></li><li><p>我们可以在类中定义一组读取、设置属性的方法，<strong>这种对属性读取或设置的属性被称为属性的存取器</strong></p></li><li><p>设置属性的方法叫做<code>setter</code>方法，读取属性的方法叫做<code>getter</code>方法</p></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>._name = name;</span><br><span class="line">            <span class="built_in">this</span>._age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   getter方法用来读取属性</span></span><br><span class="line"><span class="comment">        *   setter方法用来设置属性</span></span><br><span class="line"><span class="comment">        *       - 它们被称为属性的存取器</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义方法，用来获取name属性</span></span><br><span class="line">        <span class="comment">// getName()&#123;</span></span><br><span class="line">        <span class="comment">//     return this._name;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// // 定义方法，用来设置name属性</span></span><br><span class="line">        <span class="comment">// setName(value: string)&#123;</span></span><br><span class="line">        <span class="comment">//     this._name = value;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// TS中设置getter方法的方式</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;get name()执行了！！&#x27;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>._name = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> <span class="title">age</span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>._age = value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// per.setName(&#x27;猪八戒&#x27;);</span></span><br><span class="line">    <span class="comment">// per.setAge(-33);</span></span><br><span class="line"></span><br><span class="line">    per.name = <span class="string">&#x27;猪八戒&#x27;</span>;</span><br><span class="line">    per.age = -<span class="number">33</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态属性</p><ul><li><p>静态属性（方法），也称为类属性。<strong>使用静态属性无需创建实例，通过类即可直接使用</strong></p></li><li><p>静态属性（方法）使用<code>static</code>开头</p></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tools.PI);</span><br><span class="line"><span class="built_in">console</span>.log(Tools.sum(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>this</p><ul><li><strong>在类中，使用this表示当前对象</strong></li></ul></li></ul></li><li><p>继承</p><ul><li><p>继承是面向对象中的又一个特性</p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><ul><li><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的<strong>重写</strong></p></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><p>在子类中可以使用<strong>super</strong>来完成对父类的引用</p><ul><li>如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</li><li>在类的方法中 super就表示当前类的父类</li></ul></li></ul></li><li><p>抽象类（abstract class）</p><p>抽象类是专门用来被其他类所继承的类，<strong>它只能被其他类所继承不能用来创建实例</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> run(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要重写</strong></p></li></ul></li></ul><h2 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说<strong>接口中的所有方法都是抽象方法</strong>。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li><p>示例（检查对象类型）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;</span><br><span class="line">    per.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>示例（实现）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h2><p>定义一个函数或类时，<strong>有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）</strong>，此时泛型便能够发挥作用。</p><ul><li><p>举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p><p>使用泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p></li><li><p>方式二（指定类型）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>也可以在函数后手动指定泛型</p></li></ul><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt;(<span class="params">a: T, b: K</span>): <span class="title">K</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用</p><p>类中同样可以使用泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="attr">prop</span>: T;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">prop: T</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> MyInter&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">MyInter</span>&gt;(<span class="params">arg: T</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-快速入门&quot;&gt;&lt;a href=&quot;#第一章-快速入门&quot; class=&quot;headerlink&quot; title=&quot;第一章 快速入门&quot;&gt;&lt;/a&gt;第一章 快速入门&lt;/h1&gt;&lt;h2 id=&quot;TypeScript简介&quot;&gt;&lt;a href=&quot;#TypeScript简介&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TS" scheme="https://lesliewaong.top/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://lesliewaong.top/posts/54b11a0c.html"/>
    <id>https://lesliewaong.top/posts/54b11a0c.html</id>
    <published>2021-08-25T06:22:47.000Z</published>
    <updated>2021-12-04T06:53:29.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise的理解与使用"><a href="#Promise的理解与使用" class="headerlink" title="Promise的理解与使用"></a>Promise的理解与使用</h1><blockquote><p>概念</p></blockquote><p>Promise是<code>异步编程的一种解决方案</code>，比传统的解决方案——回调函数和事件——更合理和更强大。</p><p>所谓Promise，简单说就是<strong>一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</strong>。</p><p>通俗讲，Promise是一个许诺、承诺，是<strong>对未来事情的承诺，承诺不一定能完成，但是无论是否能完成都会有一个结果</strong>。</p><ul><li><code>Pending</code>  正在做。。。</li><li><code>Resolved</code> 完成这个承诺</li><li><code>Rejected</code> 这个承诺没有完成，失败了</li></ul><p>Promise 用来预定一个不一定能完成的任务，要么成功，要么失败</p><p>在具体的程序中具体的体现，通常用来封装一个异步任务，提供承诺结果</p><p>Promise 是异步编程的一种解决方案，<code>主要用来解决回调地狱的问题，可以有效的减少回调嵌套</code>。真正解决需要<code>配合async/await</code></p><blockquote><p>特点</p></blockquote><ul><li>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：<code>Pending（进行中）</code>、<code>Resolved（已完成，又称Fulfilled）</code>和<code>Rejected（已失败）</code>。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。</li></ul><blockquote><p>缺点</p></blockquote><ul><li><strong>无法取消Promise</strong>，一旦新建它就会立即执行，无法中途取消。和一般的对象不一样，无需调用。</li><li>如果不设置回调函数，<strong>Promise内部抛出的错误，不会反应到外部</strong>。</li><li>当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ul><h2 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么?"></a>Promise是什么?</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ul><li><p>抽象表达:  </p><ul><li>Promise 是一门新的技术(ES6 规范) </li><li>Promise 是 JS 中<code>进行异步编程</code>的新解决方案 备注：旧方案是单纯使用回调函数</li></ul></li><li><p>具体表达: </p><ul><li>从语法上来说: Promise 是一个<code>构造函数</code></li><li>从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/ 失败的结果值</li></ul></li></ul><h3 id="promise-的状态"><a href="#promise-的状态" class="headerlink" title="promise 的状态"></a>promise 的状态</h3><blockquote><p>promise 的状态</p></blockquote><p>实例对象中的一个属性 <code>『PromiseState』</code></p><ul><li><code>pending</code>  未决定的</li><li><code>resolved / fullfilled</code>  成功</li><li><code>rejected</code>  失败</li></ul><blockquote><p>promise 的状态改变</p></blockquote><ul><li><p><code>pending</code> 变为 <code>resolved</code> </p></li><li><p><code>pending</code> 变为 <code>rejected</code></p><p>说明: <code>只有这 2 种</code>, 且一个 promise 对象<code>只能改变一次</code> 无论变为成功还是失败, 都会有一个结果数据 成功的结果数据一般称为 <code>value</code>, 失败的结果数据一般称为 <code>reason</code></p></li></ul><h3 id="promise的基本流程"><a href="#promise的基本流程" class="headerlink" title="promise的基本流程"></a>promise的基本流程</h3><p><a href="https://imgtu.com/i/4j5iYq"><img src="https://z3.ax1x.com/2021/10/05/4j5iYq.png" alt="4j5iYq.png"></a></p><h3 id="promise的基本使用"><a href="#promise的基本使用" class="headerlink" title="promise的基本使用"></a>promise的基本使用</h3><blockquote><p>使用 promise 封装基于定时器的异步</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rand</span>(<span class="params">m,n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * (n-m+<span class="number">1</span>)) + m-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        点击按钮,  1s 后显示是否中奖(30%概率中奖)</span></span><br><span class="line"><span class="comment">            若中奖弹出    恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券</span></span><br><span class="line"><span class="comment">            若未中奖弹出  再接再厉</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//获取元素对象</span></span><br><span class="line">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line">    <span class="comment">//绑定单击事件</span></span><br><span class="line">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//定时器</span></span><br><span class="line">        <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     //30%  1-100  1 2 30</span></span><br><span class="line">        <span class="comment">//     //获取从1 - 100的一个随机数</span></span><br><span class="line">        <span class="comment">//     let n = rand(1, 100);</span></span><br><span class="line">        <span class="comment">//     //判断</span></span><br><span class="line">        <span class="comment">//     if(n &lt;= 30)&#123;</span></span><br><span class="line">        <span class="comment">//         alert(&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券&#x27;);</span></span><br><span class="line">        <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//         alert(&#x27;再接再厉&#x27;);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Promise 形式实现</span></span><br><span class="line">        <span class="comment">// resolve 解决  函数类型的数据</span></span><br><span class="line">        <span class="comment">// reject  拒绝  函数类型的数据</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//30%  1-100  1 2 30</span></span><br><span class="line">                <span class="comment">//获取从1 - 100的一个随机数</span></span><br><span class="line">                <span class="keyword">let</span> n = rand(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(n &lt;= <span class="number">30</span>)&#123;</span><br><span class="line">                    resolve(n); <span class="comment">// 将 promise 对象的状态设置为 『成功』</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(n); <span class="comment">// 将 promise 对象的状态设置为 『失败』</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(p);</span><br><span class="line">        <span class="comment">//调用 then 方法</span></span><br><span class="line">        <span class="comment">// value 值</span></span><br><span class="line">        <span class="comment">// reason 理由</span></span><br><span class="line">        p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 &#x27;</span> + value);</span><br><span class="line">        &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;再接再厉, 您的号码为 &#x27;</span> + reason);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 promise 封装 ajax 异步请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装一个函数 sendAJAX 发送 GET AJAX 请求</span></span><br><span class="line"><span class="comment">     * 参数   URL</span></span><br><span class="line"><span class="comment">     * 返回结果 Promise 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendAJAX</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">            xhr.send();</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="comment">//判断成功</span></span><br><span class="line">                    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                        <span class="comment">//成功的结果</span></span><br><span class="line">                        resolve(xhr.response);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        reject(xhr.status);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sendAJAX(<span class="string">&#x27;https://api.apiopen.top/getJok&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>fs模块使用Promise</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数 形式----------------------------------------------------</span></span><br><span class="line"> fs.readFile(<span class="string">&#x27;./resource/content.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 如果出错 则抛出错误</span></span><br><span class="line">     <span class="keyword">if</span>(err)  <span class="keyword">throw</span> err;</span><br><span class="line">     <span class="comment">//输出文件内容</span></span><br><span class="line">     <span class="built_in">console</span>.log(data.toString());</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise 形式-----------------------------------------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装一个函数 mineReadFile 读取文件内容</span></span><br><span class="line"><span class="comment"> * 参数:  path  文件路径</span></span><br><span class="line"><span class="comment"> * 返回:  promise 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mineReadFile</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).readFile(path, <span class="function">(<span class="params">err, data</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">            <span class="comment">//成功</span></span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mineReadFile(<span class="string">&#x27;./resource/content.txt&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//输出文件内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>util.promisify方法</p></blockquote><p>可以将函数直接变成promise的封装方式,不用再去手动封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入 util 模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//返回一个新的函数</span></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line">mineReadFile(<span class="string">&#x27;./resource/content.txt&#x27;</span>).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="为什么要用Promise"><a href="#为什么要用Promise" class="headerlink" title="为什么要用Promise?"></a>为什么要用Promise?</h2><blockquote><p>指定回调函数的方式更加灵活</p></blockquote><ol><li>旧的: 必须在启动异步任务前指定 </li><li>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函数(甚至可以在异步任务结束后指定/多个)</li></ol><blockquote><p>支持链式调用, 可以解决回调地狱问题</p></blockquote><p><strong>什么是回调地狱？</strong></p><p>回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</p><p><a href="https://imgtu.com/i/4j5Ff0"><img src="https://z3.ax1x.com/2021/10/05/4j5Ff0.jpg" alt="4j5Ff0.jpg"></a></p><p><strong>回调地狱的缺点?</strong></p><p>不便于阅读 不便于异常处理</p><p><strong>解决方案?</strong></p><p>promise <code>链式调用</code>,用来解决回调地狱问题，但是<code>只是简单的改变格式</code>，并没有彻底解决上面的问题真正要解决上述问题，一定要利用promise再加上await和async关键字实现异步传同步</p><p><strong>终极解决方案?</strong></p><p>==promise +async/await==</p><h2 id="Promise中的常用API概述"><a href="#Promise中的常用API概述" class="headerlink" title="Promise中的常用API概述"></a>Promise中的常用API概述</h2><blockquote><p>Promise 构造函数: Promise (excutor) {}</p></blockquote><p>(1) executor 函数: <code>执行器 (resolve, reject) =&gt; &#123;&#125;</code></p><p>(2) resolve 函数: 内部定义成功时我们调用的函数 <code>value =&gt; &#123;&#125;</code> </p><p>(3) reject 函数: 内部定义失败时我们调用的函数 <code>reason =&gt; &#123;&#125;</code> </p><p>说明: executor 会在 Promise 内部立即<code>同步调用</code>,异步操作在执行器中执行,换话说<strong>Promise支持同步也支持异步操作</strong></p><blockquote><p>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</p></blockquote><p>(1) onResolved 函数: <code>成功的回调函数 (value) =&gt; &#123;&#125;</code> </p><p>(2) onRejected 函数: <code>失败的回调函数 (reason) =&gt; &#123;&#125;</code> </p><p>说明: 指定用于得到成功 <code>value</code> 的成功回调和用于得到失败 <code>reason</code> 的失败回调 返回一个<code>新的 promise 对象</code></p><blockquote><p>Promise.prototype.catch 方法: (onRejected) =&gt; {}</p></blockquote><p>(1) onRejected 函数: <code>失败的回调函数 (reason) =&gt; &#123;&#125;</code></p><p>说明: then()的语法糖, 相当于: then(undefined, onRejected)</p><p>(2) 异常穿透使用:当运行到最后,没被处理的所有异常错误都会进入这个方法的回调函数中    </p><blockquote><p>Promise.resolve 方法: (value) =&gt; {}</p></blockquote><p>(1) value: 成功的数据或 promise 对象 </p><p>说明: 返回一个<strong>成功/失败的 promise 对象,直接改变promise状态</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  resolve(<span class="string">&#x27;OK&#x27;</span>); &#125;));      </span><br><span class="line"><span class="built_in">console</span>.log(p3);</span><br></pre></td></tr></table></figure><blockquote><p>Promise.reject 方法: (reason) =&gt; {}</p></blockquote><p>(1) reason: 失败的原因 </p><p>说明: 返回一个<strong>失败的 promise 对象,直接改变promise状态</strong>,<code>代码示例同上</code></p><blockquote><p>Promise.all 方法: (promises) =&gt; {}</p></blockquote><p><code>promises: 包含 n 个 promise 的数组</code> </p><p>说明: 返回一个新的 promise, 只有所有的 promise <code>都成功才成功</code>, 只要有一 个失败了就直接失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; resolve(<span class="string">&#x27;成功&#x27;</span>);  &#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;错误错误错误&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;也是成功&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><blockquote><p>Promise.race 方法: (promises) =&gt; {}</p></blockquote><p><code>promises: 包含 n 个 promise 的数组</code> </p><p>说明: 返回一个新的 promise, <code>第一个完成</code>的 promise 的结果状态就是最终的结果状态,</p><p>如p1延时,开启了异步,内部正常是同步进行,所以<code>p2&gt;p3&gt;p1</code>,结果是<code>P2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line"> &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h2 id="Promise的几个关键问题"><a href="#Promise的几个关键问题" class="headerlink" title="Promise的几个关键问题"></a>Promise的几个关键问题</h2><blockquote><p>如何改变 promise 的状态?</p></blockquote><ul><li><p> <code>resolve(value)</code>: 如果当前是 <code>pending</code> 就会变为 <code>resolved</code> </p></li><li><p><code>reject(reason)</code>: 如果当前是 <code>pending</code> 就会变为 <code>rejected</code> </p></li><li><p><code>抛出异常</code>: 如果当前是 <code>pending</code> 就会变为 <code>rejected</code></p></li></ul><blockquote><p>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</p></blockquote><p>当 promise <code>改变为对应状态时</code>都会调用,改变状态后,多个回调函数都会调用,并不会自动停止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  resolve(<span class="string">&#x27;OK&#x27;</span>);&#125;);</span><br><span class="line"><span class="comment">///指定回调 - 1</span></span><br><span class="line">p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;  <span class="built_in">console</span>.log(value); &#125;);</span><br><span class="line"><span class="comment">//指定回调 - 2</span></span><br><span class="line">p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123; alert(value);&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>改变 promise 状态和指定回调函数谁先谁后?</p></blockquote><ul><li><p>都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调 </p><ul><li>先指定回调再改变状态(<code>异步</code>):先指定回调–&gt; 再改变状态 –&gt;改变状态后才进入异步队列执行回调函数</li><li>先改状态再指定回调(<code>同步</code>):改变状态 –&gt;指定回调 <code>并马上执行</code>回调</li></ul></li><li><p>如何先改状态再<code>指定</code>回调?   –&gt;注意:<strong>指定并不是执行</strong></p><ul><li>在执行器中<code>直接调用 resolve()/reject()</code> –&gt;即,不使用定时器等方法,执行器内直接同步操作 </li><li>延迟更长时间才调用 then()     –&gt;即,在<code>.then()</code>这个方法外再包一层例如延时器这种方法</li></ul></li><li><p>什么时候才能得到数据? </p><ul><li>如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据 </li><li>如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//异步写法,这样写会先指定回调,再改变状态</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;resolve(<span class="string">&#x27;OK&#x27;</span>); &#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//这是同步写法,这样写会先改变状态,再指定回调</span></span><br><span class="line">resolve(<span class="string">&#x27;OK&#x27;</span>); </span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(value);&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>promise.then()返回的新 promise 的结果状态由什么决定?</p></blockquote><p>(1) 简单表达: 由 <code>then()</code>指定的回调函数执行的结果决定 </p><p>(2) 详细表达: </p><p>​    ① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常 </p><p>​    ② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值 </p><p>​    ③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//执行 then 方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="comment">// 1. 抛出错误 ,变为 rejected</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;出了问题&#x27;</span>;</span><br><span class="line">    <span class="comment">// 2. 返回结果是非 Promise 类型的对象,新 promise 变为 resolved</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">521</span>;</span><br><span class="line">    <span class="comment">// 3. 返回结果是 Promise 对象,此 promise 的结果就会成为新 promise 的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;success&#x27;);</span></span><br><span class="line">        reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>promise 如何串连多个操作任务?</p></blockquote><p>(1) promise 的 <strong>then()返回一个新的 promise</strong>, 可以开成 <strong>then()的链式调用</strong> </p><p>(2) 通过 then 的链式调用串连多个同步/异步任务,这样就能用<code>then()</code>将多个同步或异步操作串联成一个同步队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>promise 异常传透?</p></blockquote><ul><li>当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调</li><li>前面任何操作出了异常, 都会传到最后失败的回调中处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">            <span class="comment">// reject(&#x27;Err&#x27;);</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(111);</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;失败啦!&#x27;</span>;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>中断 promise 链?</p></blockquote><p>在<code>关键问题2</code>中,可以得知,当promise状态改变时,他的链式调用都会生效,那如果我们有这个一个实际需求:我们有5个then(),但其中有条件判断,如当我符合或者不符合第三个then条件时,要直接中断链式调用,不再走下面的then,该如何?</p><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数 </p><p>(2) 办法: 在回调函数中返回一个 <code>pendding</code> 状态的<code>promise 对象</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">        <span class="comment">//有且只有一个方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义（手写）Promise"><a href="#自定义（手写）Promise" class="headerlink" title="自定义（手写）Promise"></a>自定义（手写）Promise</h1><h2 id="Promise的实例方法实现"><a href="#Promise的实例方法实现" class="headerlink" title="Promise的实例方法实现"></a>Promise的实例方法实现</h2><h3 id="1-初始结构搭建"><a href="#1-初始结构搭建" class="headerlink" title="1.初始结构搭建"></a>1.初始结构搭建</h3><blockquote><p>html引入,该章节后续html大部分重复 除非必要,否则不再放上来</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 1 - 初始结构搭建<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            resolve(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.warn(reason);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>promise.js  –&gt;使用原生写法,最后会改为class写法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-resolve-与-reject构建与基础实现"><a href="#2-resolve-与-reject构建与基础实现" class="headerlink" title="2.resolve 与 reject构建与基础实现"></a>2.resolve 与 reject构建与基础实现</h3><blockquote><ol><li>使用<code>const self = this;</code>保存this执行,使function中可以取得当前实例</li></ol><p>  ps:可以不使用该方法保存,但是下方function需要<code>改为箭头函数</code>,否则<code>function默认指向是window</code></p><p>  之后代码默认使用<code>self</code>保存this,箭头函数方式将在最后改为class写法时使用</p><ol start="2"><li>默认设置 <code>PromiseState = &#39;pending&#39;以及 PromiseResult = null</code>,这就是promise状态基础</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//添加属性</span></span><br><span class="line">  <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line"><span class="comment">/*  此处可以不写,但是下面function方法需要改为箭头函数,否则function默认指向是window */</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span>; </span><br><span class="line">  <span class="comment">//resolve 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>) </span>&#123;--------------------------------------------</span><br><span class="line">    <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">    self.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span>; <span class="comment">// resolved</span></span><br><span class="line">    <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">    self.PromiseResult = data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//reject 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>) </span>&#123;----------------------------------------------</span><br><span class="line">    <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">    self.PromiseState = <span class="string">&#x27;rejected&#x27;</span>; <span class="comment">// </span></span><br><span class="line">    <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">    self.PromiseResult = data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">  executor(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-throw-抛出异常改变状态"><a href="#3-throw-抛出异常改变状态" class="headerlink" title="3.throw 抛出异常改变状态"></a>3.throw 抛出异常改变状态</h3><blockquote><ol><li>在2的基础上进行修改:将执行器放入<code>try-catch()</code>中</li><li>在catch中使用<code>reject()</code>修改 promise 对象状态为『<code>失败</code>』</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">   executor(resolve, reject);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">   <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">   reject(e);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="4-状态只能修改一次"><a href="#4-状态只能修改一次" class="headerlink" title="4.状态只能修改一次"></a>4.状态只能修改一次</h3><blockquote><ol><li><p>基于2 3代码中resolve和reject方法进修改</p></li><li><p>在成功与失败函数中添加判断<code> if(self.PromiseState !== &#39;pending&#39;) return;</code>,如果进入函数时状态不为<code>pending</code>直接退出,这样就能做到状态只能从<code>pending</code>改至其他状态且做到只能改一次</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">html调用--------------------------------------------------------</span><br><span class="line"> <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">      <span class="comment">//抛出异常</span></span><br><span class="line">      <span class="comment">// throw &quot;error&quot;;</span></span><br><span class="line">    &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(p);</span><br><span class="line">promise.js修改--------------------------------------------------------</span><br><span class="line"></span><br><span class="line">  <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.PromiseResult = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.PromiseState = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.PromiseResult = data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-then-方法执行回调基础实现"><a href="#5-then-方法执行回调基础实现" class="headerlink" title="5. then 方法执行回调基础实现"></a>5. then 方法执行回调基础实现</h3><blockquote><ol><li>修改<code>Promise.prototype.then</code>方法</li><li>传入<code>then(成功回调,失败回调)</code>,当调用then后,会判断当前<code>this.PromiseState</code>的状态,当其为成功时调用<code>成功回调</code>,失败时调用<code>失败回调</code></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// resolve(&#x27;OK&#x27;);// reject(&quot;Error&quot;);</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    p.then(</span><br><span class="line">        <span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(value); &#125;, </span><br><span class="line">        <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="built_in">console</span>.warn(reason);&#125;</span><br><span class="line">    )</span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;onResolved(<span class="built_in">this</span>.PromiseResult);&#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>) &#123;onRejected(<span class="built_in">this</span>.PromiseResult);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-异步任务-then-方法实现"><a href="#6-异步任务-then-方法实现" class="headerlink" title="6.异步任务 then 方法实现"></a>6.异步任务 then 方法实现</h3><blockquote><ol><li><p>此处对于5有四处修改,下面上<code>js代码</code></p></li><li><p>当我运行<code>异步代码</code>后,我的执行器内部代码还未返回(因为用了定时器,里面的代码进入了异步队列),所以当我下面的.then()运行时:我的<code>p</code>为<code>pending</code>状态,所以根本不会执行resolve与reject方法</p></li></ol><p>  解:添加判断<code>pending</code>状态,将当前回调函数保存到实例对象(存到实例上是为了更方便)中,这样后续改变状态时候才调用得到</p><ol start="3"><li>为什么要将回调保存到实例上而不是直接调用?</li></ol><p>  <code>理由</code>:因为我的回调函数需要在我的promise状态改变后(成功或者失败),再根据状态选择运行哪个函数<br>  所以当你调用<code>then()</code>时却检测到状态为<code>pending</code>,说明这时候的promise在异步队列 不能直接运行成功或者失败函数</p><p>  <code>解决</code>:因为<code>resolve与reject</code>方法与<code>then()</code>不在同一个作用域中,并不能共享<code>then(成功回调,失败回调)</code>的参数,所以在判断状态为<code>pending</code>时将回调保存到实例对象上.然后将回调函数的调用放在<code>resolve()与reject()</code>中</p><p>  这样当我代码运行到异步队列的<code>resolve()或reject()</code>时,就可以在这个函数中运行回调函数,实现异步then</p><ol start="4"><li>此处的then<code>仍有瑕疵</code>,需要继续完善</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------</span><br><span class="line"> <span class="comment">//实例化对象</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;reject(<span class="string">&quot;error&quot;</span>); <span class="comment">/* resolve(&#x27;OK&#x27;);*/</span>&#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(value);&#125;,<span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="built_in">console</span>.warn(reason);&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;pending&#x27;</span>; <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 声明属性     </span></span><br><span class="line">  <span class="built_in">this</span>.callback = &#123;&#125;;-----------新添加<span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span>; </span><br><span class="line">    </span><br><span class="line">  <span class="comment">//resolve 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    self.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span>; self.PromiseResult = data;</span><br><span class="line">    <span class="comment">//调用成功的回调函数  加判断的原因是防止无回调报错</span></span><br><span class="line">    <span class="keyword">if</span> (self.callback.onResolved) &#123; self.callback.onResolved(data); &#125;  ------------新添加<span class="number">2</span> 最重要 </span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//reject 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    self.PromiseState = <span class="string">&#x27;rejected&#x27;</span>; self.PromiseResult = data;</span><br><span class="line">    <span class="comment">//执行回调</span></span><br><span class="line">    <span class="keyword">if</span> (self.callback.onResolved) &#123; self.callback.onResolved(data);&#125;  ------------新添加<span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;executor(resolve, reject);&#125; <span class="keyword">catch</span> (e) &#123;reject(e);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;onResolved(<span class="built_in">this</span>.PromiseResult);&#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>) &#123; onRejected(<span class="built_in">this</span>.PromiseResult);&#125;</span><br><span class="line">  <span class="comment">//判断 pending 状态</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>) &#123;  ------------新添加<span class="number">4</span></span><br><span class="line">    <span class="comment">//保存回调函数</span></span><br><span class="line">    <span class="built_in">this</span>.callback = &#123;</span><br><span class="line">      <span class="attr">onResolved</span>: onResolved,</span><br><span class="line">      <span class="attr">onRejected</span>: onRejected</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-指定多个回调"><a href="#7-指定多个回调" class="headerlink" title="7.指定多个回调"></a>7.指定多个回调</h3><blockquote><ol><li><p>基于6代码进行修改 只展示修改部分代码</p></li><li><p><code>6</code>中保存回调函数的方式有BUG,如果我有多个<code>.then()</code>,后面加载的回调函数会覆盖之前的回调函数,导致最后回调函数<code>有且只有</code>最后一个</p></li></ol><p>  解:使用<code>数组</code>的方式进行存储回调函数,调用时也是用数组循环取出</p><ol start="3"><li>此处的then<code>仍有瑕疵</code>,需要继续完善</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">   <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;reject(<span class="string">&#x27;No&#x27;</span>);&#125;, <span class="number">1000</span>);&#125;);</span><br><span class="line">   p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(value);&#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;<span class="built_in">console</span>.warn(reason);&#125;);</span><br><span class="line">   p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123; alert(value);&#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123; alert(reason);&#125;);</span><br><span class="line">   <span class="built_in">console</span>.log(p);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  .....</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        <span class="comment">// if (self.callback.onResolved) &#123; self.callback.onResolved(data); &#125; </span></span><br><span class="line">        self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;   --------修改<span class="number">1</span></span><br><span class="line">            item.onResolved(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      ......</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        <span class="comment">// if (self.callback.onResolved) &#123; self.callback.onResolved(data);&#125;</span></span><br><span class="line">        self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;------修改<span class="number">2</span></span><br><span class="line">            item.onRejected(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)</span>&#123;</span><br><span class="line">    ........</span><br><span class="line">    <span class="comment">//判断 pending 状态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//保存回调函数</span></span><br><span class="line">        <span class="comment">//  this.callback = &#123; onResolved: onResolved, onRejected: onRejected &#125;</span></span><br><span class="line">        <span class="built_in">this</span>.callbacks.push(&#123;--------修改<span class="number">3</span></span><br><span class="line">            <span class="attr">onResolved</span>: onResolved,</span><br><span class="line">            <span class="attr">onRejected</span>: onRejected</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-同步任务-then-返回结果"><a href="#8-同步任务-then-返回结果" class="headerlink" title="8.同步任务 then 返回结果"></a>8.同步任务 then 返回结果</h3><blockquote><ol><li>在之前的then运行结果中得知,我们使用  [ then ] 后的返回结果是其回调函数的返回结果,而我们需要的返回结果是一个新的promise对象</li></ol><p>  解:所以我们在then中<code>return new Promise()</code>,使其得到的是一个新的promise对象</p><ol start="2"><li>在为<code>解决问题1</code>后产生一个新问题:新的promise对象因为没有用<code>rejerect与resolve</code>方法,导致返回的状态一直是<code>pending</code></li></ol><p>  解:在新的promise中判断<code>运行回调函数</code>后的返回值是什么,然后根据其不同类型给其赋予不同状态</p><p>  ​    Ⅰ-<code>if(result instanceof Promise)</code>:返回值一个新的②promise对象(因为是新的promise的回调函数返回值,称<code>②promise对象</code>),在返回值(因为是promise对象)的<code>.then()</code>回调函数中使用rejerect与resolve方法,将其<code>自身的状态</code>赋予外层的promise,</p><p>  ​    即 回调函数中的promise 赋值 给then返回值 ,  所以 <code>最终返回状态==回调函数中的新promise状态</code></p><p>  ​    Ⅱ-如果返回值是一个<code>非promise</code>对象,返回状态设置为成功</p><p>  ​    Ⅲ-如果返回值是一个异常,返回状态设置为失败</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">html调用------------------------------------------------------------</span><br><span class="line">  <span class="comment">//实例化对象</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;resolve(<span class="string">&#x27;OK&#x27;</span>);&#125;);</span><br><span class="line">    <span class="comment">//执行 then 方法</span></span><br><span class="line">    <span class="keyword">const</span> res = p.then(</span><br><span class="line">     <span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="keyword">throw</span> <span class="string">&quot;FAIL&quot;</span>;&#125;,</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="built_in">console</span>.warn(reason);&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line"> <span class="comment">//  if(this.PromiseState === &#x27;fulfilled&#x27;)&#123; onResolved(this.PromiseResult);&#125; 未修改时代码</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;    -------修改<span class="number">1</span> </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = onResolved(<span class="built_in">this</span>.PromiseResult);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;<span class="comment">//如果是 Promise 类型的对象,我就将下一个promise结果赋予外层</span></span><br><span class="line">                    result.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;  resolve(v); &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;reject(r);&#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;resolve(result);&#125;  <span class="comment">//如果返回的不是promise对象,都将其赋予成功状态</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                rejerect(e);<span class="comment">//如果出错了,则返回失败状态</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>)&#123; onRejected(<span class="built_in">this</span>.PromiseResult);&#125;------此部分修改与修改<span class="number">1</span>一样</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.callbacks.push(&#123; <span class="attr">onResolved</span>: onResolved, <span class="attr">onRejected</span>: onRejected&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-异步任务-then-返回结果"><a href="#9-异步任务-then-返回结果" class="headerlink" title="9.异步任务 then 返回结果"></a>9.异步任务 then 返回结果</h3><blockquote><ol><li><p>异步任务是修改<code>if(this.PromiseState === &#39;pending&#39;)</code>后面的值,原因参考<code>6</code>,下面代码只举例这部分修改</p></li><li><p>因为我们需要增加then状态修改,所以在我们保存回调函数这一步我们可以对于回调函数进行<code>加工</code>,<code>添加判断其回调函数的返回值</code>的代码块再存入实例的回调函数中</p></li></ol><p>  Ⅰ-声明一个新的函数:其内部功能-&gt;先运行<code>onResolved回调函数</code>,再将其返回值取出,进行判断其返回值(这个过程同<code>8</code>)</p><p>  Ⅱ-加工后存入实例回调函数数组,之后在<code>resolve与reject</code>方法中调用即可(同<code>6</code>)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------</span><br><span class="line">   <span class="comment">//实例化对象</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;reject(<span class="string">&quot;Error&quot;</span>);&#125;, <span class="number">1000</span>)&#125;); <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">    <span class="comment">//执行 then 方法</span></span><br><span class="line">    <span class="keyword">const</span> res = p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// return &#x27;oh Yeah&#x27;;  //如果有返回,根据其返回值得到相应的状态:字符串为成功,抛出为错误</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(reason, <span class="string">&quot;xx&quot;</span>); <span class="comment">//如果只是打印没返回,则实际上时返回一个undefined,</span></span><br><span class="line">      <span class="comment">//在我们封装js中,undefined会判定为非promise对象,所以状态为成功,结果为undefined</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;sss&quot;</span>   <span class="comment">// throw &#x27;error&#x27;;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line">    <span class="comment">//判断 pending 状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//保存回调函数</span></span><br><span class="line">      <span class="built_in">this</span>.callbacks.push(&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="attr">onResolved</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行成功回调函数</span></span><br><span class="line">            <span class="keyword">let</span> result = onResolved(self.PromiseResult);</span><br><span class="line">            <span class="comment">//判断 其结果</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">              result.then(</span><br><span class="line">                  <span class="function"><span class="params">v</span> =&gt;</span> &#123; resolve(v);&#125;,</span><br><span class="line">                  <span class="function"><span class="params">r</span> =&gt;</span> &#123;reject(r);&#125;</span><br><span class="line">                 )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;resolve(result);&#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;reject(e);&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">          </span><br><span class="line">        <span class="attr">onRejected</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行成功回调函数</span></span><br><span class="line">            <span class="keyword">let</span> result = onRejected(self.PromiseResult);</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">              result.then(</span><br><span class="line">                  <span class="function"><span class="params">v</span> =&gt;</span> &#123;resolve(v); &#125;,</span><br><span class="line">                  <span class="function"><span class="params">r</span> =&gt;</span> &#123;reject(r);&#125;</span><br><span class="line">                 )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;resolve(result);&#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123; reject(e); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="10-then方法代码优化"><a href="#10-then方法代码优化" class="headerlink" title="10. then方法代码优化"></a>10. then方法代码优化</h3><blockquote><ol><li>在8、9、10中可以看出,其判断与改变返回结果状态的代码块是基本重复的,所以可以将其抽出</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    封装函数----------------------------------------------------------------------------</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = type(self.PromiseResult);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">          result.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(v);</span><br><span class="line">          &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">          resolve(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  -----------------------------------------------------------------------------------    </span><br><span class="line">    <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      callback(onResolved);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      callback(onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断 pending 状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//保存回调函数</span></span><br><span class="line">      <span class="built_in">this</span>.callbacks.push(&#123;</span><br><span class="line">        <span class="attr">onResolved</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          callback(onResolved);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onRejected</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          callback(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-catch-方法与异常穿透与值传递"><a href="#11-catch-方法与异常穿透与值传递" class="headerlink" title="11.catch 方法与异常穿透与值传递"></a>11.catch 方法与异常穿透与值传递</h3><blockquote><ol><li><p>异常穿透:添加<code>catch 方法 </code>,并且需要进行回调函数为<code>undefined的</code>处理</p></li><li><p>当我<code>then()</code>中只传一个回调或者不传回调函数时,运行代码会报错,因为运行时调用的回调函数是<code>undefined</code></p></li></ol><p>  解:进行回调函数判断,当其为空时,基于默认回调函数内容:<code>直接往外抛出</code>这样下方的<code>then() or catch()</code>就可以承接到异常或者值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------  </span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;resolve(<span class="string">&#x27;OK&#x27;</span>); &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//值传递</span></span><br><span class="line">    p.then()</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">222</span>);&#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">333</span>);&#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="built_in">console</span>.warn(reason);&#125;);</span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">...-----------修改<span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason;&#125;&#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>) &#123; onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;&#125;</span><br><span class="line"> ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加 catch 方法  </span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>)</span>&#123;  ---------------异常穿透 修改<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise的静态方法实现"><a href="#Promise的静态方法实现" class="headerlink" title="Promise的静态方法实现"></a>Promise的静态方法实现</h2><h3 id="1-Promise-resolve-封装"><a href="#1-Promise-resolve-封装" class="headerlink" title="1. Promise.resolve 封装"></a>1. Promise.resolve 封装</h3><blockquote><ol><li><p>判断传入的参数是否为<code>promise对象</code>:</p><p>Ⅰ-如果为<code>promise</code>:将其状态与结果赋值给外层promise对象</p><p>Ⅱ-如果为<code>非promise</code>:状态设置为成功</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------  </span><br><span class="line"> <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line"> <span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;     </span><br><span class="line">      reject(<span class="string">&quot;error&quot;</span>);<span class="comment">// resolve(&#x27;Success&#x27;);</span></span><br><span class="line">    &#125;));</span><br><span class="line"> <span class="keyword">const</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Oh Yeah&#x27;</span>));</span><br><span class="line"> <span class="built_in">console</span>.log(p3);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">            value.then(</span><br><span class="line">                <span class="function"><span class="params">v</span>=&gt;</span>&#123;resolve(v);&#125;,</span><br><span class="line">                <span class="function"><span class="params">r</span>=&gt;</span>&#123;reject(r);&#125;</span><br><span class="line">            )&#125;<span class="keyword">else</span>&#123;resolve(value); &#125;<span class="comment">//状态设置为成功</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Promise-resolve-封装"><a href="#2-Promise-resolve-封装" class="headerlink" title="2. Promise.resolve 封装"></a>2. Promise.resolve 封装</h3><blockquote><p>不同于resolve,这个方法只要把传入参数再次传出去,并将状态改为<code>失败</code>即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------  </span><br><span class="line">   <span class="comment">//Promise.reject</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">    <span class="built_in">console</span>.log(p2);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Promise-all-封装"><a href="#3-Promise-all-封装" class="headerlink" title="3. Promise.all 封装"></a>3. Promise.all 封装</h3><blockquote><ol><li>遍历传入的promise数组,每当遍历结果是成功,则用计数器记录,当计数器等同于数组长度,则全部成功,这时候可以返回<code>成功</code>状态</li><li>如果当数组中任意一个promise的执行结果是<code>reject</code>,直接中断,返回状态为<code>失败</code></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------  </span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;resolve(<span class="string">&#x27;OK&#x27;</span>); &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line">    <span class="comment">//调用 all 方法</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 all 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//返回结果为promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//声明变量</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">        <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">        arr[i] = v;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (count === promises.length) &#123;resolve(arr);&#125;<span class="comment">//修改状态</span></span><br><span class="line">      &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        reject(r);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Promise-race-封装"><a href="#4-Promise-race-封装" class="headerlink" title="4. Promise.race 封装"></a>4. Promise.race 封装</h3><blockquote><p>直接谁先执行就返回谁的运行结果即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">html调用------------------------------------------------------------  </span><br><span class="line"> <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;resolve(<span class="string">&#x27;OK&#x27;</span>);&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line">    <span class="comment">//调用 race 方法</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">promise.js修改与实现-----------------------------------------------------</span><br><span class="line"><span class="comment">//添加 race 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">        resolve(v);</span><br><span class="line">      &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">        reject(r);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><h3 id="1-回调函数『异步执行』"><a href="#1-回调函数『异步执行』" class="headerlink" title="1. 回调函数『异步执行』"></a>1. 回调函数『异步执行』</h3><ol><li>如果我们运行下面代码,正确顺序是: 111 –&gt; 333 –&gt;444</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  p1.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">  &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">444</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>但当我们运行之前封装的 <strong>Promise</strong> 代码时,结果却是:111 –&gt; 444 –&gt; 333</li></ol><p>  我们需要将我们的then方法变成<code>异步方法</code></p><ol start="3"><li>我们只要在以下四处地方的<code>回调函数调用</code>外层包裹一层定时器(不一定是定时器,开启异步即可),即可做到异步操作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123; item.onResolved(data); &#125;); &#125;);--修改<span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//reject 函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123; item.onRejected(data); &#125;); &#125;);---修改<span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">      <span class="comment">/*  修改前代码</span></span><br><span class="line"><span class="comment">      if (this.PromiseState === &#x27;fulfilled&#x27;) &#123; callback(onResolved); &#125;</span></span><br><span class="line"><span class="comment">  if (this.PromiseState === &#x27;rejected&#x27;) &#123; callback(onRejected);</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; callback(onResolved);&#125;);&#125;  -----修改<span class="number">3</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>)&#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; callback(onRejected);&#125;);   ---修改<span class="number">4</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><code>相关原理参照js事件循环机制、宏任务与微任务</code></li></ol><h3 id="2-class改写promise"><a href="#2-class改写promise" class="headerlink" title="2.class改写promise"></a>2.class改写promise</h3><p>其中将<code>self=this</code>保存this指向方式改为箭头函数表示(在上面示例中也有效果)</p><blockquote><p>promisedemo.js代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line"> <span class="comment">//构造方法</span></span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//添加属性</span></span><br><span class="line">   <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">   <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">//声明属性</span></span><br><span class="line">   <span class="built_in">this</span>.callbacks = [];</span><br><span class="line">   <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">   <span class="comment">//resolve 函数</span></span><br><span class="line">   <span class="keyword">let</span> resolve = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//判断状态</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">     <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span>; <span class="comment">// resolved</span></span><br><span class="line">     <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">     <span class="built_in">this</span>.PromiseResult = data;</span><br><span class="line">     <span class="comment">//调用成功的回调函数</span></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">         item.onResolved(data);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//reject 函数</span></span><br><span class="line">   <span class="keyword">let</span> reject = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//判断状态</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">     <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;rejected&#x27;</span>; <span class="comment">// </span></span><br><span class="line">     <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">     <span class="built_in">this</span>.PromiseResult = data;</span><br><span class="line">     <span class="comment">//执行失败的回调</span></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">         item.onRejected(data);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">     executor(resolve, reject);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">     <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">     reject(e);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//then 方法封装</span></span><br><span class="line"> <span class="function"><span class="title">then</span>(<span class="params">onResolved, onRejected</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//判断回调函数参数</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">     onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">throw</span> reason;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">     onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">     <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//封装函数</span></span><br><span class="line">     <span class="keyword">let</span> callback = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">         <span class="keyword">let</span> result = type(<span class="built_in">this</span>.PromiseResult);</span><br><span class="line">         <span class="comment">//判断</span></span><br><span class="line">         <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">           <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">           result.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">             resolve(v);</span><br><span class="line">           &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">             reject(r);</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">           resolve(result);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">         reject(e);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         callback(onResolved);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         callback(onRejected);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//判断 pending 状态</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">       <span class="comment">//保存回调函数</span></span><br><span class="line">       <span class="built_in">this</span>.callbacks.push(&#123;</span><br><span class="line">         <span class="attr">onResolved</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           callback(onResolved);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">onRejected</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           callback(onRejected);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//catch 方法</span></span><br><span class="line"> <span class="keyword">catch</span> (onRejected) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加 resolve 方法</span></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//返回promise对象</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">       value.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(v);</span><br><span class="line">       &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">         reject(r);</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//状态设置为成功</span></span><br><span class="line">       resolve(value);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加 reject 方法</span></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     reject(reason);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加 all 方法</span></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//返回结果为promise对象</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//声明变量</span></span><br><span class="line">     <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">let</span> arr = [];</span><br><span class="line">     <span class="comment">//遍历</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">         <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">         count++;</span><br><span class="line">         <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">         arr[i] = v;</span><br><span class="line">         <span class="comment">//判断</span></span><br><span class="line">         <span class="keyword">if</span> (count === promises.length) &#123;</span><br><span class="line">           <span class="comment">//修改状态</span></span><br><span class="line">           resolve(arr);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">         reject(r);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加 race 方法</span></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">race</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">       promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">         resolve(v);</span><br><span class="line">       &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">         reject(r);</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>html文件调用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>class版本封装<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promisedemo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="comment">// resolve(&quot;OK&quot;);</span></span></span><br><span class="line"><span class="javascript">   reject(<span class="string">&quot;Erosssr&quot;</span>);</span></span><br><span class="line"><span class="javascript"> &#125;)</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">p1.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="javascript">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.warn(reason);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">Promise</span>.resolve(<span class="string">&#x27;OK&#x27;</span>));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Promise-async-await"><a href="#Promise-async-await" class="headerlink" title="Promise+ async + await"></a>Promise+ async + await</h1><ol><li><p>Promise==&gt;异步</p></li><li><p>await==&gt;异步转同步</p><ol><li>await 可以理解为是 async wait 的简写。await 必须出现在 async 函数内部，不能单独使用。</li><li>await 后面可以跟任何的JS 表达式。虽然说 await 可以等很多类型的东西，但是它最主要的意图是用来等待 Promise 对象的状态被 resolved。如果await的是 promise对象会造成异步函数停止执行并且等待 promise 的解决,如果等的是正常的表达式则立即执行        </li></ol></li><li><p>async==&gt;同步转异步</p><ol><li>方法体内部的某个表达式使用await修饰，那么这个方法体所属方法必须要用async修饰所以使用awit方法会自动升级为异步方法</li></ol></li><li><p>mdn文档</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">async</a> </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></li></ol></li></ol><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><ol><li>函数的返回值为 <code>promise 对象</code> </li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><h2 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h2><ol><li>await 右侧的表达式<code>一般为 promise 对象</code>, 但也可以是其它的值 </li><li>如果表达式是 promise 对象, await 返回的是 <code>promise 成功的值</code> </li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await </li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol><blockquote><p>async与await结合1 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * resource  1.html  2.html 3.html 文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mineReadFile = util.promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数的方式</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resource/1.html&#x27;, (err, data1) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if(err) throw err;</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./resource/2.html&#x27;, (err, data2) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         if(err) throw err;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./resource/3.html&#x27;, (err, data3) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             if(err) throw err;</span></span><br><span class="line"><span class="comment">//             console.log(data1 + data2 + data3);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//async 与 await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//读取第一个文件的内容</span></span><br><span class="line">        <span class="keyword">let</span> data1 = <span class="keyword">await</span> mineReadFile(<span class="string">&#x27;./resource/1x.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data2 = <span class="keyword">await</span> mineReadFile(<span class="string">&#x27;./resource/2.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data3 = <span class="keyword">await</span> mineReadFile(<span class="string">&#x27;./resource/3.html&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data1 + data2 + data3);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><blockquote><p>async与await结合2 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>async与await结合发送AJAX<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击获取段子<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sendAJAX</span>(<span class="params">url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                xhr.open(<span class="string">&quot;GET&quot;</span>, url);</span></span><br><span class="line"><span class="javascript">                xhr.send();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//处理结果</span></span></span><br><span class="line"><span class="javascript">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//判断成功</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//成功的结果</span></span></span><br><span class="line"><span class="javascript">                            resolve(xhr.response);</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                            reject(xhr.status);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//段子接口地址 https://api.apiopen.top/getJoke</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取段子信息</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> duanzi = <span class="keyword">await</span> sendAJAX(<span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(duanzi);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h1><p>原理图:</p><p><a href="https://imgtu.com/i/4j5ApV"><img src="https://z3.ax1x.com/2021/10/05/4j5ApV.png" alt="4j5ApV.png"></a></p><p>说明:</p><ol><li>JS中用来存储待执行回调函数的队列包含2个不同特定的列队<ul><li><code>宏队列</code>:用来保存待执行的宏任务(回调),比如:<code>定时器</code>回调/ajax回调/dom事件回调</li><li><code>微队列</code>:用来保存待执行的微任务(回调),比如:<code>Promise</code>的回调/muntation回调</li></ul></li><li>JS执行时会区别这2个队列:<ul><li>JS执行引擎首先必须执行所有的<code>初始化同步任务</code>代码</li><li>每次准备取出第一个<code>宏任务执行前</code>,都要将所有的<code>微任务</code>一个一个取出来执行</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Promise的理解与使用&quot;&gt;&lt;a href=&quot;#Promise的理解与使用&quot; class=&quot;headerlink&quot; title=&quot;Promise的理解与使用&quot;&gt;&lt;/a&gt;Promise的理解与使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;概念&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://lesliewaong.top/tags/JS/"/>
    
    <category term="Promise" scheme="https://lesliewaong.top/tags/Promise/"/>
    
    <category term="ES6" scheme="https://lesliewaong.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6+</title>
    <link href="https://lesliewaong.top/posts/c6d48fcf.html"/>
    <id>https://lesliewaong.top/posts/c6d48fcf.html</id>
    <published>2021-08-02T09:57:47.000Z</published>
    <updated>2021-12-04T06:53:29.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-的环境配置"><a href="#ES6-的环境配置" class="headerlink" title="ES6 的环境配置"></a>ES6 的环境配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="ECMAScript-简介"><a href="#ECMAScript-简介" class="headerlink" title="ECMAScript 简介"></a>ECMAScript 简介</h3><p>ES 的全称是 ECMAScript，它是由 ECMA 国际标准化组织 制定的一套<strong>脚本语言的标准化规范</strong>。</p><p>详细来说，ES 是由 ECMA 的第 39 号技术专家委员会（Technical Committee 39，简称 TC39）负责制订 ECMAScript 标准，成员包括 Microsoft、Mozilla、Google 等公司。</p><p>PS：简单来说，ECMAScript 是 JS 的语言标准。当然，ECMAScript 还包括其他脚本语言的语言标准。</p><h3 id="ECMAScript-版本发布记录"><a href="#ECMAScript-版本发布记录" class="headerlink" title="ECMAScript 版本发布记录"></a>ECMAScript 版本发布记录</h3><ul><li><p>  1995 年：ECMAScript 诞生。</p></li><li><p>  1997 年：ECMAScript 标准确立。ECMA 发布 ECMA-262 标准，推出浏览器标准语言 ECMAScript 1.0。</p></li><li><p>  1999 年：发布 ES3；与此同时，IE5 风靡一时。</p></li><li><p>  2009 年：发布 ECMAScript 5.0（简称 ES5）。例如 foreach、Object.keys、Object.create 和 json 标准。</p></li><li><p>  2011 年：发布 ECMAScript5.1，成为 ISO 国际标准，从而推动所有浏览器都支持。</p></li><li><p>  2015 年 6 月：发布 ECMAScript 6（简称 ES6），即 ECMAScript 2015。（注意，<strong>前者是按版本号区分，后者是按年份区分</strong>。ES 的后续的版本，请尽量用<strong>年份</strong>来命名。）</p></li><li><p>  2016 年 6 月：发布 ECMAScript 7，即 ECMAScript 2016。</p></li><li><p>  2017 年 6 月：发布 ECMAScript 8，即 ECMAScript 2017。</p></li><li><p>  2018 年 6 月：发布 ECMAScript 9，即 ECMAScript 2018。</p></li><li><p>  2019 年 6 月：发布 ECMAScript 10，即 ECMAScript 2019。</p></li><li><p>  2020 年 6 月：发布 ECMAScript 11，即 ECMAScript 2020。</p></li><li><p>  ……</p></li></ul><ul><li>  此后，每年更新一版。</li></ul><h3 id="ES6-简介"><a href="#ES6-简介" class="headerlink" title="ES6 简介"></a>ES6 简介</h3><p>从上面的 ES 的版本记录可以看出：2015 年 6 月，ES6 正式发布。如果用年份来命名版本号，也可以称之为 ES2015。</p><p>ES6 是新的 JS 语法标准。<strong>ES6 实际上是一个泛指，泛指 ES 2015 及后续的版本</strong>。</p><p>很多人在做业务选型的时候，会倾向于选 jQuery。其实 jQuery 的语法是偏向于 ES3 的。而现在主流的框架 Vue.js 和 React.js 的默认语法，都是用的 ES6。</p><p>ES6 的改进如下：</p><ul><li><p>  ES6 之前的变量提升，会导致程序在运行时有一些不可预测性。而 ES6 中通过 let、const 变量优化了这一点。</p></li><li><p>  ES6 增加了很多功能，比如：<strong>常量、作用域、对象代理、异步处理、类、继承</strong>等。这些在 ES5 中想实现，比较复杂，但是 ES6 对它们进行了封装。</p></li><li><p>  ES6 之前的语法过于松散，实现相同的功能，不同的人可能会写出不同的代码。</p></li></ul><p>ES6 的目标是：让 JS 语言可以编写复杂的大型应用程序，成为企业级开发语言。</p><h2 id="ES6-的环境配置（为了兼容-ES5）"><a href="#ES6-的环境配置（为了兼容-ES5）" class="headerlink" title="ES6 的环境配置（为了兼容 ES5）"></a>ES6 的环境配置（为了兼容 ES5）</h2><p>掌握 ES6 之后，如果要考虑 ES5 的兼容性，可以这样做：写 ES6 语法的 js 代码，然后通过 <code>Babel</code>将 ES6 转换为 ES5。</p><p>babel 的作用是将 ES6 语法转为 ES5 语法，支持低端浏览器。</p><p>但是，在这之前，我们需要配置一下相关的环境。</p><h3 id="建立工程目录"><a href="#建立工程目录" class="headerlink" title="建立工程目录"></a>建立工程目录</h3><p>（1）先建立一个空的工程目录 <code>es6</code>，并在目录下建立两个文件夹 <code>src</code>和 <code>dist</code>：</p><ul><li><p>  <code>src</code>：书写 ES6 代码，我们写的 js 程序都放在这里。</p></li><li><p>  <code>dist</code>：利用 Babel 编译生成的 ES5 代码。<strong>我们在 HTML 页面需要引入 dist 里的 js 文件</strong>。</p></li></ul><p>（2）在 工程根目录里新建文件 <code>index.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 我们引入 ES5 中的 js 文件，而不是引入 ES6 中的 js 文件。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，上方代码中，我们引入的是<code>dist</code>目录下的 js 文件。</p><p>然后我们新建文件 <code>src/index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;smyhvae&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;qianguyihao&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>这个文件是一个 ES6 语法 的 js 文件，稍后，我们尝试把这个 ES6 语法的 js 文件转化为 ES5 的 js 文件。</p><p>PS：我们在写代码时，能用单引号尽量用单引号，而不是双引号，前者在压缩之后，程序执行会更快。</p><h3 id="全局安装-Babel-cli"><a href="#全局安装-Babel-cli" class="headerlink" title="全局安装 Babel-cli"></a>全局安装 Babel-cli</h3><p>（1）初始化项目：</p><p>在安装 Babel 之前，需要先用 npm init 先初始化我们的项目。打开终端或者通过 cmd 打开命令行工具，进入项目目录，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>上方代码中，<code>-y</code> 代表全部默认同意，就不用一次次按回车了（稍后再根据需要，在文件中手动修改）。命令执行完成后，会在项目的根目录下生成 package.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;es6demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;smyhvae&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：VS Code 里打开终端的快捷键是：<code>Contol + ~</code>。</p><p>（2）全局安装 Babel-cli：</p><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><p>如果安装比较慢的话，Mac 下可以使用<code>cnpm</code>进行安装 ，windows 下可以使用<code>npm</code>切换到 taobao 的镜像。</p><p>（3）本地安装 babel-preset-es2015 和 babel-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure><p>安装完成后，会发现<code>package.json</code>文件，已经多了 devDependencies 选项：</p><p>（4）新建.babelrc：</p><p>在根目录下新建文件<code>.babelrc</code>，输入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[</span><br><span class="line">        &quot;es2015&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）开始转换：</p><p>现在，我们应该可以将 ES6 的文件转化为 ES5 的文件了，命令如下：（此命令略显复杂）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure><p>我们可以将上面这个命令进行简化一下。操作如下：</p><p>在文件 <code>package.json</code> 中修改键 <code>scripts</code>中的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;babel src/index.js -o dist/index.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>目前为止，环境配置好了。以后，我们执行如下命令，即可将<code>src/index.js</code>这个 ES6 文件转化为 <code>dist/index.js</code>这个 ES5 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>我们执行上面的命令之后，会发现， dist 目录下会生成 ES5 的 js 文件：</p><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;smyhvae&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;qianguyihao&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>当我们打开网页后，就可以在浏览器的控制台，看到代码的输出结果。</p><h1 id="ES5中的严格模式"><a href="#ES5中的严格模式" class="headerlink" title="ES5中的严格模式"></a>ES5中的严格模式</h1><h2 id="严格模式的理解"><a href="#严格模式的理解" class="headerlink" title="严格模式的理解"></a>严格模式的理解</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>理解</strong>：除了正常运行模式(混杂模式)，ES5添加了第二种运行模式：”严格模式”（strict mode）。</p><p>顾名思义，这种模式使得Javascript在更严格的语法条件下运行。</p><p><strong>目的</strong>：</p><ul><li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为</p></li><li><p>消除代码运行的一些不安全之处，为代码的安全运行保驾护航</p></li><li><p>为未来新版本的Javascript做好铺垫</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>针对整个脚本文件：将<code>use strict</code>放在脚本文件的第一行，则整个脚本文件将以严格模式运行。</p></li><li><p>针对单个函数：将<code>use strict</code>放在函数体的第一行，则整个函数以严格模式运行。</p></li></ul><p>PS：如果浏览器不支持，则这句话只解析为一条简单的语句, 没有任何副作用。</p><p>脚本文件的变通写法：因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。</p><h2 id="严格模式和普通模式的区别"><a href="#严格模式和普通模式的区别" class="headerlink" title="严格模式和普通模式的区别"></a>严格模式和普通模式的区别</h2><h3 id="1-全局变量必须显式声明"><a href="#1-全局变量必须显式声明" class="headerlink" title="1.全局变量必须显式声明"></a>1.全局变量必须显式声明</h3><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">name=<span class="string">&quot;xiaomi&quot;</span>;<span class="comment">//报错，name未声明</span></span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> array)&#123;</span><br><span class="line"><span class="comment">//报错，item未声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在严格模式下，变量都必须先用<code>var</code>、<code>let</code>或<code>cons</code>t声明，然后再使用。</p><h3 id="2-禁止动态绑定"><a href="#2-禁止动态绑定" class="headerlink" title="2.禁止动态绑定"></a>2.禁止动态绑定</h3><blockquote><p>好处：在编译时就确定属性与方法到底归属哪个对象，有利于编译效率的提高，也有助于代码的阅读。</p></blockquote><p><strong>动态绑定：即某些属性和方法到底属于哪个对象，不是在编译时确定，而是在运行时确定。</strong></p><p>哪些使用了动态绑定？</p><h4 id="1-with语句"><a href="#1-with语句" class="headerlink" title="1.with语句"></a>1.with语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiaomi&#x27;</span>,</span><br><span class="line"><span class="attr">count</span>:<span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用with语句报错</span></span><br><span class="line"><span class="function"><span class="title">with</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么使用with语句，不确定属性的归属呢？</p><p>很简单，在正常模式下：with绑定的是obj对象，name属性在obj中，而sex不在obj中，则最终会将sex声明为为全局变量。</p><h4 id="2-eval作用域"><a href="#2-eval作用域" class="headerlink" title="2.eval作用域"></a>2.eval作用域</h4><p>正常模式下：eval语句的作用域取决于它处于全局作用域，还是函数作用域。</p><p>严格模式下：eval语句本身就是一个作用域，它生成的变量只能在eval内部使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;xiaoming&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">&quot;var name=&#x27;xiaohua&#x27;;name&quot;</span>))<span class="comment">//&#x27;xiaohua&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//&#x27;xiaoming&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-禁止this指向全局对象，而是指向undefined"><a href="#3-禁止this指向全局对象，而是指向undefined" class="headerlink" title="3.禁止this指向全局对象，而是指向undefined"></a>3.禁止this指向全局对象，而是指向undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//&#x27;xiaoming&#x27;，this指向window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//抛出错误，因为this为undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-禁止删除变量"><a href="#4-禁止删除变量" class="headerlink" title="4.禁止删除变量"></a>4.禁止删除变量</h3><p>严格模式下，声明的变量无法被删除，但对象中的属性，若设置了<code>configurable:true</code>，即可配置，那么这个对象的属性是可以被删除的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">delete</span> name; <span class="comment">// 语法错误</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;<span class="string">&#x27;count&#x27;</span>: &#123;</span><br><span class="line"><span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">&#125;&#125;);</span><br><span class="line"><span class="keyword">delete</span> obj.count; <span class="comment">// 删除成功</span></span><br></pre></td></tr></table></figure><h3 id="5-函数声明必须在顶层"><a href="#5-函数声明必须在顶层" class="headerlink" title="5.函数声明必须在顶层"></a>5.函数声明必须在顶层</h3><p>所谓的顶层是在全局中声明，即在块作用域中声明是错误的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;xiaoming&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (name===<span class="string">&#x27;xiaoming&#x27;</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// 语法错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; name.length; i++) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// 语法错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-禁止变量或函数参数重名"><a href="#6-禁止变量或函数参数重名" class="headerlink" title="6.禁止变量或函数参数重名"></a>6.禁止变量或函数参数重名</h3><p>重名：在同一作用域，两个或两个以上变量名相同。</p><p>正常模式下，如果对象有多个重名属性，那么最后一个会覆盖前面的值。</p><p>但在严格模式下这是会报错的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;xiaohua&quot;</span></span><br><span class="line">&#125;;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>正常模式下：在函数参数中，如果参数有重名情况，我们可以使用<code>arguments[i]</code>读取参数，以便区分参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,b,c</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);<span class="comment">//a</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]);<span class="comment">//第一个b</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>]);<span class="comment">//第二个b</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">3</span>]);<span class="comment">//c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面重复参数名，在严格模式下报错。</p><h3 id="7-限制了arguments对象"><a href="#7-限制了arguments对象" class="headerlink" title="7.限制了arguments对象"></a>7.限制了arguments对象</h3><h4 id="1-不允许对arguments赋值"><a href="#1-不允许对arguments赋值" class="headerlink" title="1.不允许对arguments赋值"></a>1.不允许对arguments赋值</h4><p>正常模式下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;赋值前：&quot;</span>,<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">arguments</span>=<span class="number">12</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;赋值后：&quot;</span>,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>严格模式下会报错。</p><h4 id="2-arguments不再跟踪参数的变化"><a href="#2-arguments不再跟踪参数的变化" class="headerlink" title="2.arguments不再跟踪参数的变化"></a>2.arguments不再跟踪参数的变化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    a=<span class="number">11</span>;</span><br><span class="line">    b=<span class="number">22</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;正常模式下：&quot;</span>,foo(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//Arguments(2) [11, 22, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    a=<span class="number">33</span>;</span><br><span class="line">    b=<span class="number">44</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;严格模式下：&quot;</span>,bar(<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//Arguments(2) [3, 4, callee: (...), Symbol(Symbol.iterator): ƒ]</span></span><br></pre></td></tr></table></figure><p>严格模式下，a,b已经重新赋值，但是arguments没有记录它们的变化。</p><h1 id="ES5中的一些扩展"><a href="#ES5中的一些扩展" class="headerlink" title="ES5中的一些扩展"></a>ES5中的一些扩展</h1><h2 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h2><p>1、js对象(数组) –&gt; json对象(数组)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(obj/arr)</span><br></pre></td></tr></table></figure><p>2、json对象(数组) –&gt; js对象(数组)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(json)</span><br></pre></td></tr></table></figure><p>上面这两个方法是ES5中提供的。</p><p>我们要记住，我们通常说的“json字符串”，只有两种：<strong>json对象、json数组</strong>。</p><p><code>typeof json字符串</code>的返回结果是string。</p><h2 id="Object的扩展"><a href="#Object的扩展" class="headerlink" title="Object的扩展"></a>Object的扩展</h2><p>ES5给Object扩展了一些静态方法，常用的有2个，我们接下来讲解。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(prototype, [descriptors])</span><br></pre></td></tr></table></figure><p>作用: 以指定对象为原型，创建新的对象。同时，第二个参数可以为为新的对象添加新的属性，并对此属性进行描述。</p><p><strong>举例1</strong>：（没有第二个参数时）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">username</span>: <span class="string">&#x27;smyhvae&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">address</span>:<span class="string">&#x27;shenzhen&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">obj2 = <span class="built_in">Object</span>.create(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><p>obj1成为了obj2的原型。</p><p><strong>举例2</strong>：（有第二个参数时）</p><p>第二个参数可以给新的对象添加新的属性。我们修改上面的代码，尝试给obj2添加新属性<code>sex</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">username</span>: <span class="string">&#x27;smyhvae&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">address</span>: <span class="string">&#x27;shenzhen&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">obj2 = <span class="built_in">Object</span>.create(obj1, &#123;</span><br><span class="line">    <span class="attr">sex</span>: &#123;<span class="comment">//给obj2添加新的属性`sex`。注意，这一行的冒号不要漏掉</span></span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;男&#x27;</span>,  <span class="comment">//通过value关键字设置sex的属性值</span></span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上方代码中，我们通过第5行的sex给obj2设置了一个新的属性<code>sex</code>，但是要通过<code>value</code>来设置属性值（第6行）。</p><p>设置完属性值后，这个属性值默认是不可修改的，要通过<code>writable</code>来设置。总而言之，这几个关键字的解释如下：</p><ul><li><p><code>value</code>：设置属性值。</p></li><li><p><code>writable</code>：标识当前属性值是否可修改。如果不写的话，默认为false，不可修改。</p></li><li><p><code>configurable</code>：标识当前属性是否可以被删除。默认为false，不可删除。</p></li><li><p><code>enumerable</code>：标识当前属性是否能用 for in 枚举。 默认为false，不可。</p></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>这个方法有点难理解。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(object, descriptors)</span><br></pre></td></tr></table></figure><p><strong>作用</strong>：为指定对象定义扩展多个属性。</p><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">firstName</span> : <span class="string">&#x27;smyh&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span> : <span class="string">&#x27;vae&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj2, &#123;</span><br><span class="line">    <span class="attr">fullName</span> : &#123;</span><br><span class="line">        <span class="attr">get</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span> : <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;  <span class="comment">//监听扩展属性，当扩展属性发生变化的时候自动调用，自动调用后将变化的值作为实参注入到set函数</span></span><br><span class="line">            <span class="keyword">var</span> names = data.split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br><span class="line">obj2.firstName = <span class="string">&#x27;tim&#x27;</span>;</span><br><span class="line">obj2.lastName = <span class="string">&#x27;duncan&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br><span class="line">obj2.fullName = <span class="string">&#x27;kobe-bryant&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br></pre></td></tr></table></figure><ul><li><p>get ：用来获取当前属性值的回调函数</p></li><li><p>set ：修改当前属性值得触发的回调函数，并且实参即为修改后的值</p></li></ul><p>存取器属性：setter,getter一个用来存值，一个用来取值。</p><h2 id="Object的扩展（二）"><a href="#Object的扩展（二）" class="headerlink" title="Object的扩展（二）"></a>Object的扩展（二）</h2><p>obj对象本身就自带了两个方法。格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get 属性名()&#123;&#125; 用来得到当前属性值的回调函数</span><br><span class="line"></span><br><span class="line">set 属性名()&#123;&#125; 用来监视当前属性值变化的回调函数</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">firstName</span> : <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span> : <span class="string">&#x27;bryant&#x27;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> names = data.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);</span><br><span class="line">obj.fullName = <span class="string">&#x27;curry stephen&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);</span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><blockquote><p>下面讲的这几个方法，都是给数组的实例用的。</p></blockquote><p><strong>方法1</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.indexOf(value)</span><br></pre></td></tr></table></figure><p>作用：获取 value 在数组中的第一个下标。</p><p><strong>方法2</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf(value)</span><br></pre></td></tr></table></figure><p>作用：获取 value 在数组中的最后一个下标。</p><p><strong>方法3</strong>：遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>方法4</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>作用：遍历数组返回一个新的数组，返回的是<strong>加工之后</strong>的新数组。</p><p><strong>方法5</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>作用：遍历过滤出一个新的子数组，返回条件为true的值。</p><h2 id="函数function的扩展：bind"><a href="#函数function的扩展：bind" class="headerlink" title="函数function的扩展：bind()"></a>函数function的扩展：bind()</h2><blockquote><p>ES5中新增了<code>bind()</code>函数来改变this的指向。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind(obj)</span><br></pre></td></tr></table></figure><p>作用：将函数内的this绑定为obj, 并将函数返回。</p><p><strong>面试题</strong>: call()、apply()和bind()的区别：</p><ul><li><p>都能改变this的指向</p></li><li><p>call()/apply()是<strong>立即调用函数</strong></p></li><li><p>bind()：绑定完this后，不会立即调用当前函数，而是<strong>将函数返回</strong>，因此后面还需要再加<code>()</code>才能调用。</p></li></ul><p>PS：bind()传参的方式和call()一样。</p><p><strong>分析</strong>：</p><p>为什么ES5中要加入bind()方法来改变this的指向呢？因为bind()不会立即调用当前函数。</p><p>bind()通常使用在回调函数中，因为回调函数并不会立即调用。如果你希望在回调函数中改变this，不妨使用bind()。</p><h1 id="ES6-的变量声明"><a href="#ES6-的变量声明" class="headerlink" title="ES6 的变量声明"></a>ES6 的变量声明</h1><p>ES5 中，使用 <code>var</code> 定义<strong>全局变量</strong>（ var 是 variable 的简写）。</p><p>ES6 中，新增了 let 和 const 来定义变量：</p><ul><li><p>  <code>let</code>：定义<strong>局部变量</strong>，替代 var。</p></li><li><p>  <code>const</code>：定义<strong>常量</strong>（定义后，不可修改）。</p></li></ul><h2 id="var：定义全局变量"><a href="#var：定义全局变量" class="headerlink" title="var：定义全局变量"></a>var：定义全局变量</h2><p>看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//这里的 a，指的是 区块 里的 a</span></span><br></pre></td></tr></table></figure><p>上方代码是可以输出结果的，输出结果为 1。因为 var 是全局声明的，所以，即使是在区块里声明，但仍然在全局起作用。</p><p>也就是说：<strong>使用 var 声明的变量不具备块级作用域特性</strong>。</p><p>再来看下面这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//这里的 a，指的是 区块 里的 a</span></span><br></pre></td></tr></table></figure><p>上方代码的输出结果为 2 ，因为 var 是全局声明的。</p><p><strong>总结：</strong></p><p>用 var 定义的全部变量，有时候会污染整个 js 的作用域。我们在如今的实战中，基本都是用的 ES6 语法，所以请<strong>尽量避免</strong>使用 var 定义变量。</p><h2 id="let：定义局部变量"><a href="#let：定义局部变量" class="headerlink" title="let：定义局部变量"></a>let：定义局部变量</h2><p>举例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果报错：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>上方代码，打印报错。</p><p>举例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：2</span></span><br></pre></td></tr></table></figure><p>通过上面两个例子可以看出，<strong>用 let 声明的变量，只在局部（块级作用域内）起作用</strong>。</p><p><strong>经典面试题</strong>：</p><p>let 可以防止数据污染，我们来看下面这个 <strong>for 循环</strong>的经典面试题。</p><p>1、用 var 声明变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;循环体中:&#x27;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;循环体外:&#x27;</span> + i);</span><br></pre></td></tr></table></figure><p>上方代码可以正常打印结果，且最后一行的打印结果是 10。说明<strong>循环体外</strong>定义的变量 i，是<strong>全局作用域</strong>下的 i。</p><p>2、用 let 声明变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;循环体中:&#x27;</span> + i); <span class="comment">// // 每循环一次，就会在 &#123; &#125; 所在的块级作用域中，重新定义一个新的变量 i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;循环体外:&#x27;</span> + i);</span><br></pre></td></tr></table></figure><p>上方代码的关键在于：<strong>每次循环都会产生一个块级作用域，每个块级作用域中会重新定义一个新的变量 i</strong>。</p><p>另外，上方代码的最后一行无法打印结果，也就是说打印会报错。因为用 let 定义的变量 i，只在<code>&#123; &#125;</code>这个<strong>块级作用域</strong>里生效。</p><p><strong>总结：</strong>我们要习惯用 let 声明，减少 var 声明带来的<strong>污染全局空间</strong>。</p><p>为了进一步说明 let 不会带来污染，需要说明的是：当我们定义了<code>let a = 1</code>时，如果我们在同一个作用域内继续定义<code>let a = 2</code>，是会报错的。</p><h2 id="const：定义常量"><a href="#const：定义常量" class="headerlink" title="const：定义常量"></a>const：定义常量</h2><p>在程序开发中，有些变量是希望声明后，在业务层就不再发生变化，此时可以用 const 来定义<strong>常量</strong>。</p><p>常量就是<strong>值（内存地址）</strong>不能变化的量。</p><ul><li><p>如果用 const 声明<strong>基本数据类型</strong>，则无法被修改；</p></li><li><p>如果用 const 声明<strong>引用数据类型（即“对象”）</strong>，这里的“无法被修改”指的是<strong>不能改变内存地址的引用</strong>；</p></li></ul><p>但对象里的<strong>内容</strong>是可以被修改的。</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;smyhvae&#x27;</span>; <span class="comment">//定义常量</span></span><br></pre></td></tr></table></figure><p>用 const 声明的常量，只在局部（块级作用域内）起作用；而且，用 const 声明常量时，必须赋值，否则报错。</p><h2 id="let-和-const-的特点【重要】"><a href="#let-和-const-的特点【重要】" class="headerlink" title="let 和 const 的特点【重要】"></a>let 和 const 的特点【重要】</h2><ul><li><p><strong>不属于顶层对象 Window</strong></p><p>var 声明的变量会挂载在 window 对象上，而 let 和 const 声明的变量不会</p></li><li><p><strong>不允许重复声明</strong></p></li><li><p><strong>支持块级作用域</strong></p></li><li><p><strong>不存在变量提升  暂时性死区</strong></p><p>var可以先使用，再声明（undefined）如果区块中存在 let 和 const 命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。只要在声明之前使用这些变量，就会报错。这种语法称为“<strong>暂时性死区</strong>”（temporal dead zone，简称TDZ）。</p></li></ul><p>综上：var 声明的变量，很容易造成<strong>全局污染</strong>。</p><h2 id="for-循环举例（经典案例）"><a href="#for-循环举例（经典案例）" class="headerlink" title="for 循环举例（经典案例）"></a>for 循环举例（经典案例）</h2><p><strong>代码 1</strong>、我们先来看看如下代码：（用 var 定义变量 i）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cc&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myBtn.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                myBtn[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(i);</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上方代码中的运行效果如下：</p><p><a href="https://imgtu.com/i/owBLX6"><img src="https://s4.ax1x.com/2021/12/04/owBLX6.gif" alt="owBLX6.gif"></a></p><p>你可能会感到诧异，为何点击任何一个按钮，弹出的内容都是 4 呢？这是因为，我们用 var 定义的变量 i，是在全局作用域声明的。整个代码中，自始至终只有一个变量。</p><p>for 循环是同步代码，而 onclick点击事件是异步代码。当我们还没点击按钮之前，同步代码已经执行完了，变量 i 已经循环到 4 了。</p><p>也就是说，上面的 for 循环，相当于如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">myBtn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">myBtn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">myBtn[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">myBtn[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++; <span class="comment">// 到这里，i 的值已经是4了。因此，当我们点击按钮时，i的值一直都是4</span></span><br></pre></td></tr></table></figure><p><strong>代码 2</strong>、上面的代码中，如果我们改为用 let 定义变量 i：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cc&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myBtn.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                myBtn[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(i);</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上方代码中的运行效果如下：</p><p><a href="https://imgtu.com/i/owDd3R"><img src="https://s4.ax1x.com/2021/12/04/owDd3R.gif" alt="owDd3R.gif"></a></p><p>上面这个运行结果，才是我们预期的效果。我们用 let 定义变量 i，在循环的过程中，每执行一次循环体，就会诞生一个新的 i。循环体执行 4 次，就会有四个 i。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h3 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h3><p>原理图:</p><p><a href="https://imgtu.com/i/4j5ApV"><img src="https://z3.ax1x.com/2021/10/05/4j5ApV.png" alt="4j5ApV.png"></a></p><p>说明:</p><ol><li>JS中用来存储待执行回调函数的队列包含2个不同特定的列队<ul><li><code>宏队列</code>:用来保存待执行的宏任务(回调),比如:<code>定时器</code>回调/ajax回调/dom事件回调</li><li><code>微队列</code>:用来保存待执行的微任务(回调),比如:<code>Promise</code>的回调/muntation回调</li></ul></li><li>JS执行时会区别这2个队列:<ul><li>JS执行引擎首先必须执行所有的<code>初始化同步任务</code>代码</li><li>每次准备取出第一个<code>宏任务执行前</code>,都要将所有的<code>微任务</code>一个一个取出来执行</li></ul></li></ol><h3 id="ES5-中如何定义常量"><a href="#ES5-中如何定义常量" class="headerlink" title="ES5 中如何定义常量"></a>ES5 中如何定义常量</h3><p>ES5中有<code>Object.defineProperty</code>这样一个api，可以定义常量。这个API中接收三个参数。</p><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量 PI</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">&#x27;PI&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">3.14</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// 打印结果：3.14</span></span><br><span class="line">PI = <span class="number">6</span>; <span class="comment">//尝试修改常量</span></span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">//打印结果：3.14，说明修改失败</span></span><br></pre></td></tr></table></figure><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="解构赋值的概念"><a href="#解构赋值的概念" class="headerlink" title="解构赋值的概念"></a>解构赋值的概念</h2><p><strong>解构赋值</strong>：ES6 允许我们，按照一一对应的方式，从数组或者对象中<strong>提取值</strong>，再将提取出来的值赋值给变量。</p><p>解构：分解数据结构；赋值：给变量赋值。</p><p>解构赋值在实际开发中可以大量减少我们的代码量，并且让程序结构更清晰。</p><h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><p>数组的结构赋值：将数组中的值按照<strong>位置</strong>提取出来，然后赋值给变量。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在 ES6 之前，当我们在为一组变量赋值时，一般是这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>或者是这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> b = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> c = arr[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>现在有了 ES6 之后，我们可以通过数组解构的方式进行赋值：（根据<strong>位置</strong>进行一一对应）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>二者的效果是一样的，但明显后者的代码更简洁优雅。</p><h3 id="未匹配到的情况"><a href="#未匹配到的情况" class="headerlink" title="未匹配到的情况"></a>未匹配到的情况</h3><p>数据的结构赋值，是根据位置进行一一对应来赋值的。可如果左边的数量大于右边的数量时（也就是变量的数量大于值的数量时），多余的变量要怎么处理呢？</p><p>答案是：如果变量在一一对应时，没有找到对应的值，那么，<strong>多余的变量会被赋值为 undefined</strong>。</p><h3 id="解构时，左边允许有默认值"><a href="#解构时，左边允许有默认值" class="headerlink" title="解构时，左边允许有默认值"></a>解构时，左边允许有默认值</h3><p>在解构赋值时，是允许使用默认值的。举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个变量时</span></span><br><span class="line">    <span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">    <span class="built_in">console</span>.log(foo); <span class="comment">//输出结果：true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//两个变量时</span></span><br><span class="line">    <span class="keyword">let</span> [a, b] = [<span class="string">&#x27;123&#x27;</span>]; <span class="comment">//a 赋值为：123。b没有赋值</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + <span class="string">&#x27;,&#x27;</span> + b); <span class="comment">//输出结果：123,undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//两个变量时</span></span><br><span class="line">    <span class="keyword">let</span> [a, b = <span class="string">&#x27;leslie&#x27;</span>] = [<span class="string">&#x27;wang&#x27;</span>]; <span class="comment">//a 赋值为：wang。b 采用默认值 leslie</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + <span class="string">&#x27;,&#x27;</span> + b); <span class="comment">//输出结果：生命壹号,leslie</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将右边的-undefined和null赋值给变量"><a href="#将右边的-undefined和null赋值给变量" class="headerlink" title="将右边的 undefined和null赋值给变量"></a>将右边的 <code>undefined</code>和<code>null</code>赋值给变量</h3><p>如果我们在赋值时，采用的是 <code>undefined</code>或者<code>null</code>，那会有什么区别呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a, b = <span class="string">&#x27;leslie&#x27;</span>] = [<span class="string">&#x27;wang&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">//b 虽然被赋值为 undefined，但是 b 会采用默认值</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + <span class="string">&#x27;,&#x27;</span> + b); <span class="comment">//输出结果：wang,leslie</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a, b = <span class="string">&#x27;leslie&#x27;</span>] = [<span class="string">&#x27;wang&#x27;</span>, <span class="literal">null</span>]; <span class="comment">//b 被赋值为 null</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + <span class="string">&#x27;,&#x27;</span> + b); <span class="comment">//输出结果：wang,null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码分析：</p><ul><li><p>  undefined：相当于什么都没有，此时 b 采用默认值。</p></li><li><p>  <strong>null：相当于有值，但值为 null。</strong></p></li></ul><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><p>对象的结构赋值：将对象中的值按照<strong>属性匹配的方式</strong>提取出来，然后赋值给变量。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>在 ES6 之前，我们从接口拿到 json 数据后，一般这么赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = json.name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = json.age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sex = json.sex;</span><br></pre></td></tr></table></figure><p>上面这种写法，过于麻烦了。</p><p>现在，有了 ES6 之后，我们可以使用对象解构的方式进行赋值。举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;leslie&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age, sex &#125; = person; <span class="comment">// 对象的结构赋值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 打印结果：leslie</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 打印结果：28</span></span><br><span class="line"><span class="built_in">console</span>.log(sex); <span class="comment">// 打印结果：男</span></span><br></pre></td></tr></table></figure><p>上方代码可以看出，对象的解构与数组的结构，有一个重要的区别：<strong>数组</strong>的元素是按次序排列的，变量的取值由它的<strong>位置</strong>决定；</p><p>而<strong>对象的属性没有次序</strong>，是<strong>根据键来取值</strong>的。</p><h3 id="未匹配到的情况-1"><a href="#未匹配到的情况-1" class="headerlink" title="未匹配到的情况"></a>未匹配到的情况</h3><p>对象的结构赋值，是根据属性名进行一一对应来赋值的。可如果左边的数量大于右边的数量时（也就是变量的数量大于值的数量时），多余的变量要怎么处理呢？</p><p>答案是：如果变量在一一对应时，没有找到对应的值，那么，<strong>多余的变量会被赋值为 undefined</strong>。</p><h3 id="给左边的变量自定义命名"><a href="#给左边的变量自定义命名" class="headerlink" title="给左边的变量自定义命名"></a>给左边的变量自定义命名</h3><p>对象的结构赋值里，左边的变量名一定要跟右边的属性名保持一致么？答案是不一定。我们可以单独给左边的变量自定义命名。</p><p>举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;leslie&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge &#125; = person; <span class="comment">// 对象的结构赋值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// 打印结果：leslie</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 打印结果：28</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 打印报错：Uncaught ReferenceError: name is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 打印报错：Uncaught ReferenceError: age is not defined</span></span><br></pre></td></tr></table></figure><p>上方的第 2 行代码中：（请牢记）</p><ul><li><p>  等号左边的属性名 name、age 是对应等号右边的属性名。</p></li><li><p>  等号左边的 myName、myAge 是左边自定义的变量名。</p></li></ul><h3 id="圆括号的使用"><a href="#圆括号的使用" class="headerlink" title="圆括号的使用"></a>圆括号的使用</h3><p>如果变量 foo 在解构之前就已经定义了，此时你再去解构，就会出现问题。下面是错误的代码，编译会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">&#123; foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;leslie&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br></pre></td></tr></table></figure><p>要解决报错，只要在解构的语句外边，加一个圆括号即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">(&#123; foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;leslie&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//输出结果：leslie</span></span><br></pre></td></tr></table></figure><h2 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h2><p>字符串也可以解构，这是因为，此时字符串被转换成了一个类似数组的对象。举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//输出结果：string</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h1 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h1><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="定义箭头函数的语法"><a href="#定义箭头函数的语法" class="headerlink" title="定义箭头函数的语法"></a>定义箭头函数的语法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span> ...) =&gt; &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><p>  如果有且仅有 1 个形参，则<code>()</code>可以省略</p></li><li><p>  如果函数体内有且仅有 1 条语句，则<code>&#123;&#125;</code>可以省略，但前提是，这条语句必须是 return 语句。</p></li></ul><p>需要强调的是，箭头函数是没有函数名的，既然如此，那要怎么调用箭头函数呢？你可以将箭头函数赋值给一个变量，通过变量名调用函数；也可以直接使用箭头函数。我们来看看下面的例子。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>写法 1、定义和调用函数：（传统写法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn1(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure><p>写法 2、定义和调用函数：（ES6中的写法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure><p>上面的两种写法，效果是一样的。</p><p>从上面的箭头函数中，我们可以很清晰地看到变量名、参数名、函数体。</p><p>另外，箭头函数的写法还可以精简一下，继续往下看。</p><p>在箭头函数中，如果方法体内只有一句话，且这句话是 return 语句，那就可以把 <code>&#123;&#125;</code>省略。写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure><p>在箭头函数中，如果形参只有一个参数，则可以把<code>()</code>省略。写法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn2 = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>)); <span class="comment">//输出结果：2</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数的-this-的指向"><a href="#箭头函数的-this-的指向" class="headerlink" title="箭头函数的 this 的指向"></a>箭头函数的 this 的指向</h2><blockquote><p>箭头函数只是为了让函数写起来更简洁优雅吗？当然不只是这个原因，还有一个很大的作用是与 this 的指向有关。</p></blockquote><p>ES6 之前的普通函数中：this 指向的是函数被调用的对象（也就是说，谁调用了函数，this 就指向谁）。</p><p>而 ES6 的箭头函数中：<strong>箭头函数本身不绑定 this</strong>，this 指向的是<strong>箭头函数定义位置的 this</strong>（也就是说，箭头函数在哪个位置定义的，this 就跟这个位置的 this 指向相同）。</p><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;leslie&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// 第一个 this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// 第二个 this</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.call(obj);</span><br><span class="line">fn2();</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj</span><br><span class="line">obj</span><br></pre></td></tr></table></figure><p>代码解释：（一定要好好理解下面这句话）</p><p>上面的代码中，箭头函数是在 fn1()函数里面定义的，所以第二个 this 跟 第一个 this 指向的是<strong>同一个位置</strong>。又因为，在执行 <code>fn1.call(obj)</code>之后，第一个 this 就指向了 obj，所以第二个 this 也是指向 了 obj。</p><h3 id="面试题：箭头函数的-this-指向"><a href="#面试题：箭头函数的-this-指向" class="headerlink" title="面试题：箭头函数的 this 指向"></a>面试题：箭头函数的 this 指向</h3><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;许嵩&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;leslie&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.sayHello();</span><br></pre></td></tr></table></figure><p>上方代码的打印结果是什么？你可能很难想到。</p><p>正确答案的打印结果是<code>许嵩</code>。因为 <code>obj</code> 这个对象并不产生作用域， <code>sayHello()</code> 这个箭头函数实际仍然是定义在 window 当中的，所以 这里的 this 指向是 window。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>作用域</strong></p><ul><li>全局作用域</li><li>函数作用域：<code>function() &#123;&#125;</code></li><li>块级作用域：<code>&#123;&#125;</code></li></ul><h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p><strong>传统写法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = param || <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码中，函数体内的写法是：如果 param 不存在，就用 <code>hello</code>字符串做兜底。这样写比较啰嗦。</p><p><strong>ES6 写法</strong>：（参数默认值的写法，很简洁）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param = <span class="string">&#x27;hello&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ES6 中定义方法时，我们可以给方法里的参数加一个<strong>默认值</strong>（缺省值）：</p><ul><li><p>  方法被调用时，如果没有给参数赋值，那就是用默认值；</p></li><li><p>  方法被调用时，如果给参数赋值了新的值，那就用新的值。</p></li></ul><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2 = <span class="function">(<span class="params">a, b = <span class="number">5</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>)); <span class="comment">//第二个参数使用默认值 5。输出结果：6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>, <span class="number">8</span>)); <span class="comment">//输出结果：9</span></span><br></pre></td></tr></table></figure><p><strong>提醒 1</strong>：默认值的后面，不能再有<strong>没有默认值的变量</strong>。比如<code>(a,b,c)</code>这三个参数，如果我给 b 设置了默认值，那么就一定要给 c 设置默认值。</p><p><strong>提醒 2</strong>：</p><p>我们来看下面这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;smyh&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&#x27;vae&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意第二行代码，我们给 y 赋值为<code>x</code>，这里的<code>x</code>是括号里的第一个参数，并不是第一行代码里定义的<code>x</code>。打印结果：<code>vae vae</code>。</p><p>如果我把第一个参数改一下，改成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;smyh&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">z, y = x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(z, y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&#x27;vae&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此时打印结果是：<code>vae smyh</code>。</p><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p><strong>剩余参数</strong>允许我们将不确定数量的<strong>剩余的元素</strong>放到一个<strong>数组</strong>中。</p><p>比如说，当函数的实参个数大于形参个数时，我们可以将剩余的实参放到一个数组中。</p><p><strong>传统写法</strong>：</p><p>ES5 中，在定义方法时，参数要确定个数，如下：（程序会报错）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>上方代码中，因为方法的参数是三个，但使用时是用到了四个参数，所以会报错：</p><p><strong>ES6 写法</strong>：</p><p>ES6 中，我们有了剩余参数，就不用担心报错的问题了。代码可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//当不确定方法的参数时，可以使用剩余参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(args[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(args[<span class="number">3</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//方法的定义中了四个参数，但调用函数时只使用了三个参数，ES6 中并不会报错。</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p>上方代码中注意，args 参数之后，不能再加别的参数，否则编译报错。</p><p>下面这段代码，也是利用到了剩余参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(args); <span class="comment">// 数组：[20, 30]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h3 id="剩余参数的举例：参数求和"><a href="#剩余参数的举例：参数求和" class="headerlink" title="剩余参数的举例：参数求和"></a>剩余参数的举例：参数求和</h3><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">total += item;</span><br><span class="line">&#125;);</span><br><span class="line">    args.forEach(<span class="function"><span class="params">item</span> =&gt;</span> total += item); <span class="comment">// 注意 forEach里面的代码，写得 很精简</span></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br></pre></td></tr></table></figure><p>打印结果：60</p><h3 id="剩余参数和解构赋值配合使用"><a href="#剩余参数和解构赋值配合使用" class="headerlink" title="剩余参数和解构赋值配合使用"></a>剩余参数和解构赋值配合使用</h3><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// [&#x27;李四&#x27;, &#x27;王五&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h2><p>扩展运算符和剩余参数是相反的。</p><p>剩余参数是将剩余的元素放到一个数组中；</p><p>而扩展运算符是将<strong>数组</strong>或者<strong>可迭代对象</strong>拆分成逗号分隔的参数序列。</p><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">...arr <span class="comment">// 10, 20, 30      注意，这一行是伪代码，这里用到了扩展运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(...arr); <span class="comment">// 10 20 30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>); <span class="comment">// 10 20 30</span></span><br></pre></td></tr></table></figure><p>上面的代码要仔细看：</p><p><code>arr</code>是一个数组，而<code>...arr</code>则表示<code>10, 20, 30</code>这样的序列。</p><p>我们把<code>...arr</code> 打印出来，发现打印结果竟然是 <code>10 20 30</code>，为啥逗号不见了呢？因为逗号被当作了 console.log 的参数分隔符。如果你不信，可以直接打印 <code>console.log(10, 20, 30)</code> 看看。</p><p>接下来，我们看一下扩展运算符的应用。</p><h3 id="举例1：数组赋值"><a href="#举例1：数组赋值" class="headerlink" title="举例1：数组赋值"></a>举例1：数组赋值</h3><p>数组赋值的代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = [...arr1]; <span class="comment">// 将 arr1 赋值给 arr2</span></span><br></pre></td></tr></table></figure><p>为了理解上面这行代码，我们先来分析一段代码：（将数组 arr1 赋值给 arr2）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;smyhvae&#x27;</span>, <span class="string">&#x27;com&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1; <span class="comment">// 将 arr1 赋值给 arr2，其实是让 arr2 指向 arr1 的内存地址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span> + arr2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(<span class="string">&#x27;你懂得&#x27;</span>); <span class="comment">//往 arr2 里添加一部分内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span> + arr2);</span><br></pre></td></tr></table></figure><p>上方代码中，我们往往 arr2 里添加了<code>你懂的</code>，却发现，arr1 里也有这个内容。原因是：<code>let arr2 = arr1;</code></p><p>其实是让 arr2 指向 arr1 的地址。也就是说，二者指向的是同一个内存地址。</p><p>如果不想让 arr1 和 arr2 指向同一个内存地址，我们可以借助<strong>扩展运算符</strong>来做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;smyhvae&#x27;</span>, <span class="string">&#x27;com&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1]; <span class="comment">//【重要代码】arr2 会重新开辟内存地址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span> + arr2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(<span class="string">&#x27;你懂得&#x27;</span>); <span class="comment">//往arr2 里添加一部分内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span> + arr2);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1:www,smyhvae,com</span><br><span class="line">arr2:www,smyhvae,com</span><br><span class="line">---------------------</span><br><span class="line">arr1:www,smyhvae,com</span><br><span class="line">arr2:www,smyhvae,com,你懂得</span><br></pre></td></tr></table></figure><p>我们明白了这个例子，就可以避免开发中的很多业务逻辑上的 bug。</p><h3 id="举例2：合并数组"><a href="#举例2：合并数组" class="headerlink" title="举例2：合并数组"></a>举例2：合并数组</h3><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;王一&#x27;</span>, <span class="string">&#x27;王二&#x27;</span>, <span class="string">&#x27;王三&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;王四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;王六&#x27;</span>];</span><br><span class="line"><span class="comment">// ...arr1  // &#x27;王一&#x27;,&#x27;王二&#x27;,&#x27;王三&#x27;</span></span><br><span class="line"><span class="comment">// ...arr2  // &#x27;王四&#x27;,&#x27;王五&#x27;,&#x27;王六&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [&quot;王一&quot;, &quot;王二&quot;, &quot;王三&quot;, &quot;王四&quot;, &quot;王五&quot;, &quot;王六&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [&quot;王一&quot;, &quot;王二&quot;, &quot;王三&quot;, &quot;王四&quot;, &quot;王五&quot;, &quot;王六&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="举例3：将伪数组或者可遍历对象转换为真正的数组"><a href="#举例3：将伪数组或者可遍历对象转换为真正的数组" class="headerlink" title="举例3：将伪数组或者可遍历对象转换为真正的数组"></a>举例3：将伪数组或者可遍历对象转换为真正的数组</h3><p>代码举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDivs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...myDivs]; <span class="comment">// 利用扩展运算符，将伪数组转为真正的数组</span></span><br></pre></td></tr></table></figure><p><strong>补充</strong>：</p><p>我们在《JavaScript基础/数组的常见方法》中也学过，还有一种方式，可以将伪数组（或者可遍历对象）转换为真正的数组。语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike);</span><br></pre></td></tr></table></figure><h1 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>ES6 引入新的声明字符串的方式 <code>『``』</code> 之前 <code>&#39;&#39;</code> <code>&quot;&quot;</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 声明</span></span><br><span class="line"><span class="comment">// let str = `我也是一个字符串哦!`;</span></span><br><span class="line"><span class="comment">// console.log(str, typeof str);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 内容中可以直接出现换行符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">//3. 变量拼接</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是我心目中最搞笑的演员!!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(out);</span><br></pre></td></tr></table></figure><h2 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h2><p>ES6 中的字符串扩展如下：</p><ul><li>  <code>includes(str)</code>：判断是否包含指定的字符串</li><li>  <code>startsWith(str)</code>：判断是否以指定字符串开头</li><li>  <code>endsWith(str)</code>：判断是否以指定字符串结尾</li><li>  <code>repeat(count)</code>：重复指定次数</li><li>  <code>trimStart()</code>：清除左侧空白</li><li>  <code>trimEnd()</code>：清除右侧空白</li></ul><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;h&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//startsWith(str) : 判断是否以指定字符串开头</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&#x27;d&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//endsWith(str) : 判断是否以指定字符串结尾</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&#x27;g&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&#x27;d&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//repeat(count) : 重复指定次数a</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// trim</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;   iloveyou   &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="built_in">console</span>.log(str.trimStart());</span><br><span class="line"><span class="built_in">console</span>.log(str.trimEnd());</span><br></pre></td></tr></table></figure><p><strong>String.prototype.matchAll</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明正则</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">const</span> result = str.matchAll(reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for(let v of result)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(v);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [...result];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h1 id="Number的扩展"><a href="#Number的扩展" class="headerlink" title="Number的扩展"></a>Number的扩展</h1><ul><li>  二进制与八进制数值表示法: 二进制用<code>0b/0B</code>, 八进制用<code>0o/0O</code>。</li><li>  <strong>指数运算符</strong>:<code>ES2016</code> 新增的 ,指数运算符（<code>**</code>）。</li><li>  <code>Number.EPSILON</code>：数值最小精度</li><li>  <code>Number.MIN_SAFE_INTEGER</code>：最小安全数值(<code>-2^53</code>)</li><li>  <code>Number.MAX_SAFE_INTEGER</code>：最大安全数值(<code>2^53</code>)</li><li>  <code>Number.parseInt()</code>：返回转换值的整数部分</li><li>  <code>Number.parseFloat()</code>：返回转换值的浮点数部分</li><li>  <code>Number.isFinite()</code>：是否为有限数值</li><li>  <code>Number.isNaN()</code>：是否为NaN</li><li>  <code>Number.isInteger()</code>：是否为整数</li><li>  <code>Number.isSafeInteger()</code>：是否在数值安全范围内</li><li>  <code>Math.trunc()</code>：返回数值整数部分</li><li>  <code>Math.sign()</code>：返回数值类型(<code>正数1</code>、<code>负数-1</code>、<code>零0</code>)</li><li>  <code>Math.cbrt()</code>：返回数值立方根</li><li>  <code>Math.clz32()</code>：返回数值的32位无符号整数形式</li><li>  <code>Math.imul()</code>：返回两个数值相乘</li><li>  <code>Math.fround()</code>：返回数值的32位单精度浮点数形式</li><li>  <code>Math.hypot()</code>：返回所有数值平方和的平方根</li><li>  <code>Math.expm1(n)</code>：返回`e^n - 1``</li><li>  ``Math.log1p(n)<code>：返回</code>1 + n<code>的自然对数(</code>Math.log(1 + n)`)</li><li>  <code>Math.log10(n)</code>：返回以10为底的n的对数</li><li>  <code>Math.log2(n)</code>：返回以2为底的n的对数</li><li>  <code>Math.sinh(n)</code>：返回n的双曲正弦</li><li>  <code>Math.cosh(n)</code>：返回n的双曲余弦</li><li>  <code>Math.tanh(n)</code>：返回n的双曲正切</li><li>  <code>Math.asinh(n)</code>：返回n的反双曲正弦</li><li>  <code>Math.acosh(n)</code>：返回n的反双曲余弦</li><li>  <code>Math.atanh(n)</code>：返回n的反双曲正切</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0. Number.EPSILON 是 JavaScript 表示的最小精度</span></span><br><span class="line"><span class="comment">//EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(a-b) &lt; <span class="built_in">Number</span>.EPSILON)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(equal(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 二进制和八进制</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. Number.isFinite  检测一个数值是否为有限数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">100</span>/<span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. Number.isNaN 检测一个数值是否为 NaN </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">123</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">//4. Number.parseInt Number.parseFloat</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">&#x27;5211314love&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">&#x27;3.1415926神奇&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. Number.isInteger 判断一个数是否为整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">2.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. Math.trunc 将数字的小数部分抹掉  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">3.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. Math.sign 判断一个数到底为正数 负数 还是零</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(-<span class="number">20000</span>));</span><br></pre></td></tr></table></figure><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>背景：ES5中对象的属性名都是字符串，容易造成重名，污染环境。</p><p><strong>概念</strong>：ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、<code>布尔值（Boolean）</code>、<code>字符串（String）</code>、<code>数值（Number）</code>、<code>对象（Object）</code>。</p><p><strong>特点：</strong></p><ul><li><p>Symbol属性对应的值是唯一的，解决<strong>命名冲突问题</strong></p></li><li><p>Symbol值不能与其他数据进行计算，包括同字符串拼串</p></li><li><p>for in、for of 遍历时不会遍历Symbol属性。</p></li></ul><h2 id="创建Symbol属性值"><a href="#创建Symbol属性值" class="headerlink" title="创建Symbol属性值"></a>创建Symbol属性值</h2><p>Symbol是函数，但并不是构造函数。创建一个Symbol数据类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> mySymbol);  <span class="comment">//打印结果：symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol);         <span class="comment">//打印结果：Symbol()</span></span><br></pre></td></tr></table></figure><p>下面来讲一下Symbol的使用。</p><h2 id="创建Symbol属性值时，传参作为标识"><a href="#创建Symbol属性值时，传参作为标识" class="headerlink" title="创建Symbol属性值时，传参作为标识"></a>创建Symbol属性值时，传参作为标识</h2><p>如果我通过 Symbol()函数创建了两个值，这两个值是不一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> mySymbol2 = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1 == mySymbol2); <span class="comment">//打印结果：false</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1);         <span class="comment">//打印结果：Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol2);         <span class="comment">//打印结果：Symbol()</span></span><br></pre></td></tr></table></figure><p>上面代码中，倒数第三行的打印结果也就表明了，二者的值确实是不相等的。</p><p>最后两行的打印结果却发现，二者的打印输出，肉眼看到的却相同。那该怎么区分它们呢？</p><p>既然Symbol()是函数，函数就可以传入参数，我们可以通过参数的不同来作为<strong>标识</strong>。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在括号里加入参数，来标识不同的Symbol</span></span><br><span class="line"><span class="keyword">let</span> mySymbol1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> mySymbol2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1 == mySymbol2); <span class="comment">//打印结果：false</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1);         <span class="comment">//打印结果：Symbol(one)</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol2);         <span class="comment">//打印结果：Symbol(two)。颜色为红色。</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol2.toString());<span class="comment">//打印结果：Symbol(two)。颜色为黑色。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol.for 创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s4 == s5);</span><br></pre></td></tr></table></figure><h2 id="将Symbol作为对象的属性值"><a href="#将Symbol作为对象的属性值" class="headerlink" title="将Symbol作为对象的属性值"></a>将Symbol作为对象的属性值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;smyhvae&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//obj.mySymbol = &#x27;male&#x27;; //错误：不能用 . 这个符号给对象添加 Symbol 属性。</span></span><br><span class="line">obj[mySymbol] = <span class="string">&#x27;hello&#x27;</span>;    <span class="comment">//正确：通过**属性选择器**给对象添加 Symbol 属性。后面的属性值随便写。</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>上面的代码中，我们尝试给obj添加一个Symbol类型的属性值，但是添加的时候，不能采用<code>.</code>这个符号，而是应该用<code>属性选择器</code>的方式。</p><p>现在我们用for in尝试对上面的obj进行遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;smyhvae&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[mySymbol] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历obj</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从打印结果中可以看到：for in、for of 遍历时不会遍历Symbol属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line">    <span class="attr">up</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">down</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line"><span class="comment">// let methods = &#123;</span></span><br><span class="line"><span class="comment">//     up: Symbol(),</span></span><br><span class="line"><span class="comment">//     down: Symbol()</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// game[methods.up] = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;我可以改变形状&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// game[methods.down] = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;我可以快速下降!!&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(game);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(youxi)</span><br></pre></td></tr></table></figure><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>Symbol 可以用来定义常量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_NAME = <span class="built_in">Symbol</span>(<span class="string">&#x27;my_name&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="内置的-Symbol-值"><a href="#内置的-Symbol-值" class="headerlink" title="内置的 Symbol 值"></a>内置的 Symbol 值</h2><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance](param)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(param);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我被用来检测类型了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o <span class="keyword">instanceof</span> Person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr2[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr.concat(arr2));</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器（Itertor）是一种接口，为各种不同的数据结构提供统一的访问机制。</p><p>任何数据结构只要部署了Itertor接口(其实就是对象中的一个属性)，就可以完成遍历操作。</p><ul><li><p>ES6创造了一种新的遍历命令<code>for...of</code>循环，Itertor接口主要供<code>for...of</code>消费</p></li><li><p>原生具备Itertor接口的数据</p><ul><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ul></li><li><p>工作原理</p><ul><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用next方法返回一个包含value和done属性的对象</li></ul><p><strong>注;需要自定义遍历数据的时候，要想到迭代器</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 for...of 遍历数组</span></span><br><span class="line"><span class="comment">// for(let v of xiyou)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(v);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用对象的next方法</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure><blockquote><p>自定义遍历数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">        <span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;xiaoning&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;xiaotian&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;knight&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="comment">//索引变量</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; _this.stus.length) &#123;</span><br><span class="line">                    <span class="keyword">const</span> result = &#123; <span class="attr">value</span>: _this.stus[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                    <span class="comment">//下标自增</span></span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="comment">//返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历这个对象 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>生成器其实就是一个特殊的函数 异步编程</p><p>异步编程  纯回调函数  node fs  ajax mongodb</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数代码的分隔符 yield</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(111);</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line">    <span class="comment">// console.log(222);</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾部&#x27;</span>;</span><br><span class="line">    <span class="comment">// console.log(333);</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">    <span class="comment">// console.log(444);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="comment">// for(let v of gen())&#123;</span></span><br><span class="line"><span class="comment">//     console.log(v);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>生成器函数的参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(one);</span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(two);</span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = gen(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">//next方法可以传入实参</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&#x27;BBB&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&#x27;CCC&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>生成器函数实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步编程  文件操作 网络操作(ajax, request) 数据库操作</span></span><br><span class="line"><span class="comment">// 1s 后控制台输出 111  2s后输出 222  3s后输出 333 </span></span><br><span class="line"><span class="comment">// 回调地狱</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(111);</span></span><br><span class="line"><span class="comment">//     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         console.log(222);</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             console.log(333);</span></span><br><span class="line"><span class="comment">//         &#125;, 3000);</span></span><br><span class="line"><span class="comment">//     &#125;, 2000);</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> one();</span><br><span class="line">    <span class="keyword">yield</span> two();</span><br><span class="line">    <span class="keyword">yield</span> three();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟获取  用户数据  订单数据  商品数据 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">        <span class="comment">//调用 next 方法, 并且将数据传入</span></span><br><span class="line">        iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrders</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">        iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">        iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">yield</span> getUsers();</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">yield</span> getOrders();</span><br><span class="line">    <span class="keyword">let</span> goods = <span class="keyword">yield</span> getGoods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure><h1 id="数组的扩展-1"><a href="#数组的扩展-1" class="headerlink" title="数组的扩展"></a>数组的扩展</h1><ul><li>  Array.from()</li><li>  find()</li><li>  findIndex()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flat 平</span></span><br><span class="line"><span class="comment">//将多维数组转化为低维数组</span></span><br><span class="line"><span class="comment">// const arr = [1,2,3,4,[5,6]];</span></span><br><span class="line"><span class="comment">// const arr = [1,2,3,4,[5,6,[7,8,9]]];</span></span><br><span class="line"><span class="comment">//参数为深度 是一个数字</span></span><br><span class="line"><span class="comment">// console.log(arr.flat(2));  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flatMap</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.flatMap(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h1 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h1><h2 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。</span></span><br><span class="line"><span class="comment">//这样的书写更加简洁</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我们可以改变你!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="function"><span class="title">improve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我们可以提高你的技能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure><h2 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h2><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。</p><p>通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到。</p><p>新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><p>知识点：</p><ul><li>class 声明类；</li><li>constructor 定义构造函数初始化；</li><li>extends 继承父类；</li><li>super 调用父级构造方法；</li><li>static 定义静态方法和属性；</li><li>父类方法可以重写；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand, price</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以打电话!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> Huawei = <span class="keyword">new</span> Phone(<span class="string">&#x27;华为&#x27;</span>, <span class="number">5999</span>);</span><br><span class="line">Huawei.call();</span><br><span class="line"><span class="built_in">console</span>.log(Huawei);</span><br><span class="line"></span><br><span class="line"><span class="comment">//class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shouji</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造方法 名字不能修改</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">brand, price</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法必须使用该语法, 不能使用 ES5 的对象完整形式</span></span><br><span class="line">    <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我可以打电话!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onePlus = <span class="keyword">new</span> Shouji(<span class="string">&quot;1+&quot;</span>, <span class="number">1999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(onePlus);</span><br></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>属于类，但不属于实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function Phone()&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Phone.name = &#x27;手机&#x27;;</span></span><br><span class="line"><span class="comment">// Phone.change = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;我可以改变世界&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Phone.prototype.size = &#x27;5.5inch&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let nokia = new Phone();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(nokia.name);</span></span><br><span class="line"><span class="comment">// // nokia.change();</span></span><br><span class="line"><span class="comment">// console.log(nokia.size);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以改变世界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="built_in">console</span>.log(nokia.name);</span><br><span class="line"><span class="built_in">console</span>.log(Phone.name);</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>对象继承</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//手机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand, price</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以打电话&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能手机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SmartPhone</span>(<span class="params">brand, price, color, size</span>)</span>&#123;</span><br><span class="line">    Phone.call(<span class="built_in">this</span>, brand, price);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置子级构造函数的原型</span></span><br><span class="line">SmartPhone.prototype = <span class="keyword">new</span> Phone;</span><br><span class="line">SmartPhone.prototype.constructor = SmartPhone;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明子类的方法</span></span><br><span class="line">SmartPhone.prototype.photo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以拍照&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmartPhone.prototype.playGame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以玩游戏&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;锤子&#x27;</span>,<span class="number">2499</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;5.5inch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chuizi);</span><br></pre></td></tr></table></figure><blockquote><p>类继承</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">brand, price</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类的成员属性</span></span><br><span class="line">    <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我可以打电话!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">brand, price, color, size</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(brand, price);<span class="comment">// Phone.call(this, brand, price)</span></span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;拍照&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line">    <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我可以进行视频通话&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaomi = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.7inch&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(xiaomi);</span></span><br><span class="line">xiaomi.call();</span><br><span class="line">xiaomi.photo();</span><br><span class="line">xiaomi.playGame();</span><br></pre></td></tr></table></figure><h3 id="get-和-set"><a href="#get-和-set" class="headerlink" title="get 和 set"></a>get 和 set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">price</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;价格属性被读取了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;iloveyou&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">price</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(s.price);</span></span><br><span class="line">s.price = <span class="string">&#x27;free&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    name;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    #age;</span><br><span class="line">    #weight;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age, weight</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.#age = age;</span><br><span class="line">        <span class="built_in">this</span>.#weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">intro</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.#age);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.#weight);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> Person(<span class="string">&#x27;晓红&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;45kg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(girl.name);</span></span><br><span class="line"><span class="comment">// console.log(girl.#age);</span></span><br><span class="line"><span class="comment">// console.log(girl.#weight);</span></span><br><span class="line"></span><br><span class="line">girl.intro();</span><br></pre></td></tr></table></figure><h2 id="对象方法的扩展"><a href="#对象方法的扩展" class="headerlink" title="对象方法的扩展"></a>对象方法的扩展</h2><p>ES6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Object.is 判断两个值是否完全相等 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">120</span>, <span class="number">120</span>));<span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);<span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. Object.assign 对象的合并</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;http://atguigu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">33060</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;atguigu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;iloveyou&#x27;</span>,</span><br><span class="line">    <span class="attr">test2</span>: <span class="string">&#x27;test2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(config1, config2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. Object.setPrototypeOf 设置原型对象  Object.getPrototypeof</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">    <span class="attr">xiaoqu</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(school, cities);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(school));</span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure><p>ES8</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span>,</span><br><span class="line">    <span class="attr">cities</span>:[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>],</span><br><span class="line">    <span class="attr">xueke</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;运维&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象所有的键</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(school));</span><br><span class="line"><span class="comment">//获取对象所有的值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(school));</span><br><span class="line"><span class="comment">//entries</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(school));</span><br><span class="line"><span class="comment">//创建 Map</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(school));</span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">&#x27;cities&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象属性的描述对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(school));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="comment">//设置值</span></span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="comment">//属性特性</span></span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ES10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="comment">// const result = Object.fromEntries([</span></span><br><span class="line"><span class="comment">//     [&#x27;name&#x27;,&#x27;尚硅谷&#x27;],</span></span><br><span class="line"><span class="comment">//     [&#x27;xueke&#x27;, &#x27;Java,大数据,前端,云计算&#x27;]</span></span><br><span class="line"><span class="comment">// ]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="comment">// const m = new Map();</span></span><br><span class="line"><span class="comment">// m.set(&#x27;name&#x27;,&#x27;ATGUIGU&#x27;);</span></span><br><span class="line"><span class="comment">// const result = Object.fromEntries(m);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.entries ES8</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Object</span>.entries(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;尚硅谷&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>可选链操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ?.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">    <span class="keyword">const</span> dbHost = config?.db?.host;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(dbHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(&#123;</span><br><span class="line">    <span class="attr">db</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;192.168.1.100&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;192.168.1.200&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p><p>模块化的好处：</p><ul><li>防止命名冲突；</li><li>代码复用；</li><li>高维护性；</li></ul><p>模块化规范产品：</p><p>ES6 之前的模块化规范有：</p><ul><li><p>CommonJS =&gt; NodeJS、Browserify；</p></li><li><p>AMD =&gt; requireJS；</p></li><li><p>CMD =&gt; seaJS；</p></li></ul><p>ES6 模块化语法：</p><p>模块功能主要由两个命令构成：<strong>export 和 import</strong>；</p><p><code>export</code> 命令用于规定模块的对外接口（导出模块）；</p><p><code>import</code> 命令用于输入其他模块提供的功能（导入模块）；</p><h2 id="暴露"><a href="#暴露" class="headerlink" title="暴露"></a>暴露</h2><blockquote><p>分别暴露</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以教给你开发技能&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>统一暴露</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findJob</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以帮助你找工作!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">export</span> &#123;school, findJob&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>默认暴露</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;ATGUIGU&#x27;</span>,</span><br><span class="line">    <span class="attr">change</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我们可以改变你!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p>通用的导入方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入 m1.js 模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line"> <span class="comment">//引入 m2.js 模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./src/js/m2.js&quot;</span>;</span><br><span class="line"><span class="comment">// //引入 m3.js </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>解构赋值形式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;school, teach&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;school <span class="keyword">as</span> guigu, findJob&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m2.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>简便形式  针对默认暴露</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m3);</span><br></pre></td></tr></table></figure><h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><blockquote><p>app.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块引入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./m3.js&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>index,html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/js/app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入NPM包"><a href="#引入NPM包" class="headerlink" title="引入NPM包"></a>引入NPM包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改背景颜色为粉色</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span>;<span class="comment">// const $ = require(&quot;jquery&quot;);</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="动态import"><a href="#动态import" class="headerlink" title="动态import"></a>动态import</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import * as m1 from &quot;./hello.js&quot;;</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">module</span>.hello();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator接口，所以可以使用<code>扩展运算符</code>和<code>for…of…</code>进行遍历，集合的属性和方法：</p><ul><li>size 返回集合的元素个数；</li><li>add 增加一个新元素，返回当前集合；</li><li>delete 删除元素，返回 boolean 值；</li><li>has 检测集合中是否包含某个元素，返回 boolean 值；</li><li>clear 清空集合，返回 undefined；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个 set</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;大事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>,<span class="string">&#x27;好事儿&#x27;</span>,<span class="string">&#x27;坏事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="comment">// console.log(s2.size);</span></span><br><span class="line"><span class="comment">//添加新的元素</span></span><br><span class="line"><span class="comment">// s2.add(&#x27;喜事儿&#x27;);</span></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="comment">// s2.delete(&#x27;坏事儿&#x27;);</span></span><br><span class="line"><span class="comment">//检测</span></span><br><span class="line"><span class="comment">// console.log(s2.has(&#x27;糟心事&#x27;));</span></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="comment">// s2.clear();</span></span><br><span class="line"><span class="comment">// console.log(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s2)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Set实践</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 数组去重</span></span><br><span class="line"><span class="comment">// Set是一个对象，扩展运算符可以拆分数组或对象</span></span><br><span class="line"><span class="comment">// let result = [...new Set(arr)];</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"><span class="comment">//2. 交集</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// let result = [...new Set(arr)].filter(item =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     let s2 = new Set(arr2);// 4 5 6</span></span><br><span class="line"><span class="comment">//     if(s2.has(item))&#123;</span></span><br><span class="line"><span class="comment">//         return true;</span></span><br><span class="line"><span class="comment">//     &#125;else&#123;</span></span><br><span class="line"><span class="comment">//         return false;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// let result = [...new Set(arr)].filter(item =&gt; new Set(arr2).has(item));</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 并集</span></span><br><span class="line"><span class="comment">// let union = [...new Set([...arr, ...arr2])];</span></span><br><span class="line"><span class="comment">// console.log(union);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 差集</span></span><br><span class="line"><span class="keyword">let</span> diff = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(item)));</span><br><span class="line"><span class="built_in">console</span>.log(diff);</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。</p><p>但是“键”的范围不限于字符串，<strong>各种类型的值（包括对象）都可以当作键</strong>。</p><p>Map 也实现了iterator 接口，所以可以使用<code>扩展运算符</code>和<code>for…of…</code>进行遍历；</p><p><strong>Map 的属性和方法：</strong></p><ul><li>size 返回 Map 的元素个数；</li><li>set 增加一个新元素，返回当前 Map；</li><li>get 返回键名对象的键值；</li><li>has 检测 Map 中是否包含某个元素，返回 boolean 值；</li><li>clear 清空集合，返回 undefined；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明 Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">m.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line">m.set(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以改变你!!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">school</span> : <span class="string">&#x27;ATGUIGU&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">m.set(key, [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//size</span></span><br><span class="line"><span class="comment">// console.log(m.size);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">// m.delete(&#x27;name&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="comment">// console.log(m.get(&#x27;change&#x27;));</span></span><br><span class="line"><span class="comment">// console.log(m.get(key));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="comment">// m.clear();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(m);</span></span><br></pre></td></tr></table></figure><h1 id="正则扩展"><a href="#正则扩展" class="headerlink" title="正则扩展"></a>正则扩展</h1><h2 id="命名捕获分组"><a href="#命名捕获分组" class="headerlink" title="命名捕获分组"></a>命名捕获分组</h2><p>ES9 允许命名捕获组使用符号<code>?</code>,这样获取捕获结果可读性更强；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个字符串</span></span><br><span class="line"><span class="comment">// let str = &#x27;&lt;a href=&quot;http://www.atguigu.com&quot;&gt;尚硅谷&lt;/a&gt;&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //提取 url 与 『标签文本』</span></span><br><span class="line"><span class="comment">// const reg = /&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //执行</span></span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"><span class="comment">// // console.log(result[1]);</span></span><br><span class="line"><span class="comment">// // console.log(result[2]);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.atguigu.com&quot;&gt;尚硅谷&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//分组命名</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = reg.exec(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.groups.url);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.groups.text);</span><br></pre></td></tr></table></figure><h2 id="反向断言"><a href="#反向断言" class="headerlink" title="反向断言"></a>反向断言</h2><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;JS5211314你知道么555啦啦啦&#x27;</span>;</span><br><span class="line"><span class="comment">//正向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = reg.exec(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(?&lt;=么)\d+/</span>;</span><br><span class="line"><span class="keyword">const</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h2 id="dotAll-模式"><a href="#dotAll-模式" class="headerlink" title="dotAll 模式"></a>dotAll 模式</h2><p>正则表达式中点.匹配除回车外的任何单字符，标记<code>s</code>改变这种行为，允许行终止符出现；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dot  .  元字符  除换行符以外的任意单个字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">//声明正则</span></span><br><span class="line"><span class="comment">// const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="comment">//执行匹配</span></span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span>(result = reg.exec(str))&#123;</span><br><span class="line">    data.push(&#123;<span class="attr">title</span>: result[<span class="number">1</span>], <span class="attr">time</span>: result[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><h1 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h1><p><code>BigInt</code>数据类型的目的是比<code>Number</code>数据类型支持的范围更大的整数值。在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用<code>BigInt</code>，整数溢出将不再是问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大整形</span></span><br><span class="line"><span class="comment">// let n = 521n;</span></span><br><span class="line"><span class="comment">// console.log(n, typeof(n));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="comment">// let n = 123;</span></span><br><span class="line"><span class="comment">// console.log(BigInt(n));</span></span><br><span class="line"><span class="comment">// console.log(BigInt(1.2));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大数值运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(max + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max) + <span class="built_in">BigInt</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max) + <span class="built_in">BigInt</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h1 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h1><p>全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值，类似于全局对象（global object）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6-的环境配置&quot;&gt;&lt;a href=&quot;#ES6-的环境配置&quot; class=&quot;headerlink&quot; title=&quot;ES6 的环境配置&quot;&gt;&lt;/a&gt;ES6 的环境配置&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://lesliewaong.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://lesliewaong.top/posts/65940d5a.html"/>
    <id>https://lesliewaong.top/posts/65940d5a.html</id>
    <published>2021-07-20T08:46:47.000Z</published>
    <updated>2021-12-04T06:53:29.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h2><p>AJAX（Asynchronous JavaScritpt and XML），异步的 JavaScript 和 XML。AJAX 不是一种新的编程语言，是使用 <code>XMLHttpRequest</code> 对象与服务器通信的一种技术。AJAX 最主要的特性就是可以在<strong>不刷新页面</strong>的情况下与服务器通信（异步），交换信息或更新页面。</p><h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><p>XML（Extensible Markup Language） ，指可扩展标记语言，被设计用来传输和存储数据。</p><p>比如说我有一个学生数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = “张三” ; age = 18 ; gender = “男” ;</span><br></pre></td></tr></table></figure><p>用 XML 表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，用来向网页中呈现数据的；而 XML 中没有预定义标签，通过自定义标签表示一些数据，用来传输和存储。</p><p>最开始 AJAX 进行数据交互时，所使用的格式是 XML，现在已经被 JSON 取代了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">18</span>,<span class="attr">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>JSON 格式更加简洁，并且提供了强大的 API，灵活度远胜于 XML。</p><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><h3 id="AJAX的优点"><a href="#AJAX的优点" class="headerlink" title="AJAX的优点"></a>AJAX的优点</h3><ol><li>可以无刷新页面与服务端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ol><h3 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h3><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>SEO不友好（爬虫获取不到信息）</li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，规定了浏览器和万维服务器之间互相通信的规则。</p><h3 id="请求交互过程"><a href="#请求交互过程" class="headerlink" title="请求交互过程"></a>请求交互过程</h3><p><a href="https://imgtu.com/i/owdIkd"><img src="https://s4.ax1x.com/2021/12/04/owdIkd.png" alt="owdIkd.png"></a></p><ol><li>前后应用从浏览器端向服务器发送 <strong>HTTP 请求(请求报文)</strong></li><li>服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回 <strong>HTTP 响应（响应报文）</strong></li><li>浏览器端接收到响应, 解析显示响应体/调用监视回调</li></ol><h3 id="查看-HTTP-请求"><a href="#查看-HTTP-请求" class="headerlink" title="查看 HTTP 请求"></a>查看 HTTP 请求</h3><p>在浏览器中可以查看 http 请求信息，以下以 Chrome 为例。</p><p>按 F12 可以打开开发者工具界面，可以查看发送的 HTTP 请求的相关信息。</p><p><a href="https://imgtu.com/i/owdHpt"><img src="https://s4.ax1x.com/2021/12/04/owdHpt.png" alt="owdHpt.png"></a></p><h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><p>请求报文包括了四部分，<code>请求行</code>、<code>请求头</code>、<code>空行</code>、<code>请求体</code>。</p><ul><li><strong>请求行</strong></li></ul><p>请求行包括了三部分，<code>请求类型（GET、POST...）</code>、<code>URL 路径</code>、<code>HTTP 协议的版本（HTTP/1.1）</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /product_detail?id=2 HTTP/1.1</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdv7Q"><img src="https://s4.ax1x.com/2021/12/04/owdv7Q.png" alt="owdv7Q.png"></a></p><ul><li><strong>请求头</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host: baidu.com</span><br><span class="line">Cookie: name=baidu</span><br><span class="line">Content-type: applicatiion/x-www-form-urlencoded</span><br><span class="line">User-Agent: Chrome 83</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdq6f"><img src="https://s4.ax1x.com/2021/12/04/owdq6f.png" alt="owdq6f.png"></a></p><ul><li><strong>空行</strong></li></ul><p>空行是固定的，必须得有。</p><ul><li><strong>请求体</strong></li></ul><p>请求体内容可以有也可以没有，如果是 GET 请求，请求体则为空，如果是 POST 请求，那么请求体可以不为空。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=admin</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdotA"><img src="https://s4.ax1x.com/2021/12/04/owdotA.png" alt="owdotA.png"></a></p><h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><p>响应报文和请求报文一样，也包括四部分，<code>响应行</code>、<code>响应头</code>、<code>空行</code>、<code>响应体</code>。</p><ul><li><strong>响应行</strong></li></ul><p>响应行包括三部分，<code>HTTP 版本</code>、<code>响应状态码（200）</code>、<code>响应状态字符串（OK）</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdTfI"><img src="https://s4.ax1x.com/2021/12/04/owdTfI.png" alt="owdTfI.png"></a></p><ul><li><strong>响应头</strong></li></ul><p>格式和请求头一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-type: text/html;charset=utf-8</span><br><span class="line">Content-length: 2048</span><br><span class="line">Content-encoding: gzip</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdb1P"><img src="https://s4.ax1x.com/2021/12/04/owdb1P.png" alt="owdb1P.png"></a></p><ul><li><strong>空行</strong></li><li><strong>响应体</strong></li></ul><p>响应体可以是 html 文档，也可以是其它类型的。</p><p><a href="https://imgtu.com/i/owdj0g"><img src="https://s4.ax1x.com/2021/12/04/owdj0g.png" alt="owdj0g.png"></a></p><h3 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h3><p><code>200 OK</code> 请求成功。一般用于GET 与POST 请求。</p><p><code>201 Created</code> 已创建。成功请求并创建了新的资源。</p><p><code>401 Unauthorized</code> 未授权/请求要求用户的身份认证。</p><p><code>404 Not Found</code> 服务器无法根据客户端的请求找到资源。</p><p><code>500 Internal Server Error</code> 服务器内部错误，无法完成请求。</p><p>更多状态码可以参考[《HTTP 状态码》(opens new window)](<a href="https://tumiblog.top/blogs/%E6%B5%8F%E8%A7%88%E5%99%A8/HTTP">https://tumiblog.top/blogs/浏览器/HTTP</a> 状态码.html#常见状态码)</p><h3 id="响应头信息"><a href="#响应头信息" class="headerlink" title="响应头信息"></a>响应头信息</h3><table><thead><tr><th><strong>响应头</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>Content-Length</td><td>请求的内容长度</td><td>Content-Length: 348</td></tr><tr><td>Content-Type</td><td>表示文档属于什么 MIME 类型</td><td>Content-Type: application/x-www-form-urlencoded</td></tr><tr><td>Connection</td><td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td><td>Connection: close</td></tr><tr><td>Content-Encoding</td><td>web服务器支持的返回内容压缩编码类型。</td><td>Content-Encoding: gzip</td></tr><tr><td>Date</td><td>请求发送的日期和时间</td><td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td></tr><tr><td>ETag</td><td>请求变量的实体标签的当前值</td><td>ETag: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>Server</td><td>web 服务器软件名称</td><td>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td></tr><tr><td>Transfer-Encoding</td><td>文件传输编码</td><td>Transfer-Encoding:chunked</td></tr><tr><td>Vary</td><td>告诉下游代理是使用缓存响应还是从原始服务器请求</td><td>Vary: *</td></tr></tbody></table><h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>进入Node.js官网](<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>)</p><p>按照自己的机器选择对应的版本下载，我是windous 64位</p><h2 id="Express基本使用"><a href="#Express基本使用" class="headerlink" title="Express基本使用"></a>Express基本使用</h2><p>Express：基于 <a href="https://nodejs.org/en/">Node.js</a> 平台，快速、开放、极简的 Web 开发框架</p><p>nodemon 是一个工具，它通过在检测到目录中的文件更改时自动重新启动节点应用程序来帮助开发基于 node.js 的应用程序。</p><blockquote><p>注意：当前文件夹不能有中文</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br><span class="line">npm i express</span><br><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/h3J0te"><img src="https://z3.ax1x.com/2021/08/28/h3J0te.png" alt="h3J0te.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应</span></span><br><span class="line">    response.send(<span class="string">&#x27;HELLO EXPRESS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>启动服务：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nodemon express基本使用.js</span><br><span class="line">浏览器：127.0.0.1:8000</span><br></pre></td></tr></table></figure><p><strong>报错：</strong></p><p><a href="https://imgtu.com/i/h3Y2vR"><img src="https://z3.ax1x.com/2021/08/28/h3Y2vR.png" alt="h3Y2vR.png"></a></p><p><strong>解决方法：</strong></p><p>以<strong>管理员身份</strong>打开Windows PowerShell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/h3YOKI"><img src="https://z3.ax1x.com/2021/08/28/h3YOKI.png" alt="h3YOKI.png"></a></p><h1 id="原生-Ajax"><a href="#原生-Ajax" class="headerlink" title="原生 Ajax"></a>原生 Ajax</h1><h2 id="XHR-简介"><a href="#XHR-简介" class="headerlink" title="XHR 简介"></a>XHR 简介</h2><p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX </a>编程中被大量使用。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>通过 <code>XMLHttpRequest</code> 构造函数可以初始化一个 XMLHttpRequest 实例对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建实例</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.初始化一个请求（请求类型和 URL）</span></span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.发送请求</span></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定事件，处理服务器端返回结果</span></span><br><span class="line">xhr.onreadystateChange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断当前服务端返回了所有结果</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断响应成功时（2 开头的状态都是成功的）</span></span><br><span class="line">     <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">       <span class="comment">// 处理结果</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>onreadystatechange</td><td>接受一个回调函数作为值，当 readystate 属性发生改变时调用函数。</td></tr><tr><td>readyState</td><td>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</td></tr><tr><td>status</td><td>返回请求的响应状态（例如，”200”、”404”）。</td></tr><tr><td>statusText</td><td>返回响应状态字符串（例如，”OK”、”Not Found”）。</td></tr><tr><td>response</td><td>返回整个响应体，具体是哪种类型取决于 responseType 属性。</td></tr><tr><td>responseText</td><td>只能返回”text”类型的响应。</td></tr><tr><td>responseType</td><td>返回响应数据的类型。它允许我们手动设置返回数据的类型。如果我们将它设置为一个空字符串，它将使用默认的”text”类型。</td></tr><tr><td>timeout</td><td>表示该请求的最大请求时间（毫秒），若超出该时间，请求会自动终止。</td></tr><tr><td>ontimeout</td><td>接受一个回调函数作为值，当请求超时时调用函数。</td></tr><tr><td>onerror</td><td>接受一个回调函数作为值，当请求遭遇错误时调用函数。</td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>open(method,url,async)</td><td>规定请求的类型、URL 以及是否异步处理请求。 method：请求的类型；GET 或 POSTurl：文件在服务器上的位置async：true（异步）或 false（同步）</td></tr><tr><td>send(string)</td><td>将请求发送到服务器。 string：设置请求体，仅用于 POST 请求</td></tr><tr><td>setRequestHeader(header,value)</td><td>向请求添加 HTTP 头。 header: 规定头的名称value: 规定头的值</td></tr><tr><td>getAllResponseHeaders</td><td>以字符串的形式返回所有响应头数据，如果没有收到响应，则返回 null。</td></tr><tr><td>abort</td><td>如果请求已被发出，则立刻中止请求。并将请求的 status 置为 0。</td></tr></tbody></table><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><table><thead><tr><th><strong>事件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>error</td><td>当 request 遭遇错误时触发，也可以使用 <code>onerror</code> 属性。</td></tr><tr><td>timeout</td><td>在预设时间内没有接收到响应时触发，也可以使用 <code>ontimeout</code> 属性。</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.addEventListener(<span class="string">&#x27;error&#x27;</span>, handleEvent);</span><br><span class="line">xhr.addEventListener(<span class="string">&#x27;timeout&#x27;</span>, handleEvent);</span><br></pre></td></tr></table></figure><h2 id="readyState-状态码"><a href="#readyState-状态码" class="headerlink" title="readyState 状态码"></a><code>readyState</code> 状态码</h2><table><thead><tr><th><strong>值</strong></th><th><strong>状态</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td>3</td><td>LOADING</td><td>下载中； <code>responseText</code> 属性已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>下载操作已完成。</td></tr></tbody></table><h2 id="GET-设置请求参数"><a href="#GET-设置请求参数" class="headerlink" title="GET 设置请求参数"></a>GET 设置请求参数</h2><p>例如 <code>https://www.baidu.com/s?wd=HTTP</code>，问号（?）后面的就是请求参数。可以通过 <code>open</code> 方法设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求参数</span></span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=300&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdXnS"><img src="https://s4.ax1x.com/2021/12/04/owdXnS.png" alt="owdXnS.png"></a></p><h2 id="POST-设置请求体"><a href="#POST-设置请求体" class="headerlink" title="POST 设置请求体"></a>POST 设置请求体</h2><p>POST 请求体需要在 <code>send</code> 方法中设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求体</span></span><br><span class="line">xhr.send(<span class="string">&#x27;a=100&amp;b=200&#x27;</span>)</span><br></pre></td></tr></table></figure><p>请求体可以是任意格式，只要服务器能够处理。</p><p><a href="https://imgtu.com/i/owdLX8"><img src="https://s4.ax1x.com/2021/12/04/owdLX8.png" alt="owdLX8.png"></a></p><h2 id="设置请求头信息"><a href="#设置请求头信息" class="headerlink" title="设置请求头信息"></a>设置请求头信息</h2><p>通过 <code>setRequestHeader</code> 方法设置请求头信息，该方法接收两个参数，第一个参数是属性的名称，第二个参数是属性的值。必须在 <code>open()</code> 之后、<code>send()</code> 之前调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/owdzkj"><img src="https://s4.ax1x.com/2021/12/04/owdzkj.png" alt="owdzkj.png"></a></p><p>注意：自定义一些 header 属性进行跨域请求时，可能会遇到”<strong>not allowed by Access-Control-Allow-Headers in preflight response</strong>“，你可能需要在你的服务端设置”Access-Control-Allow-Headers”。</p><h2 id="服务端响应-JSON-数据"><a href="#服务端响应-JSON-数据" class="headerlink" title="服务端响应 JSON 数据"></a>服务端响应 JSON 数据</h2><p>node 的 <code>send</code> 方法只能发送字符串或者 buffer 类型的数据，在实际应用中，服务器响应的绝大多数情况都是 JSON 格式的数据，所以要对响应的数据做一个处理。</p><p>第一种方式可以使用 <code>JSON.parse</code> 方法进行手动转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:8000/json-server&quot;</span>)</span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 JSON 转换成对象</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(xhr.response)</span><br><span class="line">        <span class="built_in">console</span>.log(data) <span class="comment">// &#123;name: &quot;zs&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法可以通过 <code>XMLHttpRequest.responseType</code> 属性设置响应类型，如果值为 <code>&#39;json&#39;</code> 将会自动进行转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应类型</span></span><br><span class="line">xhr.responseType = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:8000/json-server&quot;</span>)</span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.response) <span class="comment">// &#123;name: &quot;zs&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IE-缓存问题"><a href="#IE-缓存问题" class="headerlink" title="IE 缓存问题"></a>IE 缓存问题</h2><p>IE 浏览器会对同一个 ajax 请求结果做一个缓存，这样会导致重新请求时，浏览器依然使用的是缓存内容。</p><p>既然是对同一个 ajax 请求才会缓存，那就发送不同的请求就能解决这个问题了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/ie?t=&quot;</span> + <span class="built_in">Date</span>.now())</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p>在请求 URL 后面加上一个动态参数就可以了。</p><h2 id="请求超时与异常处理"><a href="#请求超时与异常处理" class="headerlink" title="请求超时与异常处理"></a>请求超时与异常处理</h2><p>我们不能保证服务端永远能够及时快速响应请求，为了给用户友好地反馈信息，需要设置请求超时的处理和请求异常时的处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 超时设置 2s</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span></span><br><span class="line"><span class="comment">// 超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;网络异常，请稍后重试！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;你的网络似乎出了一些问题！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/delay&quot;</span>)</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p>请求的状态为 canceled 时，表示请求已经取消了，状态码为 0。</p><p><a href="https://imgtu.com/i/owwSts"><img src="https://s4.ax1x.com/2021/12/04/owwSts.png" alt="owwSts.png"></a></p><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><p>在请求的过程中，当结果还没有响应时，我们可以使用 <code>abort</code> 方法手动取消这个请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/delay&quot;</span>)</span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">  <span class="comment">// 取消请求</span></span><br><span class="line">    xhr.abort() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求重复问题"><a href="#请求重复问题" class="headerlink" title="请求重复问题"></a>请求重复问题</h2><p>如果用户频繁去发送相同请求，服务器的压力会很大。我们可以在用户发送请求的时候，判断是否发送过相同的请求，如果有，则可以取消请求并重新发送一个新的请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来存放 XMLHttpRequest 实例</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 标识变量，是否发送请求</span></span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果已经发送了则取消请求</span></span><br><span class="line">  <span class="keyword">if</span> (isSending) xhr.abort()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 当实例被创建时，表示正在发送请求</span></span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    <span class="comment">// 此时更改标识变量</span></span><br><span class="line">  isSending = <span class="literal">true</span></span><br><span class="line">  xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/delay&quot;</span>)</span><br><span class="line">  xhr.send()</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="comment">// 当请求操作完成之后，还原标识变量</span></span><br><span class="line">      isSending = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="jQuery-中的-Ajax"><a href="#jQuery-中的-Ajax" class="headerlink" title="jQuery 中的 Ajax"></a>jQuery 中的 Ajax</h1><h2 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h2><p>通过 <code>$.get()</code> 方法发送请求，以取代复杂的 <code>$.ajax()</code> 方法。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 <code>$.ajax()</code>。</p><p><code>get()</code> 接受四个参数：</p><ul><li><code>url</code>：必需，规定需要请求的 URL。</li><li><code>data</code>：可选，规定连同请求发送到服务器的数据。</li><li><code>success(response,status,xhr)</code>：可选。规定请求成功时的回调函数。</li><li><ul><li>response - 包含来自请求的结果数据</li><li>status - 包含请求的状态（”success”、”notmodified”、”error”、”timeout”、”parsererror”）</li><li>xhr - 包含 XMLHttpRequest 对象</li></ul></li><li><code>dataType</code>：可选。规定预计的服务器响应的数据类型。默认地，jQuery 将智能判断。</li><li><ul><li>“json” - 以 JSON 运行响应，并以 JavaScript 对象返回</li><li>“jsonp” - 使用 JSONP 加载一个 JSON 块，将添加一个 “?callback=?” 到 URL 来规定回调</li></ul></li></ul><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;http://localhost:8000/jquery-server&quot;</span>,&#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">response, status, xhr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello,<span class="subst">$&#123;response.name&#125;</span>`</span>)</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>jQuery 1.12 中 <code>$.get()</code> 和 <code>$.post()</code> 都支持对象参数，具体的参数可以参考 <code>$.ajax()</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(&#123;</span><br><span class="line">  url: &quot;/example&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><p>通过 <code>$.post()</code> 方法发送 POST 请求，以取代复杂的 <code>$.ajax()</code> 方法。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 <code>$.ajax()</code>。</p><p><code>$.post()</code> 方法与 <code>$.get()</code> 方法接受的参数一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">&quot;http://localhost:8000/jquery-server&quot;</span>,</span><br><span class="line">    $(<span class="string">&quot;#testform&quot;</span>).serialize(),</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">response, status, xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上述代码中，<code>serialize()</code> 方法可以将表单数据序列化。</p><h2 id="ajax-方法"><a href="#ajax-方法" class="headerlink" title="$.ajax() 方法"></a>$.ajax() 方法</h2><p>通用方法 <code>ajax</code> 接受一个键值对集合（对象）作为参数，所有选项（键）都是可选的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://loacalhost:8000/jquery-server&#x27;</span>,</span><br><span class="line">  <span class="comment">// 参数</span></span><br><span class="line">  <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">  <span class="comment">// 请求类型</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="comment">// 响应类型</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="comment">// 成功的回调</span></span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 超时时间</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="comment">// 失败的回调</span></span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 头信息</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多选项可以查看<a href="https://api.jquery.com/jQuery.ajax/">官方文档</a>或者<a href="https://jquery.cuishifeng.cn/jQuery.Ajax.html">中文文档</a></p><h2 id="getJSON-方法"><a href="#getJSON-方法" class="headerlink" title="$.getJSON() 方法"></a>$.getJSON() 方法</h2><p><code>$.getJSON()</code> 用于向服务器发送 GET 请求，获取 JSON 格式数据。是 <code>$.get()</code> 方法第四个参数为 “json” 的简写方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getJSON: <span class="function"><span class="keyword">function</span>(<span class="params"> url, data, callback </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> jQuery.get( url, data, callback, <span class="string">&quot;json&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Axios发送AJAX请求"><a href="#Axios发送AJAX请求" class="headerlink" title="Axios发送AJAX请求"></a>Axios发送AJAX请求</h1><blockquote><p>axios.get(url,data,params)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置 baseURL</span></span><br><span class="line">  axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//GET 请求</span></span><br><span class="line">    axios.get(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">//url 参数</span></span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">vip</span>: <span class="number">7</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//请求头信息</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>axios.post(url,data,params)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//配置 baseURL</span></span><br><span class="line">   axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;  </span><br><span class="line">btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     axios.post(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">       <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">       <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       <span class="comment">//url </span></span><br><span class="line">       <span class="attr">params</span>: &#123;</span><br><span class="line">         <span class="attr">id</span>: <span class="number">200</span>,</span><br><span class="line">         <span class="attr">vip</span>: <span class="number">9</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//请求头参数</span></span><br><span class="line">       <span class="attr">headers</span>: &#123;</span><br><span class="line">         <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">         <span class="attr">weight</span>: <span class="number">180</span>,</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>axios({})</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//配置 baseURL</span></span><br><span class="line">   axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line">btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     axios(&#123;</span><br><span class="line">       <span class="comment">//请求方法</span></span><br><span class="line">       <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">       <span class="comment">//url</span></span><br><span class="line">       <span class="attr">url</span>: <span class="string">&#x27;/axios-server&#x27;</span>,</span><br><span class="line">       <span class="comment">//url参数</span></span><br><span class="line">       <span class="attr">params</span>: &#123;</span><br><span class="line">         <span class="attr">vip</span>: <span class="number">10</span>,</span><br><span class="line">         <span class="attr">level</span>: <span class="number">30</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//头信息,此部分如果使用自定义的头信息,需要服务端进行相应修改,正常不设置</span></span><br><span class="line">       <span class="attr">headers</span>: &#123;</span><br><span class="line">         <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="attr">b</span>: <span class="number">200</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//请求体参数</span></span><br><span class="line">       <span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">         <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">//响应状态码</span></span><br><span class="line">       <span class="built_in">console</span>.log(response.status);</span><br><span class="line">       <span class="comment">//响应状态字符串</span></span><br><span class="line">       <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">       <span class="comment">//响应头信息</span></span><br><span class="line">       <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">       <span class="comment">//响应体</span></span><br><span class="line">       <span class="built_in">console</span>.log(response.data);</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="Fetch发送AJAX请求"><a href="#Fetch发送AJAX请求" class="headerlink" title="Fetch发送AJAX请求"></a>Fetch发送AJAX请求</h1><blockquote><p>代码示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fetch(<span class="string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">//请求方法</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="comment">//请求头</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//请求体</span></span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;username=admin&amp;password=admin&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// return response.text();</span></span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="跨域与解决"><a href="#跨域与解决" class="headerlink" title="跨域与解决"></a>跨域与解决</h1><h2 id="什么是跨越？"><a href="#什么是跨越？" class="headerlink" title="什么是跨越？"></a>什么是跨越？</h2><ul><li>一个网页向另一个不同域名/不同协议/不同端口的网页请求资源，这就是跨域。</li><li>跨域原因产生：在当前域名请求网站中，默认不允许通过ajax请求发送其他域名。</li></ul><h2 id="为什么会产生跨域请求？"><a href="#为什么会产生跨域请求？" class="headerlink" title="为什么会产生跨域请求？"></a>为什么会产生跨域请求？</h2><ul><li>因为浏览器使用了同源策略</li></ul><h2 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h2><ul><li>同源策略是Netscape提出的一个著名的安全策略，现在所有支持JavaScript的浏览器都会使用这个策略。同源策略是浏览器最核心也最基本的安全功能，如果缺少同源策略，浏览器的正常功能可能受到影响。可以说web是构建在同源策略的基础之上的，浏览器只是针对同源策略的一种实现。</li><li>同源： 协议、域名、端口号 必须完全相同。 <code>违背同源策略就是跨域</code>。</li></ul><h2 id="为什么浏览器要使用同源策略？"><a href="#为什么浏览器要使用同源策略？" class="headerlink" title="为什么浏览器要使用同源策略？"></a>为什么浏览器要使用同源策略？</h2><p>是为了保证用户的信息安全，防止恶意网站窃取数据，如果网页之间不满足同源要求，将不能:</p><ul><li><p>共享Cookie、LocalStorage、IndexDB</p></li><li><p>获取DOM</p></li><li><p>AJAX请求不能发送</p></li></ul><h2 id="跨域的五个解决方式"><a href="#跨域的五个解决方式" class="headerlink" title="跨域的五个解决方式:"></a>跨域的五个解决方式:</h2><p> 1、前端使用JSONP （不推荐使用）</p><p> 2、后台Http请求转发</p><p> 3、后台配置同源Cors （推荐）</p><p> 4、使用SpringCloud网关</p><p> 5、使用nginx做转发 (推荐)</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><blockquote><p>JSONP 是什么?</p></blockquote><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 <code>get</code> 请求。</p><blockquote><p>JSONP 怎么工作的？</p></blockquote><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。 JSONP 就是利用 <code>script 标签的跨域能力</code>来发送请求的。</p><h4 id="JSONP的使用"><a href="#JSONP的使用" class="headerlink" title="JSONP的使用"></a>JSONP的使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 动态的创建一个 script 标签------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line"><span class="comment">//2. 设置 script 的 src， 设置回调函数</span></span><br><span class="line">script.src = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(data.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3. 将 script 添加到 body 中</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 服务器中路由的处理------------------------------------------------------</span></span><br><span class="line">router.get(<span class="string">&quot;/testAJAX&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> callback = req.query.callback;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">ame</span>: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.send(callback + <span class="string">&quot;(&quot;</span> + <span class="built_in">JSON</span>.stringify(obj) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="jQuery发送jsonP请求"><a href="#jQuery发送jsonP请求" class="headerlink" title="jQuery发送jsonP请求"></a>jQuery发送jsonP请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端代码-----------------------------------------------------------------------------------</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.getJSON(<span class="string">&#x27;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#result&#x27;</span>).html(<span class="string">`</span></span><br><span class="line"><span class="string">                名称: <span class="subst">$&#123;data.name&#125;</span>&lt;br&gt;</span></span><br><span class="line"><span class="string">                校区: <span class="subst">$&#123;data.city&#125;</span></span></span><br><span class="line"><span class="string">            `</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端代码-----------------------------------------------------------</span></span><br><span class="line">app.all(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//将数据转化为字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">  <span class="comment">//接收 callback 参数</span></span><br><span class="line">  <span class="keyword">let</span> cb = request.query.callback;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回结果</span></span><br><span class="line">  response.end(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">CORS文档链接</a></p></blockquote><p><strong>CORS是什么?</strong></p><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get和post请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p><p><strong>CORS是怎么工作的?</strong></p><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头</span></span><br><span class="line">    <span class="comment">//响应首部中可以携带一个 Access-Control-Allow-Origin 字段</span></span><br><span class="line">  response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="comment">//Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字</span></span><br><span class="line">  response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//Access-Control-Allow-Methods 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP</span></span><br><span class="line">  response.setHeader(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">  response.send(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;Ajax简介&quot;&gt;&lt;a href=&quot;#Ajax简介&quot; class=&quot;headerlink&quot; title=&quot;Ajax简介&quot;&gt;&lt;/a&gt;A</summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Ajax" scheme="https://lesliewaong.top/tags/Ajax/"/>
    
    <category term="Axios" scheme="https://lesliewaong.top/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶</title>
    <link href="https://lesliewaong.top/posts/7cb809c.html"/>
    <id>https://lesliewaong.top/posts/7cb809c.html</id>
    <published>2021-07-15T09:57:47.000Z</published>
    <updated>2021-12-04T06:53:29.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javaScript基础总结"><a href="#javaScript基础总结" class="headerlink" title="javaScript基础总结"></a>javaScript基础总结</h1><h2 id="数据类型相关知识点"><a href="#数据类型相关知识点" class="headerlink" title="数据类型相关知识点"></a>数据类型相关知识点</h2><h3 id="基本-值-类型"><a href="#基本-值-类型" class="headerlink" title="基本(值)类型"></a>基本(值)类型</h3><ol><li>String: 任意字符串</li><li>Number: 任意的数字</li><li>boolean: true/false</li><li>undefined: undefined</li><li>null: null  –&gt;使用<code>typeof</code>时返回<code>object</code></li><li>Symbol(ECMAScript2016新增)。 –&gt;Symbol 是基本数据类型的一种，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 对象是 Symbol原始值的封装 。</li><li>Bigint –&gt;<strong>BigInt</strong> 是一种数字类型的数据，它可以表示任意精度格式的整数。</li></ol><p>加上下方的 [ 对象 ] 类型,目前 javaScript 有八种数据类型</p><h3 id="对象-引用-类型"><a href="#对象-引用-类型" class="headerlink" title="对象(引用)类型"></a>对象(引用)类型</h3><ol><li>Object: 任意对象</li><li>Function: 一种特别的<code>对象</code>(可以执行)  –内部包含可运行的代码</li><li>Array: 一种特别的<code>对象</code>(<code>key</code>为数值下标属性, 内部数据是有序的)</li></ol><h3 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title=" typeof"></a><em><code> typeof</code></em></h4><p><strong><code>typeof</code></strong> 操作符返回一个<code>字符串</code>，表示未经计算的操作数的类型。</p><ul><li><p>可以判断: undefined/ 数值 / 字符串 / 布尔值 / function</p></li><li><p>不能判断: null与object  object与array</p></li><li><p><code>注意</code>: 运行<code>console.log(typeof undefined)</code>时,得到的的也是一个<code>字符串,同时为小写!!</code>–&gt; <code>&#39;undefined&#39;</code></p></li><li><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof返回数据类型的字符串表达</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="comment">//注意:typeof返回的是字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a, <span class="keyword">typeof</span> a===<span class="string">&#x27;undefined&#x27;</span>,a===<span class="literal">undefined</span> )  <span class="comment">// undefined &#x27;undefined&#x27; true true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="string">&#x27;undefined&#x27;</span>) <span class="comment">//false</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a===<span class="string">&#x27;number&#x27;</span>) <span class="comment">//true</span></span><br><span class="line">a = <span class="string">&#x27;vbnvn&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a===<span class="string">&#x27;string&#x27;</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a===<span class="string">&#x27;String&#x27;</span>) <span class="comment">//false  --&gt;注意,返回的类型为小写</span></span><br><span class="line">a = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a===<span class="string">&#x27;boolean&#x27;</span>) <span class="comment">//true</span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a, a===<span class="literal">null</span>) <span class="comment">// &#x27;object&#x27;  true</span></span><br><span class="line"><span class="keyword">let</span> b=&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b,<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// &#x27;object&#x27; &#x27;object&#x27;  --&gt;所以Typeof不能判断null与object</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="instanceof-判断实例方法"><a href="#instanceof-判断实例方法" class="headerlink" title="instanceof(判断实例方法)"></a><em><code>instanceof</code></em>(判断实例方法)</h4><ul><li><p><code>专门判断对象</code>的具体类型</p></li><li><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p></li><li><p>代码示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 = &#123;</span><br><span class="line">    <span class="attr">b2</span>: [<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="built_in">console</span>.log],</span><br><span class="line"> <span class="comment">//可以简化成 b3:()=&gt;()=&gt; &#x27;zxc&#x27;  --&gt;高阶函数相关知识</span></span><br><span class="line">    <span class="attr">b3</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>  <span class="function">() =&gt;</span>&#123;  <span class="keyword">return</span>   <span class="string">&#x27;zxc&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">/**使用instanceof进行对象判断*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(b1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>, b1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true  false</span></span><br><span class="line">  <span class="built_in">console</span>.log(b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Array</span>, b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true true</span></span><br><span class="line">  <span class="built_in">console</span>.log(b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Function</span>, b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**使用typeof进行对象中某属性的判断*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b2, <span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// &#x27;object&#x27; &#x27;object&#x27;  </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b3===<span class="string">&#x27;function&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b2[<span class="number">2</span>]===<span class="string">&#x27;function&#x27;</span>) <span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**调用对象与数组中某函数示例*/</span></span><br><span class="line">  b1.b2[<span class="number">2</span>](<span class="string">&#x27;调用console.log打印zxc&#x27;</span>)    <span class="comment">//调用console.log打印zxc</span></span><br><span class="line">  <span class="built_in">console</span>.log(b1.b3()()) <span class="comment">// zxc</span></span><br></pre></td></tr></table></figure></li></ul><h4 id=""><a href="#" class="headerlink" title="==="></a><em><code>===</code></em></h4><p>可以判断: undefined, null</p><p>简而言之，在比较两件事情时，<code>双等号将执行类型转换</code>;<code> 三等号将进行相同的比较，而不进行类型转换</code> (如果类型不同, 只是总会返回 false )</p><h3 id="相关问题引出"><a href="#相关问题引出" class="headerlink" title="相关问题引出"></a>相关问题引出</h3><h4 id="undefined与null的区别"><a href="#undefined与null的区别" class="headerlink" title="undefined与null的区别?"></a><em>undefined与null的区别?</em></h4><ul><li><p>undefined代表<strong>定义未赋值</strong></p></li><li><p>nulll<strong>定义并赋值了, 只是值为null</strong></p></li><li><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// undefined</span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="什么时候给变量赋值为null呢"><a href="#什么时候给变量赋值为null呢" class="headerlink" title="什么时候给变量赋值为null呢?"></a><em>什么时候给变量赋值为null呢?</em></h4><ul><li><p>初始赋值, 表明将要赋值为对象,<code>可以用做约定俗成的占位符</code></p></li><li><p>结束前, <code>让对象成为垃圾对象</code>(被垃圾回收器回收)</p></li><li><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//起始,可以用做约定俗成的占位符</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="literal">null</span>  <span class="comment">// 初始赋值为null, 表明将要赋值为对象</span></span><br><span class="line">  <span class="comment">//确定对象就赋值</span></span><br><span class="line">  b = [<span class="string">&#x27;atguigu&#x27;</span>, <span class="number">12</span>]</span><br><span class="line">  <span class="comment">//最后在不使用的时候,将其引用置空,就可以释放b这个对象占用的内存      ---当没有引用指向它的对象称为垃圾对象</span></span><br><span class="line">  b = <span class="literal">null</span> <span class="comment">// 让b指向的对象成为垃圾对象(被垃圾回收器回收) </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="严格区别变量类型与数据类型"><a href="#严格区别变量类型与数据类型" class="headerlink" title="严格区别变量类型与数据类型?"></a><em>严格区别变量类型与数据类型?</em></h4><blockquote><p>js的变量本身是没有类型的, 变量的类型实际上是变量内存中数据的类型</p></blockquote><ul><li>数据的类型<ul><li>基本类型</li><li>对象类型</li></ul></li><li>变量的类型(变量内存值的类型)<ul><li>基本类型: 保存就是<code>基本类型</code>的数据</li><li>引用类型: 保存的是<code>地址值(对象类型)</code></li></ul></li></ul><h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点:"></a>补充知识点:</h3><h4 id="字符串比较-gt-、-lt-以及charCodeAt-方法"><a href="#字符串比较-gt-、-lt-以及charCodeAt-方法" class="headerlink" title="字符串比较*&gt;、&lt;以及charCodeAt()*方法"></a>字符串比较*<code>&gt;</code>、<code>&lt;</code><em>以及</em><code>charCodeAt()</code>*方法</h4><ol><li>Javascript字符串在进行大于(小于)比较时，会根据第一个不同的字符的ascii值码进行比较，当数字(number)与字符串(string)进行比较大小时，会强制的将数字(number)转换成字符串(string)然后再进行比较</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;13&#x27;</span>&gt;<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 输出：false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="string">&#x27;6&#x27;</span>);  <span class="comment">// 输出： false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>&gt;<span class="string">&#x27;ABDC&#x27;</span>) <span class="comment">// 输出： true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">19</span>&gt;<span class="string">&#x27;ssf&#x27;</span>) <span class="comment">// 输出 false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;A&#x27;</span>&gt;<span class="string">&#x27;abcdef&#x27;</span>) <span class="comment">// 输出 false</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ol start="2"><li>手动转换为ascii后相减,用正负数表示大小</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorter=&#123;(a:string,b:string)=&gt; a.charCodeAt()-b.charCodeAt()&#125;</span><br></pre></td></tr></table></figure><h2 id="数据-变量-内存的理解"><a href="#数据-变量-内存的理解" class="headerlink" title="数据,变量, 内存的理解"></a>数据,变量, 内存的理解</h2><h3 id="什么是数据"><a href="#什么是数据" class="headerlink" title="什么是数据?"></a>什么是数据?</h3><ol><li>存储在内存中代表特定信息的’东西’, 本质上是0101…</li><li>数据的特点: <code>可传递</code>, <code>可运算</code>    –&gt;let a=0;b=a 🔜体现可传递</li><li>一切皆数据</li><li>内存中所有操作的目标: 数据</li></ol><ul><li>算术运算</li><li>逻辑运算</li><li>赋值</li><li>运行函数</li></ul><h3 id="什么是内存"><a href="#什么是内存" class="headerlink" title="什么是内存?"></a>什么是内存?</h3><ol><li><p>内存条通电后产生的可储存数据的空间(临时的)</p></li><li><p>内存产生和死亡: 内存条(电路版)==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;断电==&gt;内存空间和数据都消失</p></li><li><p>一块小内存的2个数据</p></li></ol><ul><li>内部存储的数据</li><li>地址值</li></ul><ol start="4"><li>内存分类</li></ol><ul><li>栈: 全局变量/局部变量</li><li>堆: 对象</li></ul><p><a href="https://imgtu.com/i/4pUSC8"><img src="https://z3.ax1x.com/2021/09/12/4pUSC8.png" alt="4pUSC8.png"></a></p><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量?"></a>什么是变量?</h3><ul><li>可变化的量, 由变量名和变量值组成</li><li>每个变量都对应的一块小内存, 变量名用来查找对应的内存, 变量值就是内存中保存的数据</li></ul><p>ps:变量<code>obj.xx</code>–&gt;<code>.</code>相当于拿着地址找到后面对应的内存,所以只有当我变量中存的是地址,才可以用<code>.</code></p><h3 id="内存-数据-变量三者之间的关系"><a href="#内存-数据-变量三者之间的关系" class="headerlink" title="内存,数据,变量三者之间的关系"></a>内存,数据,变量三者之间的关系</h3><ul><li>内存用来存储数据的空间</li><li>变量是内存的标识</li></ul><h3 id="相关问题引出-1"><a href="#相关问题引出-1" class="headerlink" title="相关问题引出"></a>相关问题引出</h3><h4 id="关于赋值和内存的问题"><a href="#关于赋值和内存的问题" class="headerlink" title="关于赋值和内存的问题"></a><em>关于赋值和内存的问题</em></h4><p>let a = xxx, a内存中到底保存的是什么?</p><ul><li>xxx是基本数据, 保存的就是这个数据</li><li>xxx是对象, 保存的是对象的地址值</li><li>xxx是一个变量, 保存的xxx的内存内容(可能是基本数据, 也可能是地址值)</li></ul><h4 id="关于引用变量赋值问题"><a href="#关于引用变量赋值问题" class="headerlink" title="关于引用变量赋值问题"></a><em>关于引用变量赋值问题</em></h4><ul><li><p>2个引用变量指向同一个对象, 通过一个变量修改对象内部数据, 另一个变量看到的是修改之后的数据</p></li><li><p>2个引用变量指向同一个对象, 让其中一个引用变量指向另一个对象, 另一引用变量依然指向前一个对象</p></li><li><p>代码示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="comment">//此时是将a指向的地址值赋值给B,所以B此时也指向&#123;age:12&#125;这个内存</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line"><span class="comment">//此时重新创建了一个内存并让a指向它,所以此处a指向的是&#123;name:&#x27;hong&#x27;&#125;,而b指向仍是刚开始的指向&#123;age:12&#125;</span></span><br><span class="line">a = &#123;<span class="attr">name</span>: <span class="string">&#x27;hong&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//此时a与b指向的内存已经不一样了,所以修改互不影响</span></span><br><span class="line">b.age = <span class="number">14</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age, a.name, a.age) <span class="comment">// 14 hong undefined</span></span><br><span class="line"><span class="comment">//此时其实已经重新创建了一个内存&#123;age:15&#125;,并且将其地址赋值覆盖给a</span></span><br><span class="line"><span class="comment">//实际上传进来的obj也是拿着其key对应的地址值找内存,此时</span></span><br><span class="line"><span class="keyword">const</span> fn2=<span class="function">(<span class="params">obj</span>) =&gt;</span> obj = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line">fn2(a)</span><br><span class="line"><span class="built_in">console</span>.log(a.age) <span class="comment">//15</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="在js调用函数时传递变量参数时-是值传递还是引用传递"><a href="#在js调用函数时传递变量参数时-是值传递还是引用传递" class="headerlink" title="在js调用函数时传递变量参数时, 是值传递还是引用传递"></a><em>在js调用函数时传递变量参数时, 是值传递还是引用传递</em></h4><ul><li><p>理解1: 都是值(基本/地址值)传递</p></li><li><p>所以实际上传进function中的参数也是拿着其存着的地址值找内存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传进来的obj存储的是a中存的地址值,所以obj==a(因为他们地址值一致,指向一致)</span></span><br><span class="line">  <span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">&#x27;wong&#x27;</span>&#125;</span><br><span class="line">  <span class="keyword">const</span> fn2=<span class="function">(<span class="params">obj</span>) =&gt;</span> obj = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line">  fn2(a)</span><br><span class="line">  <span class="built_in">console</span>.log(a.age) <span class="comment">//15</span></span><br></pre></td></tr></table></figure></li><li><p>理解2: 可能是值传递, 也可能是引用传递(地址值)</p></li></ul><h4 id="JS引擎如何管理内存"><a href="#JS引擎如何管理内存" class="headerlink" title="JS引擎如何管理内存?"></a><em>JS引擎如何管理内存?</em></h4><ol><li>内存生命周期</li></ol><ul><li>分配小内存空间, 得到它的使用权</li><li>存储数据, 可以反复进行操作</li><li>释放小内存空间</li></ul><ol start="2"><li>释放内存</li></ol><ul><li>局部变量: 函数执行完自动释放</li><li>对象: 成为垃圾对象==&gt;垃圾回收器回收</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;wong&quot;</span>&#125;</span><br><span class="line"> obj = <span class="literal">undefined</span> ||<span class="literal">null</span>  <span class="comment">//此时,obj没有被释放,但是之前声明的`&#123;name:&quot;wong&quot;&#125;`由于没有人指向它,会在后面你某个时刻被垃圾回收器回收</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123; <span class="keyword">var</span> b = &#123;&#125;&#125;</span><br><span class="line"> fn() <span class="comment">// b是自动释放, b所指向的对象是在后面的某个时刻由垃圾回收器回收</span></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象?"></a><em>什么是对象?</em></h4><ul><li><strong>多个数据</strong>的封装体</li><li>用来保存多个数据的容器</li><li>一个对象代表现实中的一个事物</li></ul><h4 id="为什么要用对象"><a href="#为什么要用对象" class="headerlink" title="为什么要用对象?"></a><em>为什么要用对象?</em></h4><p>统一管理多个数据</p><h4 id="对象的组成"><a href="#对象的组成" class="headerlink" title="对象的组成"></a><em>对象的组成</em></h4><ul><li>属性: 属性名(字符串)和属性值(任意)组成</li><li>方法: 一种特别的属性(属性值是函数)</li></ul><h3 id="如何访问对象内部数据"><a href="#如何访问对象内部数据" class="headerlink" title="如何访问对象内部数据?"></a>如何访问对象内部数据?</h3><blockquote><ul><li><code>.属性名</code>: 编码简单, 有时不能用</li><li><code>[&#39;属性名&#39;]</code>: 编码麻烦, 能通用</li></ul></blockquote><h3 id="什么时候必须使用-39-属性名-39-的方式"><a href="#什么时候必须使用-39-属性名-39-的方式" class="headerlink" title="什么时候必须使用[&#39;属性名&#39;]的方式?"></a>什么时候必须使用<code>[&#39;属性名&#39;]</code>的方式?</h3><ol><li>属性名包含特殊字符: <code>-</code> <code>空格</code></li><li>属性名不确定</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;&#125;</span><br><span class="line"><span class="comment">//1. 给p对象添加一个属性: content-type: text/json</span></span><br><span class="line"><span class="comment">// p.content-type = &#x27;text/json&#x27; //不能用</span></span><br><span class="line">p[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/json&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(p[<span class="string">&#x27;content-type&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 属性名不确定</span></span><br><span class="line"><span class="keyword">var</span> propName = <span class="string">&#x27;myAge&#x27;</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">18</span></span><br><span class="line"><span class="comment">// p.propName = value //不能用</span></span><br><span class="line">p[propName] = value</span><br><span class="line"><span class="built_in">console</span>.log(p[propName])</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><h4 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a><em>什么是函数</em></h4><ul><li>实现特定功能的n条语句的封装体</li><li>只有函数是可以执行的, 其它类型的数据不能执行</li></ul><h4 id="为什么要用函数"><a href="#为什么要用函数" class="headerlink" title="为什么要用函数?"></a><em>为什么要用函数?</em></h4><ul><li>提高代码复用</li><li>便于阅读交流</li></ul><h4 id="如何定义函数"><a href="#如何定义函数" class="headerlink" title="如何定义函数?"></a><em>如何定义函数?</em></h4><ul><li>函数声明</li><li>表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;fn1()&#x27;</span> )<span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;f2()&#x27;</span>) &#125;<span class="comment">// 表达式</span></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">()=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;fn2()&#x27;</span>)  <span class="comment">//表达式</span></span><br></pre></td></tr></table></figure><h3 id="如何调用-执行-函数"><a href="#如何调用-执行-函数" class="headerlink" title="如何调用(执行)函数"></a>如何调用(执行)函数</h3><ol><li>test(): 直接调用</li><li>obj.test(): 通过对象调用</li><li>new test(): new调用</li><li><code>test.call/apply(obj)</code>: 临时让test成为obj的方法进行调用</li></ol><p><a href="https://imgtu.com/i/4pdC0s"><img src="https://z3.ax1x.com/2021/09/12/4pdC0s.png" alt="4pdC0s.png"></a></p><ol start="5"><li>代码示例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//此处不能使用箭头函数,因为箭头函数会改变this指向</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.xxx = <span class="string">&#x27;hongjilin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// obj.test2()  不能直接, 根本就没有</span></span><br><span class="line">test2.call(obj)  <span class="comment">// 可以让一个函数成为指定任意对象的方法进行调用</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.xxx)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><h4 id="什么函数才是回调函数"><a href="#什么函数才是回调函数" class="headerlink" title="什么函数才是回调函数?"></a><em>什么函数才是回调函数?</em></h4><ul><li>你定义的</li><li>你没有调</li><li>但最终它执行了(在某个时刻或某个条件下)</li></ul><h4 id="常见的回调函数"><a href="#常见的回调函数" class="headerlink" title="常见的回调函数?"></a><em>常见的回调函数?</em></h4><ul><li>dom事件回调函数 ==&gt;发生事件的dom元素</li><li>定时器回调函数 ===&gt;window</li><li>ajax请求回调函数</li><li>生命周期回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dom事件回调函数</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;alert(<span class="built_in">this</span>.innerHTML)&#125;</span><br><span class="line"><span class="comment">// 定时器回调函数</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   alert(<span class="string">&#x27;到点了&#x27;</span>+<span class="built_in">this</span>)&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="IIFE-自调用函数"><a href="#IIFE-自调用函数" class="headerlink" title="IIFE (自调用函数)"></a>IIFE (自调用函数)</h3><ol><li><p>全称: <code>Immediately-Invoked Function Expression</code> 自调用函数</p></li><li><p>作用:</p><ul><li><p>隐藏实现</p></li><li><p>不会污染外部(一般指全局)命名空间</p></li><li><p>用它来编码js模块</p></li></ul></li><li><p>代码示例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//匿名函数自调用</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + <span class="number">3</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处前方为何要一个`;`--&gt;因为自调用函数外部有一个()包裹,可能与前方以()结尾的代码被一起认为是函数调用</span></span><br><span class="line"><span class="comment">//不加分号可能会被认为这样 console.log(a)(IIFE)</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//不会污染外部(全局)命名空间--&gt;举例</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(++a) &#125; <span class="comment">//声明一个局部函数test</span></span><br><span class="line">    <span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="keyword">return</span> &#123;<span class="attr">test</span>: test&#125; &#125;<span class="comment">// 向外暴露一个全局函数</span></span><br><span class="line">&#125;)()</span><br><span class="line">test ()  <span class="comment">//test is not defined</span></span><br><span class="line">$().test() <span class="comment">// 1. $是一个函数 2. $执行后返回的是一个对象</span></span><br></pre></td></tr></table></figure><h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h3><h4 id="this是什么"><a href="#this是什么" class="headerlink" title="this是什么?"></a><em>this是什么?</em></h4><ul><li>任何函数本质上都是通过某个对象来调用的,如果没有直接指定就是<code>window</code></li><li>所有函数内部都有一个变量<code>this</code></li><li>它的值是<code>调用函数的当前对象</code></li></ul><h4 id="如何确定this的值"><a href="#如何确定this的值" class="headerlink" title="如何确定this的值?"></a><em>如何确定this的值?</em></h4><ul><li>test(): window</li><li>p.test(): p</li><li>new test(): 新创建的对象</li><li>p.call(obj): obj</li></ul><h4 id="代码举例详解"><a href="#代码举例详解" class="headerlink" title="代码举例详解"></a><em>代码举例详解</em></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line"><span class="built_in">this</span>.color = color;</span><br><span class="line"><span class="built_in">this</span>.getColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">this</span>.setColor = <span class="function"><span class="keyword">function</span> (<span class="params">color</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line"> <span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(<span class="string">&quot;red&quot;</span>); <span class="comment">//this是谁? window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;yello&quot;</span>); <span class="comment">//this是谁? p</span></span><br><span class="line"></span><br><span class="line">p.getColor(); <span class="comment">//this是谁? p</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//调用call会改变this指向--&gt;让我的p函数成为`obj`的临时方法进行调用</span></span><br><span class="line">p.setColor.call(obj, <span class="string">&quot;black&quot;</span>); <span class="comment">//this是谁? obj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = p.setColor;</span><br><span class="line">test(); <span class="comment">//this是谁? window  --&gt;因为直接调用了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;  <span class="built_in">console</span>.log(<span class="built_in">this</span>); &#125;</span><br><span class="line">fun2(); <span class="comment">//this是谁? window</span></span><br><span class="line">&#125;</span><br><span class="line">fun1();<span class="comment">//调用fun1</span></span><br></pre></td></tr></table></figure><h2 id="关于语句分号"><a href="#关于语句分号" class="headerlink" title="关于语句分号"></a>关于语句分号</h2><ol><li><strong>js一条语句的后面可以不加分号</strong></li><li>是否加分号是编码风格问题, 没有应该不应该，只有你自己喜欢不喜欢</li><li>在下面2种情况下不加分号会有问题</li></ol><ul><li><code>小括号开头的前一条语句</code></li><li><code>中方括号开头的前一条语句</code></li></ul><ol start="4"><li>解决办法: <code>在行首加分号</code></li><li>强有力的例子: vue.js库</li></ol><h1 id="函数高级"><a href="#函数高级" class="headerlink" title="函数高级"></a>函数高级</h1><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><h3 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 [prototype]"></a>原型 [prototype]</h3><ol><li>函数的<code>prototype</code>属性</li></ol><ul><li><p>每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</p></li><li><p>原型对象中有一个属性constructor, 它指向函数对象</p><p><a href="https://imgtu.com/i/4dRfZq"><img src="https://z3.ax1x.com/2021/09/23/4dRfZq.png" alt="4dRfZq.png"></a></p></li></ul><ol start="2"><li>给原型对象添加属性(<code>一般都是方法</code>)</li></ol><ul><li>作用: 函数的所有实例对象自动拥有原型中的属性(方法)</li></ul><ol start="3"><li>代码示例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype, <span class="keyword">typeof</span> <span class="built_in">Date</span>.prototype)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype)  <span class="comment">// 默认指向一个Object空对象(没有我们的属性)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象中有一个属性constructor, 它指向函数对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.constructor===<span class="built_in">Date</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype.constructor===Fun)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给原型对象添加属性(一般是方法) ===&gt;实例对象可以访问</span></span><br><span class="line">Fun.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;test()&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun()</span><br><span class="line">fun.test()</span><br></pre></td></tr></table></figure><h3 id="显式原型与隐式原型"><a href="#显式原型与隐式原型" class="headerlink" title="显式原型与隐式原型"></a>显式原型与隐式原型</h3><ol><li><p>每个函数function都有一个<code>prototype</code>，即<code>显式</code>原型(属性)</p></li><li><p>每个实例对象都有一个[<code>__ proto __</code>]，可称为<code>隐式</code>原型(属性)</p></li><li><p>==对象的隐式原型的值为其对应构造函数的显式原型的值==</p></li><li><p>内存结构</p><p><a href="https://imgtu.com/i/4dRIiT"><img src="https://z3.ax1x.com/2021/09/23/4dRIiT.png" alt="4dRIiT.png"></a></p></li><li><p>总结:</p></li></ol><ul><li>函数的[<code>prototype</code>]属性: 在定义函数时自动添加的, 默认值是一个<strong>空Object对象</strong></li><li>对象的[<code>__ proto __</code>]属性: 创建对象时自动添加的, <code>默认值为构造函数的prototype属性值</code></li><li>程序员能直接操作显式原型, 但不能直接操作隐式原型(ES6之前)</li></ul><ol start="6"><li>代码示例:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 内部默认执行语句: this.prototype = &#123;&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 1. 每个函数function都有一个prototype，即显式原型属性, 默认指向一个空的Object对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Fn.prototype)</span><br><span class="line"><span class="comment">// 2. 每个实例对象都有一个__proto__，可称为隐式原型</span></span><br><span class="line"><span class="comment">//创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> Fn()  <span class="comment">// 内部默认执行语句: this.__proto__ = Fn.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.__proto__)</span><br><span class="line"><span class="comment">// 3. 对象的隐式原型的值为其对应构造函数的显式原型的值</span></span><br><span class="line"><span class="built_in">console</span>.log(Fn.prototype===fn.__proto__) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//给原型添加方法</span></span><br><span class="line">Fn.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过实例调用原型的方法</span></span><br><span class="line">fn.test()</span><br></pre></td></tr></table></figure><blockquote><p>补充</p></blockquote><p><code>[[prototype]]</code>和<code>__proto__</code>两者表示的意义是一样的，都是表示对象的内部属性，指向该对象的原型。前者是在一些有关资料书籍使用<code>[[prototype]]</code>表示一个对象的原型属性。而<code>__proto__</code>主要在浏览器实现中，使用该标志标识其内部属性。</p><p>但目前浏览器中两者都存在，不知道有什么区别。</p><p><a href="https://imgtu.com/i/4ci0IS"><img src="https://z3.ax1x.com/2021/09/26/4ci0IS.png" alt="4ci0IS.png"></a></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h4 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a><em>原型链</em></h4><ul><li>访问一个对象的属性时，<ul><li><p>先在自身属性中查找，找到返回</p></li><li><p>如果没有, 再沿着[<code>__ proto __</code>]这条链向上查找, 找到返回</p></li><li><p>如果最终没找到, 返回undefined</p><p><a href="https://imgtu.com/i/4dRhd0"><img src="https://z3.ax1x.com/2021/09/23/4dRhd0.png" alt="4dRhd0.png"></a></p></li></ul></li><li>别名: 隐式原型链</li><li>作用: 查找对象的属性(方法) </li></ul><h4 id="构造函数-原型-实例对象的关系-图解"><a href="#构造函数-原型-实例对象的关系-图解" class="headerlink" title="构造函数/原型/实例对象的关系(图解)"></a><em>构造函数/原型/实例对象的关系(图解)</em></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4dRRLn"><img src="https://z3.ax1x.com/2021/09/23/4dRRLn.png" alt="4dRRLn.png"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p> <a href="https://imgtu.com/i/4dR4oV"><img src="https://z3.ax1x.com/2021/09/23/4dR4oV.png" alt="4dR4oV.png"></a></p><p>  ps:所有函数的[<code>__ proto __</code>]都是一样的</p><blockquote><p>完整图解</p></blockquote><p><a href="https://imgtu.com/i/46q4cF"><img src="https://z3.ax1x.com/2021/09/26/46q4cF.png" alt="46q4cF.png"></a></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a><em>补充</em></h4><p><strong>函数的显示原型</strong>指向的对象默认是<strong>空Object实例对象</strong>(但<strong>Object不满足</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Fn.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>所有函数都是Function的实例</strong>(包含<strong>Function</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__===<span class="built_in">Function</span>.prototype)</span><br></pre></td></tr></table></figure><p><strong>Object的原型对象是原型链尽头</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="属性问题"><a href="#属性问题" class="headerlink" title="属性问题"></a><em>属性问题</em></h4><ul><li>读取对象的属性值时: 会自动到原型链中查找</li><li>设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值</li><li>方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上</li><li>代码示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Fn.prototype.a = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">new</span> Fn()</span><br><span class="line"><span class="built_in">console</span>.log(fn1.a, fn1) <span class="comment">//xxx Fn&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">new</span> Fn()</span><br><span class="line">fn2.a = <span class="string">&#x27;yyy&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(fn1.a, fn2.a, fn2) <span class="comment">//xxx yyy  Fn&#123;a: &quot;yyy&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">p1.setName(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1)  <span class="comment">//Person &#123;name: &quot;Bob&quot;, age: 12&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">p2.setName(<span class="string">&#x27;Cat&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p2) <span class="comment">//Person &#123;name: &quot;Cat&quot;, age: 12&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.__proto__===p2.__proto__) <span class="comment">// true   --&gt;所以方法一般定义在原型中</span></span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ol><li>instanceof是如何判断的?</li></ol><ul><li>表达式: <code>A instanceof B</code></li><li>如果<strong>B函数的显式原型对象在A对象的原型链上</strong>, 返回true, 否则返回false</li></ul><ol start="2"><li>Function是通过new自己产生的实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;  &#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo()</span><br><span class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> Foo) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span>  Foo) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><p>测试题1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试题1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">A.prototype.n = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> A()</span><br><span class="line">A.prototype = &#123; <span class="attr">n</span>: <span class="number">2</span>, <span class="attr">m</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> A()</span><br><span class="line"><span class="built_in">console</span>.log(b.n, b.m, c.n, c.m) <span class="comment">// 1 undefined 2 3</span></span><br></pre></td></tr></table></figure><p>测试题2:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试题2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;b()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> F()</span><br><span class="line">f.a() <span class="comment">//a()</span></span><br><span class="line">f.b() <span class="comment">//f.b is not a function --&gt;找不到</span></span><br><span class="line">F.a() <span class="comment">//a()</span></span><br><span class="line">F.b() <span class="comment">//b()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype)</span><br></pre></td></tr></table></figure><p>结果图例</p><p><a href="https://imgtu.com/i/4dRoJU"><img src="https://z3.ax1x.com/2021/09/23/4dRoJU.png" alt="4dRoJU.png"></a></p><h2 id="执行上下文与执行上下文栈"><a href="#执行上下文与执行上下文栈" class="headerlink" title="执行上下文与执行上下文栈"></a>执行上下文与执行上下文栈</h2><blockquote><p>当代码在 JavaScript 中运行时，执行代码的环境非常重要，并将概括为以下几点：</p><p><strong>全局代码</strong>——第一次执行代码的默认环境。</p><p><strong>函数代码</strong>——当执行流进入函数体时。</p><p>(…) —— 我们当作 执行上下文 是当前代码执行的一个环境与范围。</p></blockquote><p>换句话说，当我们启动程序时，我们从全局执行上下文中开始。一些变量是在全局执行上下文中声明的。我们称之为全局变量。当程序调用一个函数时，会发生什么?</p><p>以下几个步骤：</p><ul><li>JavaScript 创建一个新的执行上下文，我们叫作本地执行上下文。</li><li>这个本地执行上下文将有它自己的一组变量，这些变量将是这个执行上下文的本地变量。</li><li>新的执行上下文被推到到执行堆栈中。可以将执行堆栈看作是一种保存程序在其执行中的位置的容器。</li></ul><p>函数什么时候结束?当它遇到一个 return 语句或一个结束括号}。</p><p>当一个函数结束时，会发生以下情况:</p><ul><li>这个本地执行上下文从执行堆栈中弹出。</li><li>函数将返回值返回调用上下文。调用上下文是调用这个本地的执行上下文，它可以是全局执行上下文，也可以是另外一个本地的执行上下文。这取决于调用执行上下文来处理此时的返回值，返回的值可以是一个对象、一个数组、一个函数、一个布尔值等等，如果函数没有 return 语句，则返回 undefined。</li><li>这个本地执行上下文被销毁，销毁是很重要，这个本地执行上下文中声明的所有变量都将被删除，不在有变量，这个就是为什么 称为本地执行上下文中自有的变量。</li></ul><p><a href="https://imgtu.com/i/4dRbQJ"><img src="https://z3.ax1x.com/2021/09/23/4dRbQJ.png" alt="4dRbQJ.png"></a></p><h3 id="变量提升与函数提升"><a href="#变量提升与函数提升" class="headerlink" title="变量提升与函数提升"></a>变量提升与函数提升</h3><ol><li>变量声明提升</li></ol><ul><li>通过var定义(声明)的变量, 在定义语句之前就可以访问到</li><li>值: undefined</li></ul><ol start="2"><li>函数声明提升</li></ol><ul><li>通过function声明的函数, 在之前就可以直接调用</li><li>值: 函数定义(对象)</li></ul><ol start="3"><li>引出一个问题: 变量提升和函数提升是如何产生的?</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 面试题 : 输出 undefined</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a)</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">4</span> <span class="comment">//变量提升</span></span><br><span class="line"> &#125;</span><br><span class="line"> fn()  <span class="comment">//undefined</span></span><br><span class="line"><span class="string">&#x27;--------------------------------------------&#x27;</span></span><br><span class="line"> <span class="built_in">console</span>.log(b) <span class="comment">//undefined  变量提升</span></span><br><span class="line"> fn2() <span class="comment">//可调用  函数提升</span></span><br><span class="line"> <span class="comment">// fn3() //不能  变量提升</span></span><br><span class="line"> <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;  <span class="built_in">console</span>.log(<span class="string">&#x27;fn2()&#x27;</span>) &#125;</span><br><span class="line"> <span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;fn3()&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ol><li>代码分类(位置)</li></ol><ul><li>全局代码</li><li>函数(局部)代码</li></ul><ol start="2"><li>全局执行上下文</li></ol><ul><li>在执行全局代码前将<strong>window</strong>确定为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var定义的全局变量==&gt;undefined, 添加为window的属性</li><li>function声明的全局函数==&gt;赋值(fun), 添加为window的方法</li><li>this==&gt;赋值(<strong>window</strong>)</li></ul></li><li>开始执行全局代码</li></ul><ol start="3"><li>函数执行上下文</li></ol><ul><li>在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象(<strong>虚拟的, 存在于栈中</strong>)</li><li>对局部数据进行预处理<ul><li>形参变量=&gt;赋值(实参)=&gt;添加为执行上下文的属性</li><li><code>arguments</code>=&gt;赋值(实参列表), 添加为执行上下文的属性</li><li>var定义的局部变量==&gt;undefined, 添加为执行上下文的属性</li><li>function声明的函数 ==&gt;赋值(fun), 添加为执行上下文的方法</li><li>this==&gt;赋值(<strong>调用函数的对象</strong>)</li></ul></li><li>开始执行函数体代码</li></ul><h3 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h3><ol><li>在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象</li><li>在全局执行上下文(window)确定后, 将其添加到栈中(压栈)–&gt;<code>所以栈底百分百是[window]</code></li><li>在函数执行上下文创建后, 将其添加到栈中(压栈)</li><li>在当前函数执行完后,将栈顶的对象移除(出栈)</li><li>当所有的代码执行完后, 栈中只剩下window</li><li><code>上下文栈数==函数调用数+1</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 进入全局执行上下文</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">5</span></span><br><span class="line">  fn(x + b)   <span class="comment">//3. 进入fn执行上下文           </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">5</span></span><br><span class="line">  <span class="built_in">console</span>.log(a + c + y)</span><br><span class="line">&#125;</span><br><span class="line">bar(<span class="number">10</span>) <span class="comment">//2. 进入bar函数执行上下文</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4dRTWF"><img src="https://z3.ax1x.com/2021/09/23/4dRTWF.png" alt="4dRTWF.png"></a></p><p>此处用一个动态图来展示:</p><p><a href="https://imgtu.com/i/4dWAeI"><img src="https://z3.ax1x.com/2021/09/23/4dWAeI.gif" alt="4dWAeI.gif"></a></p><p>举个栗子:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栗子</span></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span> 依次输出什么?</span><br><span class="line">gb: <span class="literal">undefined</span></span><br><span class="line"><span class="attr">fb</span>: <span class="number">1</span></span><br><span class="line"><span class="attr">fb</span>: <span class="number">2</span></span><br><span class="line"><span class="attr">fb</span>: <span class="number">3</span></span><br><span class="line"><span class="attr">fe</span>: <span class="number">3</span></span><br><span class="line"><span class="attr">fe</span>: <span class="number">2</span></span><br><span class="line"><span class="attr">fe</span>: <span class="number">1</span></span><br><span class="line"><span class="attr">ge</span>: <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 整个过程中产生了几个执行上下文?  <span class="number">5</span></span><br><span class="line">--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;gb: &#x27;</span>+ i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> i = <span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">foo(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">console</span>.log(<span class="string">&#x27;fb:&#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  foo(i + <span class="number">1</span>) <span class="comment">//递归调用: 在函数内部调用自己</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">console</span>.log(<span class="string">&#x27;fe:&#x27;</span> + i) <span class="comment">//出栈 所以会 3 2 1这样的结果</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;ge: &#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="相关面试题-1"><a href="#相关面试题-1" class="headerlink" title="相关面试题"></a>相关面试题</h3><p><code>函数提升优先级高于变量提升,且不会被变量声明覆盖,但是会被变量赋值覆盖</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试题1:  先执行变量提升, 再执行函数提升</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试题2:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (!(b <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试题3:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span> <span class="comment">//与此行无关</span></span><br><span class="line">&#125;</span><br><span class="line">c(<span class="number">2</span>) <span class="comment">// 报错  c is not a function</span></span><br></pre></td></tr></table></figure><h2 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>理解</li></ol><ul><li>就是一块”地盘”, 一个代码段所在的区域</li><li>它是静态的(相对于上下文对象), 在编写代码时就确定了</li></ul><ol start="2"><li>分类</li></ol><ul><li>全局作用域</li><li>函数作用域</li><li>没有块作用域(ES6有了)   –&gt;(java语言也有)</li></ul><ol start="3"><li>作用</li></ol><ul><li>隔离变量，不同作用域下同名变量不会有冲突</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  //没块作用域</span></span><br><span class="line"><span class="comment"> if(true) &#123; var c = 3 &#125;</span></span><br><span class="line"><span class="comment"> console.log(c)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> a = <span class="number">10</span>,</span><br><span class="line">   b = <span class="number">20</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">100</span>, c = <span class="number">300</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;fn()&#x27;</span>, a, b, c, x) <span class="comment">//100 20 300 10</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1000</span>, d = <span class="number">400</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;bar()&#x27;</span>, a, b, c, d, x)</span><br><span class="line">   &#125;</span><br><span class="line">   bar(<span class="number">100</span>)<span class="comment">//1000 20 300 400 100</span></span><br><span class="line">   bar(<span class="number">200</span>)<span class="comment">//1000 20 300 400 200</span></span><br><span class="line"> &#125;</span><br><span class="line"> fn(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="作用域与执行上下文的区别与联系"><a href="#作用域与执行上下文的区别与联系" class="headerlink" title="作用域与执行上下文的区别与联系"></a>作用域与执行上下文的区别与联系</h3><ol><li>区别1:</li></ol><ul><li>全局作用域之外，每个函数都会创建自己的作用域，<code>作用域在函数定义时就已经确定了。而不是在函数调用时</code></li><li>全局执行上下文环境是在全局作用域确定之后, js代码马上执行之前创建</li><li>函数执行上下文是在调用函数时, 函数体代码执行之前创建</li></ul><ol start="2"><li>区别2:</li></ol><ul><li>作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化</li><li>执行上下文是动态的, 调用函数时创建, 函数调用结束时就会自动释放</li></ul><ol start="3"><li>联系:</li></ol><ul><li>执行上下文(对象)是从属于所在的作用域</li><li>全局上下文环境==&gt;全局作用域</li><li>函数上下文环境==&gt;对应的函数使用域</li></ul><p><a href="https://imgtu.com/i/4dRqy9"><img src="https://z3.ax1x.com/2021/09/23/4dRqy9.png" alt="4dRqy9.png"></a></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ol><li>理解</li></ol><ul><li>多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外)</li><li>查找变量时就是沿着作用域链来查找的</li></ul><ol start="2"><li>查找一个变量的查找规则</li></ol><ul><li>在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入3</li><li>再次执行2的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">     <span class="built_in">console</span>.log(c)</span><br><span class="line">     <span class="built_in">console</span>.log(b)</span><br><span class="line">     <span class="built_in">console</span>.log(a)</span><br><span class="line">     <span class="built_in">console</span>.log(d)</span><br><span class="line">   &#125;</span><br><span class="line">   fn2()</span><br><span class="line"> &#125;</span><br><span class="line"> fn1()</span><br></pre></td></tr></table></figure><h3 id="相关面试题-2"><a href="#相关面试题-2" class="headerlink" title="相关面试题"></a>相关面试题</h3><h4 id="①-作用域在函数定义时就已经确定了。而不是在函数调用时"><a href="#①-作用域在函数定义时就已经确定了。而不是在函数调用时" class="headerlink" title="① 作用域在函数定义时就已经确定了。而不是在函数调用时"></a>① 作用域在函数定义时就已经确定了。而不是在函数调用时</h4><p>作用域1:<code>作用域在函数定义时就已经确定了。而不是在函数调用时</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">f();</span><br><span class="line">&#125;</span><br><span class="line">show(fn); <span class="comment">//输出10</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4dRLLR"><img src="https://z3.ax1x.com/2021/09/23/4dRLLR.png" alt="4dRLLR.png"></a></p><h4 id="②-对象变量不能产生局部作用域"><a href="#②-对象变量不能产生局部作用域" class="headerlink" title="② 对象变量不能产生局部作用域"></a>② 对象变量不能产生局部作用域</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(fn)</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;fn()</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">var</span> obj = &#123; <span class="comment">//对象变量不能产生局部作用域,所以会找到全局去,导致报错</span></span><br><span class="line"> <span class="attr">fn2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn2)</span><br><span class="line">  <span class="comment">//console.log(this.fn2)</span></span><br><span class="line"> &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;obj.fn2()</span><br></pre></td></tr></table></figure></blockquote><h2 id="闭包预备知识点梳理"><a href="#闭包预备知识点梳理" class="headerlink" title="闭包预备知识点梳理"></a>闭包预备知识点梳理</h2><h3 id="举个栗子分析执行上下文"><a href="#举个栗子分析执行上下文" class="headerlink" title="举个栗子分析执行上下文"></a>举个栗子分析执行上下文</h3><p>在讨论闭包之前，让我们看下下方的代码(建议先只看代码自己头脑风暴再看笔记中的描述),也算是对上面知识点的梳理回顾：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="number">2</span>: <span class="function"><span class="keyword">function</span> <span class="title">addTwo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="number">3</span>:  <span class="keyword">let</span> ret = x + <span class="number">2</span></span><br><span class="line"><span class="number">4</span>:   <span class="keyword">return</span> ret</span><br><span class="line"><span class="number">5</span>:  &#125;</span><br><span class="line"><span class="number">6</span>: <span class="keyword">let</span> b = addTwo(a)</span><br><span class="line"><span class="number">7</span>: <span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure><p>为了理解 JavaScript 引擎是如何工作的，让我们详细分析一下：</p><ol><li>在第 1 行，我们在全局执行上下文中声明了一个新变量 a，并将赋值为 3。</li><li>接下来就变得棘手了，第 2 行到第 5 行实际上是在一起的。这里发生了什么?</li></ol><ul><li>我们在全局执行上下文中声明了一个名为<code>addTwo</code>的新变量,我们给它分配了什么?  –&gt;<code>一个函数定义</code>。</li><li>两个括号{}之间的任何内容都被分配给<code>addTwo</code>，<code>函数内部的代码没有被求值，没有被执行，只是存储在一个变量中以备将来使用</code>。</li></ul><ol start="3"><li>现在我们在第 6 行。</li></ol><ul><li>它看起来很简单，但是这里有很多东西需要拆开分析。首先，我们在全局执行上下文中声明一个新变量，并将其标记为[<code>b</code>]，<code>变量一经声明，其值即为 undefined</code>。</li><li>接下来，仍然在第 6 行，我们看到一个赋值操作符。我们准备给变量<code>b</code>赋一个新值，接下来我们看到一个函数被调用。<code>当您看到一个变量后面跟着一个圆括号(…)时，这就是调用函数的信号</code>，接着，每个函数都返回一些东西(值、对象或 undefined)，无论从函数返回什么，都将赋值给变量<code>b</code>。</li></ul><ol start="4"><li>但是首先我们需要调用标记为<code>addTwo</code>的函数。JavaScript 将在其全局执行上下文内存中查找名为<code>addTwo</code>的变量。噢，它找到了一个，它是在[<code>步骤 2(或第 2 - 5 行)中定义</code>]的。变量[<code>addTwo</code>]包含一个函数定义。</li></ol><ul><li>注意:<code>变量[a]作为参数传递给函数</code>。</li><li>JavaScript 在全局执行上下文内存中搜索变量<code>a</code>，找到它，发现它的值是 3，并将数字 3 作为参数传递给函数，准备好执行函数。</li></ul><ol start="5"><li>现在执行上下文将切换,创建了一个新的本地执行上下文，我们将其命名为[“<code>addTwo 执行上下文</code>”，<code>执行上下文被推送到调用堆栈上</code>。在 addTwo 执行上下文中，我们要做的第一件事是什么?</li></ol><ul><li>你可能会说，“在 addTwo 执行上下文中声明了一个新的变量 ret”，<code>这是不对的</code>。</li><li><code>正确的答案是</code>:我们需要先看函数的参数。<code>在 addTwo 执行上下文中声明一个新的变量[x]</code>，因为值 3 是作为参数传递的，所以变量 x 被赋值为 3。        </li><li>下一步才是在 addTwo 执行上下文中声明一个新的变量<code>ret</code>。它的值被设置为 undefined(第三行)。</li></ul><ol start="6"><li>仍然是第 3 行，需要执行一个相加操作。</li></ol><ul><li>首先我们需要<code>x</code>的值，JavaScript 会寻找一个变量<code>x</code>，它会首先在<code>addTwo</code>执行上下文中寻找，找到了一个值为 3。第二个操作数是数字 2。两个相加结果为 5 就被分配给变量<code>ret</code>。</li></ul><ol start="7"><li>第 4 行，我们返回变量<code>ret</code>的内容，在 addTwo 执行上下文中查找，找到值为 5，返回，函数结束。</li><li>第 4 - 5 行，函数结束。</li></ol><ul><li><code>addTwo 执行上下文被销毁</code>，变量<code>x</code>和<code>ret</code>被消去了，它们已经不存在了。<code>addTwo 执行上下文从调用堆栈中弹出</code>，返回值返回给调用上下文，在这种情况下，调用上下文是全局执行上下文，因为函数<code>addTwo</code> 是从全局执行上下文调用的。</li></ul><ol start="9"><li>现在我们继续第 4 步的内容，返回值 5 被分配给变量<code>b</code>，<code>此时实际上程序仍然在第 6 行</code>(盗梦空间既视感:dog:)</li><li>在第 7 行，<code>b</code>的值 5 被打印到控制台了。</li></ol><p>对于一个非常简单的程序，这是一个非常冗长的解释，我们甚至还没有涉及闭包。但肯定会涉及的，不过首先我们得绕一两个弯。</p><h3 id="举个栗子分析词法作用域"><a href="#举个栗子分析词法作用域" class="headerlink" title="举个栗子分析词法作用域"></a>举个栗子分析词法作用域</h3><p>这里想说明，我们在函数执行上下文中有变量，在全局执行上下文中有变量。JavaScript 的一个复杂之处在于它如何查找变量，如果在函数执行上下文中找不到变量，它将在调用上下文中寻找它，如果在它的调用上下文中没有找到，就一直往上一级，直到它在全局执行上下文中查找为止。(如果最后找不到，它就是 undefined)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="keyword">let</span> val1 = <span class="number">2</span></span><br><span class="line"><span class="number">2</span>: <span class="function"><span class="keyword">function</span> <span class="title">multiplyThis</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="number">3</span>:   <span class="keyword">let</span> ret = n * val1</span><br><span class="line"><span class="number">4</span>:    <span class="keyword">return</span> ret</span><br><span class="line"><span class="number">5</span>: &#125;</span><br><span class="line"><span class="number">6</span>: <span class="keyword">let</span> multiplied = multiplyThis(<span class="number">6</span>)</span><br><span class="line"><span class="number">7</span>: <span class="built_in">console</span>.log(<span class="string">&#x27;example of scope:&#x27;</span>, multiplied)</span><br></pre></td></tr></table></figure><p>下面列出向个步骤来解释一下（如果你已经熟悉了，请跳过）：</p><ol><li>在全局执行上下文中声明一个新的变量<code>val1</code>，并将其赋值为 2。</li><li>行 2 - 5，声明一个新的变量 <code>multiplyThis</code>，并给它分配一个函数定义。</li><li>第六行，声明一个在全局执行上下文 <code>multiplied</code> 新变量。</li><li>从全局执行上下文内存中查找变量<code>multiplyThis</code>，并将其作为函数执行，传递数字 6 作为参数。</li></ol><ul><li>新函数调用(创建新执行上下文），创建一个新的 <code>multiplyThis</code> 函数执行上下文。</li><li>在 <code>multiplyThis</code> 执行上下文中，<code>声明一个变量 n 并将其赋值为 6</code>  –&gt;声明后才会进入函数体内部执行</li></ul><ol start="5"><li>执行函数回到第 3 行。</li></ol><ul><li>在<code>multiplyThis</code>执行上下文中，声明一个变量<code>ret</code>。</li><li>继续第 3 行。对两个操作数 n 和 val1 进行乘法运算.在<code>multiplyThis</code>执行上下文中查找变量 <code>n</code>。<ul><li>我们在步骤 6 中声明了它,它的内容是数字 6。在<code>multiplyThis</code>执行上下文中查找变量<code>val1</code>。</li><li><code>multiplyThis</code>执行上下文没有一个标记为 val1 的变量。<code>我们向调用上下文查找，调用上下文是全局执行上下文，在全局执行上下文中</code>寻找 [<code>val1</code>]。哦，是的、在那儿，它在步骤 1 中定义，数值是 2。</li></ul></li><li>继续第 3 行。将两个操作数相乘并将其赋值给<code>ret</code>变量，6 * 2 = 12，ret 现在值为 12。</li></ul><ol start="6"><li>返回<code>ret</code>变量，销毁<code>multiplyThis</code>执行上下文及其变量 <code>ret</code> 和 <code>n</code> 。变量 <code>val1</code> 没有被销毁，因为它是全局执行上下文的一部分。</li><li>回到第 6 行。在调用上下文中，数字 12 赋值给 <code>multiplied</code> 的变量。</li><li>最后在第 7 行，我们在控制台中打印 <code>multiplied</code> 变量的值</li></ol><p>在这个例子中，我们需要记住一个函数可以访问在它的调用上下文中定义的变量，这个就是<strong>词法作用域（Lexical scope）</strong>。</p><h3 id="返回函数的函数-高阶函数"><a href="#返回函数的函数-高阶函数" class="headerlink" title="返回函数的函数[高阶函数]"></a>返回函数的函数[<code>高阶函数</code>]</h3><p>在第一个例子中，函数<code>addTwo</code>返回一个数字。请记住，函数可以返回任何东西。让我们看一个返回函数的函数示例，因为这对于下方理解闭包非常重要。看栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="keyword">let</span> val = <span class="number">7</span></span><br><span class="line"><span class="number">2</span>: <span class="function"><span class="keyword">function</span> <span class="title">createAdder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">3</span>:   <span class="function"><span class="keyword">function</span> <span class="title">addNumbers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="number">4</span>:     <span class="keyword">let</span> ret = a + b</span><br><span class="line"><span class="number">5</span>:     <span class="keyword">return</span> ret</span><br><span class="line"><span class="number">6</span>:   &#125;</span><br><span class="line"><span class="number">7</span>:   <span class="keyword">return</span> addNumbers</span><br><span class="line"><span class="number">8</span>: &#125;</span><br><span class="line"><span class="number">9</span>: <span class="keyword">let</span> adder = createAdder()</span><br><span class="line"><span class="number">10</span>: <span class="keyword">let</span> sum = adder(val, <span class="number">8</span>)</span><br><span class="line"><span class="number">11</span>: <span class="built_in">console</span>.log(<span class="string">&#x27;example of function returning a function: &#x27;</span>, sum)</span><br></pre></td></tr></table></figure><p>让我们回到分步分解：</p><ol><li>第一行。我们在全局执行上下文中声明一个变量<code>val</code>并赋值为 7。</li><li>行 2 - 8。我们在全局执行上下文中声明了一个名为 <code>createAdder</code> 的变量，并为其分配了一个函数定义。</li></ol><ul><li>内部的第 3 至 7 行描述了上述函数定义，和以前一样，在这一点上，我们没有直接讨论这个函数。我们只是将函数定义存储到[<code>createAdder</code>]变量中。</li></ul><ol start="3"><li>第 9 行。</li></ol><ul><li>我们在全局执行上下文中声明了一个名为 <code>adder</code> 的新变量，暂时，值为 undefined</li><li>我们看到括号()，我们需要执行或调用一个函数，查找全局执行上下文的内存并查找名为<code>createAdder</code> 的变量，它是在步骤 2 中创建的。好吧，我们调用它。</li></ul><ol start="4"><li>调用函数时，执行到第 2 行。</li></ol><ul><li>创建一个新的<code>createAdder</code>执行上下文。我们可以在<code>createAdder</code>的执行上下文中创建自有变量。js 引擎将<code>createAdder</code>的上下文添加到调用堆栈。这个函数没有参数，让我们<code>直接跳到它的主体部分</code>.</li></ul><ol start="5"><li>第 3 - 6 行(执行到主体函数中)。</li></ol><ul><li>我们有一个新的函数声明，我们在<code>createAdder</code>执行上下文中创建一个变量 addNumbers。这很重要，<code>addnumber</code>只存在于<code>createAdder</code>执行上下文中。我们将函数定义存储在名为 <code>addNumbers</code> 的自有变量中。</li><li>在第 7 行，我们返回变量<code>addNumbers</code>的内容。js 引擎查找一个名为<code>addNumbers</code>的变量并找到它，这是一个函数定义。好的，函数可以返回任何东西，包括函数定义。我们返<code>addNumbers</code>的定义。第 4 行和第 5 行括号之间的内容构成该函数定义。</li></ul><ol start="6"><li>[return addNumbers]时，<code>createAdder</code>执行上下文将被销毁。<code>addNumbers</code> 变量不再存在。但<code>addNumbers</code>函数定义仍然存在，<code>因为它返回并赋值给了 adder 变量</code>。   </li></ol><ul><li><code>此处很重要</code>!!!此时的[<code>adder=createAdder()</code>]实际上它的值是[<code>addNumbers</code>]的函数定义而不是[<code>createAdder</code>]了,adder现在是一个匿名函数–这里有点绕,要确定理解</li></ul><ol start="7"><li>第 10 行。我们在全局执行上下文中定义了一个新的变量 <code>sum</code>，先赋值为 undefined;</li></ol><ul><li>接下来我们需要执行一个函数。哪个函数?<ul><li>是名为<code>adder</code>变量中定义的函数。我们在全局执行上下文中查找它，果然找到了它，这个函数有两个参数。</li><li>让我们查找这两个参数，第一个是我们在步骤 1 中定义的变量<code>val</code>，它表示数字 7，第二个是数字 8。</li></ul></li><li>现在我们要执行这个函数，函数定义概述在第 3-5 行，<code>因为这个函数是匿名</code>，为了方便理解，我们暂且叫它<code>adder</code>吧。这时创建一个<code>adder</code>函数执行上下文，在<code>adder</code>执行上下文中创建了两个新变量 <code>a</code> 和 <code>b</code>。它们分别被赋值为 7 和 8，因为这些是我们在上一步传递给函数的参数。</li></ul><ol start="8"><li>执行回到第 4 行。</li></ol><ul><li>在<code>adder</code>执行上下文中声明了一个名为<code>ret</code>的新变量,</li><li>将变量<code>a</code>的内容和变量<code>b</code>的内容相加得 15 并赋给 ret 变量。</li></ul><ol start="9"><li><code>ret</code>变量从该函数返回。这个匿名函数执行上下文被销毁，从调用堆栈中删除，变量<code>a</code>、<code>b</code>和<code>ret</code>不再存在。</li><li>返回值被分配给我们在步骤 9 中定义的<code>sum</code>变量。</li><li>我们将<code>sum</code>的值打印到控制台。</li></ol><p>如预期，控制台将打印 15。我们在这里确实经历了很多困难，我想在这里说明几点。首先，函数定义可以存储在变量中，函数定义在程序调用之前是不可见的。其次，每次调用函数时，都会(临时)创建一个本地执行上下文。当函数完成时，执行上下文将消失。函数在遇到 return 或右括号}时执行完成。</p><h5 id="高阶函数是什么"><a href="#高阶函数是什么" class="headerlink" title="高阶函数是什么?"></a><code>高阶函数是什么?</code></h5><p>所谓高阶函数，就是一个函数就可以接收另一个函数作为参数，或者是返回一个函数–&gt;常见的高阶函数有map、reduce、filter、sort等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ADD =<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">调用：ADD(<span class="number">2</span>)(<span class="number">3</span>)即可获得结果</span><br></pre></td></tr></table></figure><ol><li>map</li></ol><ul><li>```js<br>//<br>map接受一个函数作为参数，不改变原来的数组，只是返回一个全新的数组<br>var arr = [1,2,3,4,5]<br>var arr1 = arr.map(item =&gt; item = 2)<br>//arr  输出[1,2,3,4,5]<br>//arr1 输出[2,2,2,2,2]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. reduce</span><br><span class="line"></span><br><span class="line"> - ```js</span><br><span class="line">   //</span><br><span class="line">   reduce也是返回一个全新的数组。reduce接受一个函数作为参数，这个函数要有两个形参，代表数组中的前两项，reduce会将这个函数的结果与数组中的第三项再次组成这个函数的两个形参以此类推进行累积操作</span><br><span class="line">   var arr = [1,2,3,4,5]</span><br><span class="line">   var arr2 = arr.reduce((a,b)=&gt; a+b)</span><br><span class="line">   console.log(arr2) // 15</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>filter</li></ol><ul><li>```js<br>//<br>filter返回过滤后的数组。filter也接收一个函数作为参数，这个函数将作用于数组中的每个元素，根据该函数每次执行后返回的布尔值来保留结果，如果是true就保留，如果是false就过滤掉（这点与map要区分）<br>var arr = [1,2,3,4,5]<br> var arr3 = arr.filter(item =&gt; item % 2 == 0)<br>console.log(arr3)// [2,4]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 闭包</span><br><span class="line"></span><br><span class="line">&gt;一个函数和对其周围状态（**lexical environment，词法环境**）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是**闭包**（**closure**）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">### 引出闭包概念</span><br><span class="line"></span><br><span class="line">#### ① 错误场景</span><br><span class="line"></span><br><span class="line">需求: `点击某个按钮, 提示&quot;点击的是第n个按钮&quot;`</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;button&gt;测试1&lt;/button&gt;</span><br><span class="line">&lt;button&gt;测试2&lt;/button&gt;</span><br><span class="line">&lt;button&gt;测试3&lt;/button&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">需求: 点击某个按钮, 提示&quot;点击的是第n个按钮&quot;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var btns = document.getElementsByTagName(&#x27;button&#x27;)</span><br><span class="line">//注意[btns]不是一个数组,它是一个伪数组</span><br><span class="line">//每次获取[btns.length]其实都是需要进行计算的(因为它是伪数组)</span><br><span class="line">//所以为了性能更好,在此处赋值,就只需要计算一次</span><br><span class="line">for (var i = 0,length=btns.length; i &lt; length; i++) &#123;</span><br><span class="line">var btn = btns[i]</span><br><span class="line">btn.onclick = function () &#123;  //遍历加监听</span><br><span class="line"> alert(&#x27;第&#x27;+(i+1)+&#x27;个&#x27;)     //结果 全是[4]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;    </span><br></pre></td></tr></table></figure></li></ul><p>此处错误是,直接修改并使用全局变量[<code>i</code>],导致for循环结束后,所有点击按钮绑定的弹窗值都是[<code>i+1</code>]</p><p>随后调用时,都会找到[<code>i</code>]这个变量,但是此时i==3,所以所有结果都是4</p><p><a href="https://imgtu.com/i/4dRXe1"><img src="https://z3.ax1x.com/2021/09/23/4dRXe1.png" alt="4dRXe1.png"></a></p><h4 id="②-将变量挂载到自身来解决"><a href="#②-将变量挂载到自身来解决" class="headerlink" title="② 将变量挂载到自身来解决"></a>② 将变量挂载到自身来解决</h4><p>解决方式:将btn所对应的下标保存在btn上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;测试<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;!--</span><br><span class="line">需求: 点击某个按钮, 提示<span class="string">&quot;点击的是第n个按钮&quot;</span></span><br><span class="line">--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,length=btns.length; i &lt; length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> btn = btns[i]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//将btn所对应的下标保存在btn上</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">btn.index = i</span></span></span><br><span class="line"><span class="javascript"><span class="xml">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//遍历加监听</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> alert(<span class="string">&#x27;第&#x27;</span>+(i+<span class="number">1</span>)+<span class="string">&#x27;个&#x27;</span>)     <span class="comment">//结果 全是[4]</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>    </span><br></pre></td></tr></table></figure><p>将其放在自己的身上,需要时自己找自己拿,这样就能解决</p><p><a href="https://imgtu.com/i/4dRjdx"><img src="https://z3.ax1x.com/2021/09/23/4dRjdx.png" alt="4dRjdx.png"></a></p><h4 id="③-利用闭包"><a href="#③-利用闭包" class="headerlink" title="③ 利用闭包"></a>③ 利用闭包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//利用闭包</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,length=btns.length; i &lt; length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//此处的j是局部的,它将传入的[i]存入局部的[j]中,这样就能实现效果 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">(<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> btn = btns[j]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   alert(<span class="string">&#x27;第&#x27;</span>+(j+<span class="number">1</span>)+<span class="string">&#x27;个&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)(i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4dRjdx"><img src="https://z3.ax1x.com/2021/09/23/4dRjdx.png" alt="4dRjdx.png"></a></p><h3 id="举个闭包栗子分析理解"><a href="#举个闭包栗子分析理解" class="headerlink" title="举个闭包栗子分析理解"></a>举个闭包栗子分析理解</h3><h4 id="①-按照正常逻辑理解"><a href="#①-按照正常逻辑理解" class="headerlink" title="① 按照正常逻辑理解"></a>① 按照正常逻辑理解</h4><p>先说,此部分不是按照闭包机制进行理解,所以中途发觉不对(<code>肯定有地方不对劲</code>)请勿钻牛角尖,主要用作后方对照</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="function"><span class="keyword">function</span> <span class="title">createCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">2</span>:   <span class="keyword">let</span> counter = <span class="number">0</span></span><br><span class="line"><span class="number">3</span>:   <span class="keyword">const</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">4</span>:     counter = counter + <span class="number">1</span></span><br><span class="line"><span class="number">5</span>:     <span class="keyword">return</span> counter</span><br><span class="line"><span class="number">6</span>:   &#125;</span><br><span class="line"><span class="number">7</span>:   <span class="keyword">return</span> myFunction</span><br><span class="line"><span class="number">8</span>: &#125;</span><br><span class="line"><span class="number">9</span>: <span class="keyword">const</span> increment = createCounter()</span><br><span class="line"><span class="number">10</span>: <span class="keyword">const</span> c1 = increment()</span><br><span class="line"><span class="number">11</span>: <span class="keyword">const</span> c2 = increment()</span><br><span class="line"><span class="number">12</span>: <span class="keyword">const</span> c3 = increment()</span><br><span class="line"><span class="number">13</span>: <span class="built_in">console</span>.log(<span class="string">&#x27;example increment&#x27;</span>, c1, c2, c3)</span><br></pre></td></tr></table></figure><p>现在，我们已经从前几个示例中掌握了它的诀窍，让我们按照预期的方式快速执行它：  (<code>错误的流程理解,故意按照正常的逻辑流程走,做印证</code>)</p><ol><li>行 1 - 8。我们在全局执行上下文中创建了一个新的变量<code>createCounter</code>，并赋值了一个的函数定义。</li><li>第 9 行。</li></ol><ul><li>我们在全局执行上下文中声明了一个名为<code>increment</code>的新变量。</li><li>我们需要调用<code>createCounter</code>函数并将其返回值赋给<code>increment</code>变量。</li></ul><ol start="3"><li>返回执行 行 1 - 8。调用函数，创建新的本地执行上下文。</li></ol><ul><li>第 2 行。在本地执行上下文中，声明一个名为<code>counter</code>的新变量并赋值为 0;</li><li>行 3 - 6。声明一个名为<code>myFunction</code>的新变量，变量在本地执行上下文中声明,变量的内容是为第 4 行和第 5 行所定义。</li><li>第 7 行。返回<code>myFunction</code>变量的内容，删除本地执行上下文。变量<code>myFunction</code>和<code>counter</code>不再存在。此时控制权回到了调用上下文。</li></ul><ol start="4"><li>再次回到 第 9 行</li></ol><ul><li>在调用上下文(全局执行上下文)中，<code>createCounter</code>返回的值赋给了<code>increment</code>，变量<code>increment</code>现在包含一个函数定义内容为<code>createCounter</code>返回的函数。</li><li>它不再标记为<code>myFunction</code>，但它的定义是相同的。在全局上下文中，它是的标记为 <code>labeledincrement</code>。</li></ul><ol start="5"><li>第 10 行。声明一个新变量(c1)。</li></ol><ul><li>继续第 10 行。查找<code>increment</code>变量，它是一个函数并调用它。它包含前面返回的函数定义，如第 4-5 行所定义的。</li><li>创建一个新的执行上下文。没有参数。开始执行函数。</li></ul><ol start="6"><li>回到 第 4 行。</li></ol><ul><li>counter=counter + 1。在本地执行上下文中查找<code>counter</code>变量。</li><li>我们只是创建了那个上下文，从来没有声明任何局部变量。让我们看看全局执行上下文。这里也没有<code>counter</code>变量。</li><li>Javascript 会将其计算为 counter = undefined + 1，声明一个标记为<code>counter</code>的新局部变量，并将其赋值为 number 1，<code>因为 undefined 被当作值为 0。</code>    –&gt;此处是错误的哦,别钻牛角尖,正确的理解在下方,此处是做错误对比</li></ul><ol start="7"><li>第 5 行。我们变量<code>counter</code>的值(1)，我们销毁本地执行上下文和<code>counter</code>变量。</li><li>回到第 10 行。返回值(1)被赋给 c1。</li><li>第 11 行。重复步骤 10-14，c2 也被赋值为 1。</li><li>第 12 行。重复步骤 10-14，c3 也被赋值为 1。</li><li>第 13 行。我们打印变量 c1 c2 和 c3 的内容。</li></ol><p>你自己试试，看看会发生什么。你会将注意到，<code>它并不像从我上面的解释中所期望的那样记录 1,1,1。而是记录 1,2,3</code>。这个是为什么?</p><h4 id="②正确的理解"><a href="#②正确的理解" class="headerlink" title="②正确的理解"></a>②正确的理解</h4><p>不知怎么滴，<code>increment</code>函数记住了那个<code>cunter</code>的值。这是怎么回事?</p><ol><li>counter是全局执行上下文的一部分吗? </li></ol><ul><li>尝试 console.log(counter)，得到undefined的结果,显然不是这样的。</li></ul><ol start="2"><li>也许，当你调用increment时，它会以某种方式返回它创建的函数(createCounter)?</li></ol><ul><li>这怎么可能呢?变量increment包含函数定义，而不是函数的来源，显然也不是这样的。</li></ul><ol start="3"><li>所以一定有另一种机制。<strong>闭包</strong>，我们终于找到了，丢失的那块。</li></ol><ul><li> **-<code>它是这样工作的，无论何时声明新函数并将其赋值给变量，都要存储函数定义和闭包。闭包包含在函数创建时作用域中的所有变量，它类似于背包。函数定义附带一个小背包，它的包中存储了函数定义创建时作用域中的所有变</code> **</li></ul><p><strong>所以我们上面的解释都是错的，让我们再试一次，但是这次是正确的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="function"><span class="keyword">function</span> <span class="title">createCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">2</span>:   <span class="keyword">let</span> counter = <span class="number">0</span></span><br><span class="line"><span class="number">3</span>:   <span class="keyword">const</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">4</span>:     counter = counter + <span class="number">1</span></span><br><span class="line"><span class="number">5</span>:     <span class="keyword">return</span> counter</span><br><span class="line"><span class="number">6</span>:   &#125;</span><br><span class="line"><span class="number">7</span>:   <span class="keyword">return</span> myFunction</span><br><span class="line"><span class="number">8</span>: &#125;</span><br><span class="line"><span class="number">9</span>: <span class="keyword">const</span> increment = createCounter()</span><br><span class="line"><span class="number">10</span>: <span class="keyword">const</span> c1 = increment()</span><br><span class="line"><span class="number">11</span>: <span class="keyword">const</span> c2 = increment()</span><br><span class="line"><span class="number">12</span>: <span class="keyword">const</span> c3 = increment()</span><br><span class="line"><span class="number">13</span>: <span class="built_in">console</span>.log(<span class="string">&#x27;example increment&#x27;</span>, c1, c2, c3)</span><br></pre></td></tr></table></figure><ol><li>同上，第<code>1-8</code>行。我们在全局执行上下文中创建了一个新的变量<code>createCounter</code>，它得到了指定的函数定义。</li><li>同上，第<code>9</code>行。</li></ol><ul><li>我们在全局执行上下文中声明了一个名为<code>increment</code>的新变量。</li><li>我们需要调用<code>createCounter</code>函数并将其返回值赋给<code>increment</code>变量。</li></ul><ol start="3"><li>同上，第<code>1-8</code>行。调用函数，创建新的本地执行上下文。</li></ol><ul><li>第<code>2</code>行。在本地执行上下文中，声明一个名为<code>counter</code>的新变量并赋值为 <code>0</code> 。</li><li>第<code>3-6</code>行。声明一个名为<code>myFunction</code>的新变量，变量在本地执行上下文中声明,变量的内容是另一个函数定义。如第<code>4</code>行和第<code>5</code>行所定义，现在我们还创建了一个闭包，并将其作为函数定义的一部分。闭包包含作用域中的变量，在本例中是变量<code>counter</code>(值为<code>0</code>)。</li><li>第<code>7</code>行。返回<code>myFunction</code>变量的内容,删除本地执行上下文。<code>myFunction</code>和<code>counter</code>不再存在。控制权交给了调用上下文，我们返回函数定义和它的闭包，闭包中包含了创建它时在作用域内的变量。</li></ul><ol start="4"><li>回到第<code>9</code>行。</li></ol><ul><li>在调用上下文(全局执行上下文)中，<code>createCounter</code>返回的值被指定为<code>increment</code></li><li>变量<code>increment</code>现在包含一个函数定义(和闭包),由createCounter返回的函数定义,它不再标记为<code>myFunction</code>，但它的定义是相同的,在全局上下文中，称为<code>increment</code>。</li></ul><ol start="5"><li>第<code>10</code>行。声明一个新变量<code>c1</code>。</li></ol><ul><li>继续第<code>10</code>行。查找变量<code>increment</code>，它是一个函数，调用它。它包含前面返回的函数定义,如第<code>4-5</code>行所定义的。(<code>它还有一个带有变量的闭包</code>)。</li><li>创建一个新的执行上下文，没有参数，开始执行函数。</li></ul><ol start="6"><li>第<code>4</code>行。[<code>counter = counter + 1</code>]，寻找变量 [<code>counter</code>]，<code>在查找本地或全局执行上下文之前，让我们检查一下闭包</code>，瞧，闭包包含一个名为[<code>counter</code>]的变量，其值为<code>0</code>。在第<code>4</code>行表达式之后，它的值被设置为<code>1</code>。它再次被储存在闭包里，闭包现在包含值为<code>1</code>的变量 [<code>counter</code>]。</li><li>第<code>5</code>行。我们返回<code>counter的值</code>，销毁本地执行上下文。</li><li>回到第<code>10</code>行。返回值<code>1</code>被赋给变量<code>c1</code>。</li><li>第<code>11</code>行。我们重复步骤<code>10-14</code>。这一次，在闭包中此时变量<code>counter</code>的值是1。它在第<code>12</code>行设置的，它的值被递增并以<code>2</code>的形式存储在递增函数的闭包中,<code>c2</code>被赋值为<code>2</code>。</li><li>第<code>12</code>行。重复步骤<code>10-14</code>行,<code>c3</code>被赋值为3。</li><li>第13行。我们打印变量<code>c1 c2</code>和<code>c3</code>的值。</li></ol><p>** <code>你此时可能会问，是否有任何函数具有闭包，甚至是在全局范围内创建的函数?</code> **</p><blockquote><p>答案是肯定的。在全局作用域中创建的函数创建闭包，但是由于这些函数是在全局作用域中创建的，所以它们可以访问全局作用域中的所有变量，闭包的概念并不重要。</p></blockquote><blockquote><p>但当函数返回函数时，闭包的概念就变得更加重要了。返回的函数可以访问不属于全局作用域的变量，但它们仅存在于其闭包中。</p></blockquote><h3 id="常见的闭包"><a href="#常见的闭包" class="headerlink" title="常见的闭包"></a>常见的闭包</h3><h4 id="①-将函数作为另一个函数的返回值"><a href="#①-将函数作为另一个函数的返回值" class="headerlink" title="① 将函数作为另一个函数的返回值"></a>① 将函数作为另一个函数的返回值</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 1. 将函数作为另一个函数的返回值</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     a++</span><br><span class="line">     <span class="built_in">console</span>.log(a)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fn2</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> f = fn1()</span><br><span class="line"> f() <span class="comment">// 3</span></span><br><span class="line"> f() <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="②-将函数作为实参传递给另一个函数调用"><a href="#②-将函数作为实参传递给另一个函数调用" class="headerlink" title="② 将函数作为实参传递给另一个函数调用"></a>② 将函数作为实参传递给另一个函数调用</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 2. 将函数作为实参传递给另一个函数调用</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">showDelay</span>(<span class="params">msg, time</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(msg)</span><br><span class="line">   &#125;, time)</span><br><span class="line"> &#125;</span><br><span class="line"> showDelay(<span class="string">&#x27;atguigu&#x27;</span>, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure></blockquote><h4 id="③-高阶函数与柯里化"><a href="#③-高阶函数与柯里化" class="headerlink" title="③ 高阶函数与柯里化"></a>③ 高阶函数与柯里化</h4><h5 id="1、从-ES6-高阶箭头函数理解函数柯里化-运用到闭包"><a href="#1、从-ES6-高阶箭头函数理解函数柯里化-运用到闭包" class="headerlink" title="1、从 ES6 高阶箭头函数理解函数柯里化(运用到闭包)"></a>1、从 ES6 高阶箭头函数理解函数柯里化(<code>运用到闭包</code>)</h5><ol><li>首先看到了这样的一个例子：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">a</span> =&gt;</span> <span class="function"><span class="params">b</span> =&gt;</span> a + b</span><br></pre></td></tr></table></figure><ol start="2"><li>以上是一个很简单的相加函数，把它转化成 ES5 的写法如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a + b</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> add3 = add(<span class="number">3</span>) <span class="comment">//add3表示一个指向函数的变量 可以当成函数调用名来用</span></span><br><span class="line"> add3(<span class="number">4</span>) === <span class="number">3</span> + <span class="number">4</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>再简化一下，可以写成如下形式：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> param = a;</span><br><span class="line">   <span class="keyword">var</span> innerFun = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> param + b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> innerFun;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>虽然好像没什么意义，但是很显然上述使用了[<code>闭包</code>]，而且该函数的返回值是一个函数。其实，这就是<code>高阶函数的定义：以函数为参数或者返回值是函数的函数。</code></li></ol><p><a href="https://imgtu.com/i/4wmThj"><img src="https://z3.ax1x.com/2021/09/23/4wmThj.png" alt="4wmThj.png"></a></p><h5 id="2、柯里化"><a href="#2、柯里化" class="headerlink" title="2、柯里化"></a>2、柯里化</h5><ol><li>图例:</li></ol><p> <a href="https://imgtu.com/i/4wmH9s"><img src="https://z3.ax1x.com/2021/09/23/4wmH9s.png" alt="4wmH9s.png"></a></p><ol start="2"><li>关键就是<code>理解柯里化</code>，其实可以把它理解成，柯里化后，<code>将第一个参数变量存在函数里面了(闭包)</code>，然后本来需要n个参数的函数可以变成只需要剩下的（n - 1个）参数就可以调用，比如</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y</span><br><span class="line"><span class="keyword">let</span> add2 = add(<span class="number">2</span>)</span><br><span class="line">-*----------------------------------</span><br><span class="line">本来完成 add 这个操作，应该是这样调用</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="number">1.</span> 而现在 add2 函数完成同样操作只需要一个参数，这在函数式编程中广泛应用。</span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y</span><br><span class="line"><span class="keyword">let</span> add2 = add(<span class="number">2</span>)</span><br><span class="line"><span class="number">2.</span>详细解释一下，就是 add2 函数 等价于 有了 x 这个闭包变量的 y =&gt; x + y 函数,并且此时 x = <span class="number">2</span>，所以此时调用</span><br><span class="line">add2(<span class="number">3</span>) === <span class="number">2</span> + <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h5><ol><li>如果是<code>a =&gt; b =&gt; c =&gt; &#123;xxx&#125;</code>这种多次柯里化的,如何理解?</li></ol><p> 理解:前<code>n - 1</code>次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值</p><ol start="2"><li><p>结合上文可知，这里的多个连续箭头（无论俩个箭头函数三个及以上）函数连在一起 就是在柯里化。所以连续箭头函数就是多次柯里化函数的 es6 写法。</p></li><li><p><code>调用特点</code>:let test = a =&gt; b =&gt; c =&gt; {xxx}</p></li></ol><p> 比如对于上面的 <code>test</code> 函数，它有 3 个箭头， 这个函数要被调用 3 次 <code>test(a)(b)(c)</code>，前两次调用只是在传递参数，只有最后依次调用才会返回 <code>&#123;xxx&#125;</code> 代码段的返回值，并且在 <code>&#123;xxx&#125;</code> 代码段中可以调用 a,b,c</p><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ol><li>使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</li><li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li></ol><p>问题:</p><ol><li>函数执行完后, 函数内部声明的局部变量是否还存在? <ul><li> 一般是不存在, 存在于闭包中的变量才可能存在</li></ul></li><li>在函数外部能直接访问函数内部的局部变量吗? <ul><li>不能, 但我们可以通过闭包让外部操作它</li></ul></li></ol><h3 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h3><ol><li>产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</li><li>死亡: 在嵌套的内部函数成为垃圾对象时</li></ol><ul><li>即没有人指向它时死亡,通常置为[<code>null</code>],当然指向其他也行,但不安全(容易污染变量)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包的生命周期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//此时闭包就已经产生了(函数提升,实际上[fn2]提升到了第一行, 内部函数对象已经创建了)</span></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123; <span class="comment">//如果时[let fn2=function()&#123;&#125;],那么在这行才会产生闭包</span></span><br><span class="line">     a++</span><br><span class="line">     <span class="built_in">console</span>.log(a)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fn2</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> f = fn1()</span><br><span class="line"> f() <span class="comment">// 3</span></span><br><span class="line"> f() <span class="comment">// 4</span></span><br><span class="line"> f = <span class="literal">null</span> <span class="comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span></span><br></pre></td></tr></table></figure><h3 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h3><p>闭包的应用 : 定义JS模块</p><ul><li>具有特定功能的js文件</li><li>将所有的数据和功能都封装在一个函数内部(私有的)</li><li>只向外暴露一个包含n个方法的对象或函数</li><li>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</li></ul><ol><li>模块定义:</li></ol><ul><li>```js<br>//myModule.js<br>function myModule() {<br>  //私有数据<br>  var msg = ‘My atguigu’<br>  //操作数据的函数<br>  function doSomething() {<pre><code>console.log(&#39;doSomething() &#39;+msg.toUpperCase())</code></pre>  }<br>  function doOtherthing () {<pre><code>console.log(&#39;doOtherthing() &#39;+msg.toLowerCase())</code></pre>  }  //向外暴露对象(给外部使用的方法)<br>  return {<pre><code>doSomething: doSomething,doOtherthing: doOtherthing</code></pre>  }<br>}<hr>// myModule2.js<br>(function () {<br>  //私有数据<br>  var msg = ‘My atguigu’<br>  //操作数据的函数<br>  function doSomething() {<pre><code>console.log(&#39;doSomething() &#39;+msg.toUpperCase())</code></pre>  }<br>  function doOtherthing () {<pre><code>console.log(&#39;doOtherthing() &#39;+msg.toLowerCase())</code></pre>  }  //向外暴露对象(给外部使用的方法)<br>  window.myModule2 = {<pre><code>doSomething: doSomething,doOtherthing: doOtherthing</code></pre>  }<br>})()    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 模块调用</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    //调用示例</span><br><span class="line">    ------------  模块调用1 --------------------------------------------</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;myModule.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      var module = myModule()</span><br><span class="line">      module.doSomething()</span><br><span class="line">      module.doOtherthing()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    ------------  模块调用2 --------------------------------------------</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;myModule2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      myModule2.doSomething()</span><br><span class="line">      myModule2.doOtherthing()</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包的缺点及解决"><a href="#闭包的缺点及解决" class="headerlink" title="闭包的缺点及解决"></a>闭包的缺点及解决</h3><ol><li>缺点:</li></ol><ul><li>函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长</li><li>容易造成内存泄露</li></ul><ol start="2"><li>解决:</li></ol><ul><li><p>能不用闭包就不用</p></li><li><p>及时释放</p></li><li><p>```js<br>function fn1() {<br>  var arr = new Array(100000)<br>  function fn2() {</p><pre><code>console.log(arr.length)</code></pre><p>  }<br>  return fn2<br>}<br>var f = fn1()<br>f()<br>f = null //让内部函数成为垃圾对象–&gt;回收闭包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我还有一个解决方式,调用时直接`f()()`直接运行调用即可--&gt;匿名函数,用完自动就销毁了</span><br><span class="line"></span><br><span class="line">[![4dRzFK.png](https://z3.ax1x.com/2021/09/23/4dRzFK.png)](https://imgtu.com/i/4dRzFK)</span><br><span class="line"></span><br><span class="line">### 内存溢出与内存泄露</span><br><span class="line"></span><br><span class="line">1. 内存溢出</span><br><span class="line"> * 一种程序运行出现的错误</span><br><span class="line"> * 当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误</span><br><span class="line">2. 内存泄露</span><br><span class="line"> * 占用的内存没有及时释放</span><br><span class="line"> * `内存泄露积累多了就容易导致内存溢出`</span><br><span class="line"> * 常见的内存泄露:</span><br><span class="line">   * 意外的全局变量</span><br><span class="line">   * 没有及时清理的计时器或回调函数</span><br><span class="line">   * 闭包</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> // 1. 内存溢出</span><br><span class="line"> var obj = &#123;&#125;</span><br><span class="line"> for (var i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">   obj[i] = new Array(10000000)</span><br><span class="line">   console.log(&#x27;-----&#x27;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 2. 内存泄露</span><br><span class="line">   // 意外的全局变量</span><br><span class="line"> function fn() &#123;</span><br><span class="line">   a = new Array(10000000)  //不使用var let const去承接</span><br><span class="line">   console.log(a)</span><br><span class="line"> &#125;</span><br><span class="line"> fn()</span><br><span class="line"></span><br><span class="line">  // 没有及时清理的计时器或回调函数</span><br><span class="line"> var intervalId = setInterval(function () &#123; //启动循环定时器后不清理</span><br><span class="line">   console.log(&#x27;----&#x27;)</span><br><span class="line"> &#125;, 1000)</span><br><span class="line"></span><br><span class="line"> // clearInterval(intervalId)</span><br><span class="line"></span><br><span class="line">   // 闭包</span><br><span class="line"> function fn1() &#123;</span><br><span class="line">   var a = 4</span><br><span class="line">   function fn2() &#123;</span><br><span class="line">     console.log(++a)</span><br><span class="line">   &#125;</span><br><span class="line">   return fn2</span><br><span class="line"> &#125;</span><br><span class="line"> var f = fn1()</span><br><span class="line"> f()</span><br><span class="line"> // f = null</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>不使用let const var等去声明,实际上是挂载到[<code>window</code>]上的,所以导致内存泄露</p><p><a href="https://imgtu.com/i/4dRvo6"><img src="https://z3.ax1x.com/2021/09/23/4dRvo6.png" alt="4dRvo6.png"></a></p><h3 id="相关面试题1"><a href="#相关面试题1" class="headerlink" title="相关面试题1"></a>相关面试题1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码片段一  --&gt;没有产生闭包:因为内部函数没有调用外部变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line"><span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object.getNameFunc()());  <span class="comment">//?  the window</span></span><br><span class="line"><span class="comment">//函数体的this是window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码片段二</span></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object2 = &#123;</span><br><span class="line"><span class="attr">name2</span> : <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line"><span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//此处的this指向是[getNameFunc],他是对象中的属性,所以this指向就是object</span></span><br><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">//此处用的是保存的  that</span></span><br><span class="line"> <span class="keyword">return</span> that.name2;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object2.getNameFunc()()); <span class="comment">//?  my object</span></span><br></pre></td></tr></table></figure><ol><li>代码片段一:</li></ol><ul><li>函数体的<code>this</code>指向是[<code>window</code>]</li><li>没有产生闭包:因为内部函数没有调用外部变量</li></ul><ol start="2"><li>代码片段二为何指向是对象?</li></ol><ul><li>this指向是调用它的[<code>getNameFunc</code>],他是对象中的属性,所以this指向就是object</li><li>产生了闭包</li></ul><h3 id="相关面试题2"><a href="#相关面试题2" class="headerlink" title="相关面试题2"></a>相关面试题2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(o)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> fun(m,n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>) <span class="comment">//undefined</span></span><br><span class="line">a.fun(<span class="number">1</span>)  <span class="comment">//0</span></span><br><span class="line">a.fun(<span class="number">2</span>)  <span class="comment">//0</span></span><br><span class="line">a.fun(<span class="number">3</span>)  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>) <span class="comment">//undefined 0 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>) <span class="comment">//undefined  0</span></span><br><span class="line">c.fun(<span class="number">2</span>)<span class="comment">//1 --&gt;经过上方定义后 n固定为1</span></span><br><span class="line">c.fun(<span class="number">3</span>)<span class="comment">//1 --&gt;此处是陷阱!!!  一直没有改到n,所以一直是1</span></span><br></pre></td></tr></table></figure><h1 id="面向对象高级"><a href="#面向对象高级" class="headerlink" title="面向对象高级"></a>面向对象高级</h1><h2 id="对象创建模式"><a href="#对象创建模式" class="headerlink" title="对象创建模式"></a>对象创建模式</h2><h3 id="Object构造函数模式"><a href="#Object构造函数模式" class="headerlink" title="Object构造函数模式"></a>Object构造函数模式</h3><ul><li>套路: 先创建空Object对象, 再动态添加属性/方法</li><li>适用场景: 起始时不确定对象内部数据</li><li>问题: 语句太多</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一个人: name:&quot;Tom&quot;, age: 12*/</span></span><br><span class="line"><span class="comment">// 先创建空Object对象</span></span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"> p = &#123;&#125; <span class="comment">//此时内部数据是不确定的</span></span><br><span class="line"> <span class="comment">// 再动态添加属性/方法</span></span><br><span class="line"> p.name = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"> p.age = <span class="number">12</span></span><br><span class="line"> p.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.name = name</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//测试</span></span><br><span class="line"> <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line"> p.setName(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(p.name, p.age)</span><br></pre></td></tr></table></figure><h3 id="对象字面量模式"><a href="#对象字面量模式" class="headerlink" title="对象字面量模式"></a>对象字面量模式</h3><ul><li>套路: 使用{}创建对象, 同时指定属性/方法</li><li>适用场景: 起始时对象内部数据是确定的</li><li>问题: 如果创建多个对象, 有重复代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象字面量模式</span></span><br><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">   <span class="attr">setName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//测试</span></span><br><span class="line"> <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line"> p.setName(<span class="string">&#x27;JACK&#x27;</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> p2 = &#123;  <span class="comment">//如果创建多个对象代码很重复</span></span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">13</span>,</span><br><span class="line">   <span class="attr">setName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul><li>套路: 通过工厂函数动态创建对象并返回</li><li>适用场景: 需要创建多个对象</li><li>问题: <code>对象没有一个具体的类型</code>, 都是Object类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个对象的函数===&gt;工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: name,</span><br><span class="line">   <span class="attr">age</span>: age,</span><br><span class="line">   <span class="attr">setName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建2个人</span></span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1/p2是Object类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: name,</span><br><span class="line">   <span class="attr">price</span>: price</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = createStudent(<span class="string">&#x27;张三&#x27;</span>, <span class="number">12000</span>)</span><br><span class="line"><span class="comment">// s也是Object</span></span><br></pre></td></tr></table></figure><h3 id="自定义构造函数模式"><a href="#自定义构造函数模式" class="headerlink" title="自定义构造函数模式"></a>自定义构造函数模式</h3><ul><li>套路: 自定义构造函数, 通过new创建对象</li><li>适用场景: 需要创建多个<code>类型确定</code>的对象,与上方工厂模式有所对比</li><li>问题: 每个对象都有相同的数据, 浪费内存</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line"> <span class="built_in">this</span>.age = age</span><br><span class="line"> <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.name = name</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">p1.setName(<span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name, p1.age)</span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, price</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line"> <span class="built_in">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">13000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Student)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;JACK&#x27;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1, p2)</span><br></pre></td></tr></table></figure><h3 id="构造函数-原型的组合模式"><a href="#构造函数-原型的组合模式" class="headerlink" title="构造函数+原型的组合模式"></a>构造函数+原型的组合模式</h3><p><code>最好用这个写法</code></p><ul><li>套路: 自定义构造函数, 属性在函数中初始化, 方法添加到原型上</li><li>适用场景: 需要<code>创建多个类型确定</code>的对象</li><li>放在原型上可以节省空间(只需要加载一遍方法)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在构造函数中只初始化一般函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line"> <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1, p2)</span><br></pre></td></tr></table></figure><h2 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><ol><li>套路<ul><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型</li><li><code>将子类型原型的构造属性设置为子类型</code>–&gt;此处有疑惑的可以看本笔记[函数高级部分的1、原型与原型链](#1、原型与原型</li><li>给子类型原型添加方法</li><li>创建子类型的对象: 可以调用父类型的方法</li></ul></li><li>关键<ul><li><code>子类型的原型为父类型的一个实例对象</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Supper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.supProp = <span class="string">&#x27;父亲的原型链&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给父类型的原型上增加一个[showSupperProp]方法,打印自身subProp</span></span><br><span class="line">Supper.prototype.showSupperProp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.supProp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.subProp = <span class="string">&#x27;儿子的原型链&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型的原型为父类型的一个实例对象</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Supper()</span><br><span class="line"><span class="comment">// 让子类型的原型的constructor指向子类型</span></span><br><span class="line"><span class="comment">// 如果不加,其构造函数找的[`new Supper()`]时从顶层Object继承来的构造函数,指向[`Supper()`]</span></span><br><span class="line">Sub.prototype.constructor = Sub</span><br><span class="line"><span class="comment">//给子类型的原型上增加一个[showSubProp]方法,打印自身subProp</span></span><br><span class="line">Sub.prototype.showSubProp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.subProp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub()</span><br><span class="line"></span><br><span class="line">sub.showSupperProp() <span class="comment">//父亲的原型链</span></span><br><span class="line">sub.showSubProp() <span class="comment">//儿子的原型链</span></span><br><span class="line"><span class="built_in">console</span>.log(sub)  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Sub &#123;subProp: &quot;儿子的原型链&quot;&#125;</span></span><br><span class="line"><span class="comment">subProp: &quot;儿子的原型链&quot;</span></span><br><span class="line"><span class="comment">__proto__: Supper</span></span><br><span class="line"><span class="comment">constructor: ƒ Sub()</span></span><br><span class="line"><span class="comment">showSubProp: ƒ ()</span></span><br><span class="line"><span class="comment">supProp: &quot;父亲的原型链&quot;</span></span><br><span class="line"><span class="comment">__proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="①-示例图"><a href="#①-示例图" class="headerlink" title="① 示例图"></a>① 示例图</h4><p><code>注意</code>:此图中没有体现[<code>constructor构造函数 </code>],会在下方构造函数补充处指出</p><p><a href="https://imgtu.com/i/4dWSJO"><img src="https://z3.ax1x.com/2021/09/23/4dWSJO.png" alt="4dWSJO.png"></a></p><h4 id="②-构造函数补充"><a href="#②-构造函数补充" class="headerlink" title="② 构造函数补充"></a>② 构造函数补充</h4><p>对于代码中[<code>Sub.prototype.constructor = Sub</code>]是否有疑惑?</p><p>如果不加,其构造函数找的[<code>new Supper()</code>]是从顶层Object继承来的构造函数,指向[<code>Supper()</code>],虽然如果你不加这句话,大体上使用是不受影响的,但是你有一个属性指向是错误的,如果在大型项目中万一万一哪里再调用到了呢?</p><ol><li>这里可以补充一下constructor 的概念：</li></ol><ul><li><code>constructor 我们称为构造函数，因为它指回构造函数本身</code></li><li>其作用是让某个构造函数产生的 所有实例对象（比如f） 能够找到他的构造函数（比如Fun），用法就是f.constructor</li></ul><ol start="2"><li>此时实例对象里没有constructor 这个属性，于是沿着原型链往上找到Fun.prototype 里的constructor，并指向Fun 函数本身</li></ol><ul><li>constructor本就存在于原型中,指向构造函数,成为子对象后，如果该原型链中的constructor在自身没有而是在父原型中找到,所以指向父类的构造函数</li></ul><ol start="3"><li>由于这里的继承是直接改了构造函数的prototype 的指向，所以在 sub的原型链中，Sub.prototype 没有constructor 属性，反而是看到了一个super 实例</li><li>这就让sub 实例的constructor 无法使用了。为了他还能用，就在那个super 实例中手动加了一个constructor 属性，且指向Sub 函数看到了一个super 实例</li></ol><h3 id="借用构造函数继承-假的"><a href="#借用构造函数继承-假的" class="headerlink" title="借用构造函数继承(假的)"></a>借用构造函数继承(假的)</h3><ol><li>套路:<ul><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型构造函数中调用父类型构造</li></ul></li><li>关键:<ul><li><code>在子类型构造函数中通用call()调用父类型构造函数</code></li></ul></li><li>作用:</li></ol><ul><li>能借用父类中的构造方法,但是不灵活</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line"> <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//此处利用call(),将 [Student]的this传递给Person构造函数</span></span><br><span class="line"> Person.call(<span class="built_in">this</span>, name, age)  <span class="comment">// 相当于: this.Person(name, age)</span></span><br><span class="line"> <span class="comment">/*this.name = name</span></span><br><span class="line"><span class="comment"> this.age = age*/</span></span><br><span class="line"> <span class="built_in">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="number">14000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.name, s.age, s.price)</span><br></pre></td></tr></table></figure><p>[<code>Person</code>]中的this是动态变化的,在[<code>Student</code>]中利用[<code>Person.call(this, name, age)</code>]改变了其this指向,所以可以实现此效果</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>方式3: 原型链+借用构造函数的组合继承</p><ol><li>利用原型链实现对父类型对象的方法继承</li><li>利用call()借用父类型构建函数初始化相同属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line"> <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, price</span>) </span>&#123;</span><br><span class="line"> Person.call(<span class="built_in">this</span>, name, age)  <span class="comment">// 为了得到属性</span></span><br><span class="line"> <span class="built_in">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person() <span class="comment">// 为了能看到父类型的方法</span></span><br><span class="line">Student.prototype.constructor = Student <span class="comment">//修正constructor属性</span></span><br><span class="line">Student.prototype.setPrice = <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">24</span>, <span class="number">15000</span>)</span><br><span class="line">s.setName(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line">s.setPrice(<span class="number">16000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.name, s.age, s.price)</span><br></pre></td></tr></table></figure><h1 id="线程机制与事件机制"><a href="#线程机制与事件机制" class="headerlink" title="线程机制与事件机制"></a>线程机制与事件机制</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p><a href="https://imgtu.com/i/4dWCSe"><img src="https://z3.ax1x.com/2021/09/23/4dWCSe.png" alt="4dWCSe.png"></a></p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol><li>程序的一次执行,它<code>占有一片独有的内存空间</code></li><li>可以通过windows任务管理器查看进程</li></ol><ul><li>可以看出每个程序的内存空间是相互独立的</li><li><a href="https://imgtu.com/i/4dWpWD"><img src="https://z3.ax1x.com/2021/09/23/4dWpWD.png" alt="4dWpWD.png"></a></li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>概念:</p><ul><li>是进程内的一个独立执行单元</li><li>是程序执行的一个完整流程</li><li>是CPU的最小的调度单元</li></ul><h3 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h3><ol><li>应用程序必须运行在某个进程的某个线程上</li><li>一个进程中至少有一个运行的线程:主线程 ,进程启动后自动创建</li><li>一个进程中也可以同时运行多个线程:此时我们会说这个程序是多线程运行的</li><li>多个进程之间的数据是不能直接共享的，内存相互独立(隔离)</li><li><code>线程池(thread pool)</code>:保存多个线程对象的容器,实现线程对象的反复利用</li></ol><h3 id="引出的问题"><a href="#引出的问题" class="headerlink" title="引出的问题"></a>引出的问题</h3><h4 id="①-何为多进程与多线程"><a href="#①-何为多进程与多线程" class="headerlink" title="① 何为多进程与多线程?"></a>① 何为多进程与多线程?</h4><p>多进程运行: 一应用程序可以同时启动多个实例运行</p><p>多线程: 在一个进程内, 同时有多个线程运行</p><h4 id="②比较单线程与多线程"><a href="#②比较单线程与多线程" class="headerlink" title="②比较单线程与多线程?"></a>②比较单线程与多线程?</h4><p>多线程:</p><ul><li>优点:<ul><li>能有效提升CPU的利用率</li></ul></li><li>缺点<ul><li>创建多线程开销</li><li>线程间切换开销</li><li>死锁与状态同步问题</li></ul></li></ul><p>单线程:</p><ul><li>优点:顺序编程简单易懂</li><li>缺点:效率低</li></ul><h4 id="③-JS是单线程还是多线程"><a href="#③-JS是单线程还是多线程" class="headerlink" title="③ JS是单线程还是多线程?"></a>③ JS是单线程还是多线程?</h4><p><code>JS是单线程运行的 , 但使用H5中的 Web Workers可以多线程运行</code></p><ul><li>只能由一个线程去操作DOM界面</li></ul><h4 id="④-浏览器运行是单线程还是多线程"><a href="#④-浏览器运行是单线程还是多线程" class="headerlink" title="④ 浏览器运行是单线程还是多线程?"></a>④ 浏览器运行是单线程还是多线程?</h4><p>都是多线程运行的</p><h4 id="⑤-浏览器运行是单进程还是多进程"><a href="#⑤-浏览器运行是单进程还是多进程" class="headerlink" title="⑤ 浏览器运行是单进程还是多进程?"></a>⑤ 浏览器运行是单进程还是多进程?</h4><p>有的是单进程:</p><ul><li>firefox</li><li>老版IE</li></ul><p>有的是多进程:</p><ul><li>chrome</li><li>新版IE</li></ul><p>如何查看浏览器是否是多进程运行的呢? 任务管理器–&gt;进程</p><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><blockquote><p>支撑浏览器运行的最核心的程序</p></blockquote><h3 id="不同浏览器的内核"><a href="#不同浏览器的内核" class="headerlink" title="不同浏览器的内核"></a>不同浏览器的内核</h3><ul><li>Chrome, Safari : webkit</li><li>firefox : Gecko</li><li>IE    : Trident</li><li>360,搜狗等国内浏览器: Trident + webkit</li></ul><h3 id="内核由什么模块组成"><a href="#内核由什么模块组成" class="headerlink" title="内核由什么模块组成?"></a>内核由什么模块组成?</h3><p>主线程</p><ol><li>js引擎模块 : 负责js程序的编译与运行</li><li>html,css文档解析模块 : 负责页面文本的解析(拆解)</li><li>dom/css模块 : 负责dom/css在内存中的相关处理</li><li>布局和渲染模块 : 负责页面的布局和效果的绘制</li><li>布局和渲染模块 : 负责页面的布局和效果的绘制</li></ol><p>分线程</p><ul><li>定时器模块 : 负责定时器的管理</li><li>网络请求模块 : 负责服务器请求(常规/Ajax)</li><li>事件响应模块 : 负责事件的管理</li></ul><p>图例</p><p><a href="https://imgtu.com/i/4dWiyd"><img src="https://z3.ax1x.com/2021/09/23/4dWiyd.png" alt="4dWiyd.png"></a></p><h2 id="定时器引发的思考"><a href="#定时器引发的思考" class="headerlink" title="定时器引发的思考"></a>定时器引发的思考</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>启动定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;启动定时器前...&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="built_in">console</span>.log(<span class="string">&#x27;定时器执行了&#x27;</span>, <span class="built_in">Date</span>.now()-start) <span class="comment">//定时器并不能保证真正定时执行,一般会延迟一丁点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;, <span class="number">200</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;启动定时器后...&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 做一个长时间的工作</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123; <span class="comment">//会造成定时器延长很长时间</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   ...</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="定时器真是定时执行的吗"><a href="#定时器真是定时执行的吗" class="headerlink" title="定时器真是定时执行的吗?"></a>定时器真是定时执行的吗?</h3><ul><li>定时器并不能保证真正定时执行</li><li>一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)</li></ul><h3 id="定时器回调函数是在分线程执行的吗"><a href="#定时器回调函数是在分线程执行的吗" class="headerlink" title="定时器回调函数是在分线程执行的吗?"></a>定时器回调函数是在分线程执行的吗?</h3><p>在主线程执行的, JS是单线程的</p><h3 id="定时器是如何实现的"><a href="#定时器是如何实现的" class="headerlink" title="定时器是如何实现的?"></a>定时器是如何实现的?</h3><p><code>事件循环模型</code></p><h2 id="JS是单线程的"><a href="#JS是单线程的" class="headerlink" title="JS是单线程的"></a>JS是单线程的</h2><h3 id="如何证明JS执行是单线程的"><a href="#如何证明JS执行是单线程的" class="headerlink" title="如何证明JS执行是单线程的"></a>如何证明JS执行是单线程的</h3><ul><li><code>setTimeout()的回调函数是在主线程执行的</code></li><li>定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如何证明JS执行是单线程的</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//4. 在将[timeout 1111]弹窗关闭后,再等一秒 执行此处</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;timeout 2222&#x27;</span>)</span><br><span class="line">   alert(<span class="string">&#x27;22222222&#x27;</span>)</span><br><span class="line"> &#125;, <span class="number">2000</span>)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//3. 过了一秒后 打印 timeout 1111并弹窗,此处如果不将弹窗关闭,不会继续执行上方222</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;timeout 1111&#x27;</span>)</span><br><span class="line">   alert(<span class="string">&#x27;1111111&#x27;</span>)</span><br><span class="line"> &#125;, <span class="number">1000</span>)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//2. 然后打印timeout() 00000</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;timeout() 00000&#x27;</span>)</span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="comment">//1. fn()</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;fn()&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> fn()</span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;alert()之前&#x27;</span>)</span><br><span class="line"> alert(<span class="string">&#x27;------&#x27;</span>) <span class="comment">//暂停当前主线程的执行, 同时暂停计时, 点击确定后, 恢复程序执行和计时</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;alert()之后&#x27;</span>)</span><br></pre></td></tr></table></figure><p>流程结果:</p><ol><li>先打印了[<code>fn()</code>],然后马上就打印了[<code>timeout() 00000</code>]</li><li>过了一秒后 打印 timeout 1111并弹窗,此处如果不将弹窗关闭,不会继续执行上方222</li><li>在将[timeout 1111]弹窗关闭后,<code>再等一秒</code> 执行此处</li></ol><ul><li>问:为何明明写的是2秒,却关闭上一个弹窗再过一秒就执行?</li><li>解:并不是关闭后再计算的,而是一起计算的,alert只是暂停了主线程执行</li></ul><h3 id="JS引擎执行代码的基本流程与代码分类"><a href="#JS引擎执行代码的基本流程与代码分类" class="headerlink" title="JS引擎执行代码的基本流程与代码分类"></a>JS引擎执行代码的基本流程与代码分类</h3><p>代码分类:</p><ul><li>初始化代码</li><li>回调代码</li></ul><p>js引擎执行代码的基本流程</p><ol><li>先执行初始化代码: 包含一些特别的代码   回调函数(异步执行)</li></ol><ul><li>设置定时器</li><li>绑定事件监听</li><li>发送ajax请求</li></ul><ol start="2"><li>后面在某个时刻才会执行回调代码</li></ol><h3 id="为什么js要用单线程模式-而不用多线程模式"><a href="#为什么js要用单线程模式-而不用多线程模式" class="headerlink" title="为什么js要用单线程模式, 而不用多线程模式?"></a>为什么js要用单线程模式, 而不用多线程模式?</h3><ol><li><p>JavaScript的单线程，与它的用途有关。</p></li><li><p>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。</p></li><li><p>这决定了它只能是单线程，否则会带来很复杂的同步问题</p><ul><li>举个栗子:如果我们要实现更新页面上一个dom节点然后删除,用单线程是没问题的</li><li>但是如果多线程,当我删除线程先删除了dom节点,更新线程要去更新的时候就会出错</li></ul></li></ol><h2 id="事件循环模型-Event-Loop-机制"><a href="#事件循环模型-Event-Loop-机制" class="headerlink" title="事件循环模型(Event Loop)机制"></a>事件循环模型(Event Loop)机制</h2><h3 id="概念引出"><a href="#概念引出" class="headerlink" title="概念引出"></a>概念引出</h3><p>我们都知道，<code>javascript从诞生之日起就是一门单线程的非阻塞的脚本语言</code>。这是由其最初的用途来决定的：<code>与浏览器交互</code>。</p><p>单线程意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。</p><p><code>非阻塞</code>:</p><p>而非阻塞则是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。</p><p><code>单线程是必要的</code>:</p><p>也是javascript这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的dom操作。试想一下 如果javascript是多线程的，那么当两个线程同时对dom进行一项操作，例如一个向其添加事件，而另一个删除了这个dom，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，javascript选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。</p><p>当然，现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了<code>web workers</code>技术。这项技术号称可以让javaScript成为一门多线程语言。</p><p>然而，使用web workers技术开的多线程有着诸多限制，例如：<code>所有新线程都受主线程的完全控制，不能独立执行</code>。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。</p><p>可以预见，未来的javascript也会一直是一门单线程的语言。</p><p>话说回来，前面提到javascript的另一个特点是“<code>非阻塞</code>”，那么javascript引擎到底是如何实现的这一点呢？</p><p>答案就是——event loop（事件循环）。</p><p><strong>注：<code>虽然nodejs中的也存在与传统浏览器环境下的相似的事件循环。然而两者间却有着诸多不同，故把两者分开，单独解释</code>。</strong></p><h3 id="浏览器环境下JS引擎的事件循环机制"><a href="#浏览器环境下JS引擎的事件循环机制" class="headerlink" title="浏览器环境下JS引擎的事件循环机制"></a>浏览器环境下JS引擎的事件循环机制</h3><h4 id="①-执行栈概念"><a href="#①-执行栈概念" class="headerlink" title="① 执行栈概念"></a>① 执行栈概念</h4><p>当javascript代码执行的时候会将不同的变量存于内存中的不同位置：<code>堆（heap）</code>和<code>栈（stack）</code>中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针。 <code>但是我们这里说的执行栈和上面这个栈的意义却有些不同</code>。</p><p><code>执行栈</code>:</p><blockquote><p>当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫<code>执行上下文</code>。这个执行环境中存在着这个方法的私有作用域、上层作用域的指向、方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。</p></blockquote><p>当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。<code>当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境</code>。这个过程反复进行，直到执行栈中的代码全部执行完毕。</p><p>此处继续拿出栈图加深理解:</p><p><a href="https://imgtu.com/i/4dWAeI"><img src="https://z3.ax1x.com/2021/09/23/4dWAeI.gif" alt="4dWAeI.gif"></a></p><p>从图片可知，一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境。这个过程可以是无限进行下去的，<code>除非发生了栈溢出，即超过了所能使用内存的最大值</code>。</p><p>以上的过程说的都是同步代码的执行。那么当一个异步代码（如发送ajax请求数据）执行后会如何呢？</p><blockquote><p>刚刚说过js的另一大特点是非阻塞，实现这一点的关键在于下面要说的这项机制——<code>事件队列（Task Queue）</code>。</p></blockquote><h4 id="②-事件队列（Task-Queue）"><a href="#②-事件队列（Task-Queue）" class="headerlink" title="② 事件队列（Task Queue）"></a>② 事件队列（Task Queue）</h4><p>JS引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务,当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为<code>事件队列</code>。</p><blockquote><p>被放入事件队列不会立刻执行其回调，而是<code>等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务</code>。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，<code>这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</code></p></blockquote><p>这里还有一张图来展示这个过程:</p><p><a href="https://imgtu.com/i/4dWEwt"><img src="https://z3.ax1x.com/2021/09/23/4dWEwt.png" alt="4dWEwt.png"></a></p><p>图中的stack表示我们所说的执行栈，web apis则是代表一些异步事件，而callback queue即事件队列。</p><p>以上的事件循环过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。<code>不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）</code>。</p><h3 id="宏任务-macro-task-与微任务-micro-task"><a href="#宏任务-macro-task-与微任务-micro-task" class="headerlink" title="宏任务(macro task)与微任务(micro task)"></a>宏任务(macro task)与微任务(micro task)</h3><h4 id="①-宏任务队列与微任务队列解释"><a href="#①-宏任务队列与微任务队列解释" class="headerlink" title="① 宏任务队列与微任务队列解释"></a>① 宏任务队列与微任务队列解释</h4><p>顾名思义,宏任务放至宏任务队列(<code>简称宏队列</code>)中、微任务放至微任务队列(<code>简称微队列</code>)中</p><ol><li>JS中用来存储待执行回调函数的队列包含2个不同特定的列队</li></ol><ul><li><code>宏队列</code>:用来保存待执行的宏任务(回调),比如:<code>定时器</code>回调/ajax回调/dom事件回调</li><li><code>微队列</code>:用来保存待执行的微任务(回调),比如:<code>Promise</code>的回调/muntation回调</li></ul><ol start="2"><li>JS执行时会区别这2个队列:<ul><li>JS执行引擎首先必须执行所有的<code>初始化同步任务</code>代码</li><li>每次准备取出第一个<code>宏任务执行前</code>,都要将所有的<code>微任务</code>一个一个取出来执行</li></ul></li></ol><p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p>我们只需记住:** <code>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</code> **</p><h4 id="②-原理图"><a href="#②-原理图" class="headerlink" title="② 原理图"></a>② 原理图</h4><p><a href="https://imgtu.com/i/4dWVTP"><img src="https://z3.ax1x.com/2021/09/23/4dWVTP.png" alt="4dWVTP.png"></a></p><h4 id="③-由代码逆向理解宏任务与微任务"><a href="#③-由代码逆向理解宏任务与微任务" class="headerlink" title="③ 由代码逆向理解宏任务与微任务"></a>③ 由代码逆向理解宏任务与微任务</h4><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;timeout callback1（）&#x27;</span>)<span class="comment">//立即放入宏队列</span></span><br><span class="line">   <span class="built_in">Promise</span>.resolve(<span class="number">3</span>).then(</span><br><span class="line">     <span class="function"><span class="params">value</span> =&gt;</span> &#123; </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;Promise onResolved3()&#x27;</span>, value)<span class="comment">//当这个宏任务执行后 立马放入微队列,所以这个微任务执行完后下个宏任务才能执行 </span></span><br><span class="line">     &#125;</span><br><span class="line">   )</span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;timeout callback2（）&#x27;</span>) <span class="comment">//立即放入宏队列,</span></span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(</span><br><span class="line">   <span class="function"><span class="params">value</span> =&gt;</span> &#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Promise onResolved1()&#x27;</span>, value)<span class="comment">//立即放入微队列</span></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;timeout callback3（）&#x27;</span>, value) <span class="comment">//立即放入宏任务</span></span><br><span class="line">     &#125;, <span class="number">0</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">2</span>).then(</span><br><span class="line">   <span class="function"><span class="params">value</span> =&gt;</span> &#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Promise onResolved2()&#x27;</span>, value)<span class="comment">//立即放入微队列</span></span><br><span class="line">   &#125;</span><br><span class="line"> )</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;同步代码&#x27;</span>) <span class="comment">//同步代码立即执行</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;同步代码&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Promise onResolved1()&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Promise onResolved2()&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;timeout callback1（）&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Promise onResolved3()&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;timeout callback2（）&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;timeout callback3（）&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="node环境下-的事件循环机制"><a href="#node环境下-的事件循环机制" class="headerlink" title="node环境下 的事件循环机制"></a>node环境下 的事件循环机制</h3><blockquote><p><code>不学node的小伙伴就跳过此部分直接去下一节Web Workers笔记吧</code></p></blockquote><h4 id="①-与浏览器环境有何不同"><a href="#①-与浏览器环境有何不同" class="headerlink" title="① 与浏览器环境有何不同?"></a>① <strong>与浏览器环境有何不同?</strong></h4><p>在node中，事件循环表现出的状态与浏览器中大致相同。不同的是node中有一套自己的模型。node中事件循环的实现是依靠的libuv引擎。我们知道node选择chrome v8引擎作为js解释器，v8引擎将js代码分析后去调用对应的node api，而这些api最后则由libuv引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 <code>因此实际上node中的事件循环存在于libuv引擎中</code>。</p><h4 id="②-事件循环模型"><a href="#②-事件循环模型" class="headerlink" title="② 事件循环模型"></a>② <strong>事件循环模型</strong></h4><p>下面是一个libuv引擎中的事件循环的模型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libuv引擎中的事件循环的模型</span></span><br><span class="line">┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;──connections───     │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><p><em>注：模型中的每一个方块代表事件循环的一个阶段</em></p><p>这个模型是node官网上的一篇文章中给出的，我下面的解释也都来源于这篇文章。我会在文末把文章地址贴出来，有兴趣的朋友可以亲自与看看原文。</p><h4 id="③-事件循环各阶段详解"><a href="#③-事件循环各阶段详解" class="headerlink" title="③ 事件循环各阶段详解"></a>③ <strong>事件循环各阶段详解</strong></h4><blockquote><p>从上面这个模型中，我们可以大致分析出node中的事件循环的顺序：</p><blockquote><p>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I/O事件回调阶段(I/O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段…</p></blockquote><p>这些阶段大致的功能如下：</p><ul><li>timers(定时器检测阶段): 这个阶段执行定时器队列中的回调如 <code>setTimeout()</code> 和 <code>setInterval()</code>。</li><li>I/O callbacks(I/O事件回调阶段): 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和<code>setImmediate()</code>的回调。</li><li>idle, prepare: 这个阶段仅在内部使用，可以不必理会。</li><li>poll(轮询阶段): 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。</li><li>check(检查阶段): <code>setImmediate()</code>的回调会在这个阶段执行。</li><li>close callbacks(关闭事件回调阶段): 例如<code>socket.on(&#39;close&#39;, ...)</code>这种close事件的回调。</li></ul><p>下面我们来按照代码第一次进入libuv引擎后的顺序来详细解说这些阶段：</p></blockquote><h5 id="poll-轮询阶段"><a href="#poll-轮询阶段" class="headerlink" title="poll(轮询阶段)"></a><strong>poll(轮询阶段)</strong></h5><blockquote><p>当个v8引擎将js代码解析后传入libuv引擎后，循环首先进入poll阶段。poll阶段的执行逻辑如下： 先查看poll queue中是否有事件，有任务就按先进先出的顺序依次执行回调。 当queue为空时，会检查是否有setImmediate()的callback，如果有就进入check阶段执行这些callback。但同时也会检查是否有到期的timer，如果有，就把这些到期的timer的callback按照调用顺序放到timer queue中，之后循环会进入timer阶段执行queue中的 callback。 这两者的顺序是不固定的，收到代码运行的环境的影响。如果两者的queue都是空的，那么loop会在poll阶段停留，直到有一个i/o事件返回，循环会进入i/o callback阶段并立即执行这个事件的callback。</p><p>值得注意的是，poll阶段在执行poll queue中的回调时实际上不会无限的执行下去。<code>有两种情况poll阶段会终止执行poll queue中的下一个回调：1.所有回调执行完毕。2.执行数超过了node的限制。</code></p></blockquote><h5 id="check-检查阶段"><a href="#check-检查阶段" class="headerlink" title="check(检查阶段)"></a>check(检查阶段)</h5><blockquote><p>check阶段专门用来执行<code>setImmediate()</code>方法的回调，当poll阶段进入空闲状态，并且setImmediate queue中有callback时，事件循环进入这个阶段。</p></blockquote><h5 id="close-callbacks-关闭事件回调阶段"><a href="#close-callbacks-关闭事件回调阶段" class="headerlink" title="close callbacks(关闭事件回调阶段)"></a>close callbacks(关闭事件回调阶段)</h5><blockquote><p>当一个socket连接或者一个handle被突然关闭时（例如调用了<code>socket.destroy()</code>方法），close事件会被发送到这个阶段执行回调。否则事件会用<code>process.nextTick（）</code>方法发送出去。</p></blockquote><h5 id="timers-定时器检测阶段"><a href="#timers-定时器检测阶段" class="headerlink" title="timers(定时器检测阶段)"></a>timers(定时器检测阶段)</h5><blockquote><p>这个阶段以先进先出的方式执行所有到期的timer加入timer队列里的callback，一个timer callback指得是一个通过setTimeout或者setInterval函数设置的回调函数。</p></blockquote><h5 id="I-O-callbacks-I-O事件回调阶段"><a href="#I-O-callbacks-I-O事件回调阶段" class="headerlink" title="I/O callbacks(I/O事件回调阶段)"></a>I/O callbacks(I/O事件回调阶段)</h5><blockquote><p>如上文所言，这个阶段主要执行大部分I/O事件的回调，包括一些为操作系统执行的回调。例如一个TCP连接生错误时，系统需要执行回调来获得这个错误的报告。</p></blockquote><h4 id="④-process-nextTick-setTimeout与setImmediate的区别与使用场景"><a href="#④-process-nextTick-setTimeout与setImmediate的区别与使用场景" class="headerlink" title="④ process.nextTick,setTimeout与setImmediate的区别与使用场景"></a>④ <strong>process.nextTick,setTimeout与setImmediate的区别与使用场景</strong></h4><blockquote><p>在node中有三个常用的用来推迟任务执行的方法：process.nextTick,setTimeout（setInterval与之相同）与setImmediate</p></blockquote><p>这三者间存在着一些非常不同的区别：</p><h5 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a><strong>process.nextTick()</strong></h5><blockquote><p>尽管没有提及，但是实际上node中存在着一个特殊的队列，即nextTick queue。这个队列中的回调执行虽然没有被表示为一个阶段，当时这些事件却会在每一个阶段执行完毕准备进入下一个阶段时优先执行。当事件循环准备进入下一个阶段之前，会先检查nextTick queue中是否有任务，如果有，那么会先清空这个队列。与执行poll queue中的任务不同的是，这个操作在队列清空前是不会停止的。这也就意味着，错误的使用<code>process.nextTick()</code>方法会导致node进入一个死循环。。直到内存泄漏。</p><p>使用这个方法比较合适呢？下面有一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">const</span> server = net.createServer(<span class="function">() =&gt;</span> &#123;&#125;).listen(<span class="number">8080</span>);</span><br><span class="line">&gt;server.on(<span class="string">&#x27;listening&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>这个例子中当，当listen方法被调用时，除非端口被占用，否则会立刻绑定在对应的端口上。这意味着此时这个端口可以立刻触发listening事件并执行其回调。然而，这时候<code>on(&#39;listening)</code>还没有将callback设置好，自然没有callback可以执行。为了避免出现这种情况，node会在listen事件中使用<code>process.nextTick()</code>方法，确保事件在回调函数绑定后被触发。</p></blockquote><h5 id="setTimeout-和setImmediate"><a href="#setTimeout-和setImmediate" class="headerlink" title="setTimeout()和setImmediate()"></a><strong>setTimeout()和setImmediate()</strong></h5><blockquote><p>在三个方法中，这两个方法最容易被弄混。实际上，某些情况下这两个方法的表现也非常相似。然而实际上，这两个方法的意义却大为不同。</p><p><code>setTimeout()</code>方法是定义一个回调，并且希望这个回调在我们所指定的时间间隔后第一时间去执行。注意这个“第一时间执行”，这意味着，受到操作系统和当前执行任务的诸多影响，该回调并不会在我们预期的时间间隔后精准的执行。执行的时间存在一定的延迟和误差，这是不可避免的。node会在可以执行timer回调的第一时间去执行你所设定的任务。</p><p><code>setImmediate()</code>方法从意义上将是立刻执行的意思，但是实际上它却是在一个固定的阶段才会执行回调，即poll阶段之后。有趣的是，这个名字的意义和之前提到过的<code>process.nextTick()</code>方法才是最匹配的。node的开发者们也清楚这两个方法的命名上存在一定的混淆，他们表示不会把这两个方法的名字调换过来—因为有大量的node程序使用着这两个方法，调换命名所带来的好处与它的影响相比不值一提。</p><p><code>setTimeout()</code>和不设置时间间隔的<code>setImmediate()</code>表现上及其相似。猜猜下面这段代码的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">&gt;&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&gt;setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;immediate&#x27;</span>);</span><br><span class="line">&gt;&#125;);</span><br></pre></td></tr></table></figure><p>实际上，答案是不一定。没错，就连node的开发者都无法准确的判断这两者的顺序谁前谁后。这取决于这段代码的运行环境。运行环境中的各种复杂的情况会导致在同步队列里两个方法的顺序随机决定。但是，在一种情况下可以准确判断两个方法回调的执行顺序，那就是在一个I/O事件的回调中。下面这段代码的顺序永远是固定的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&gt;fs.readFile(__filename, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">   &#125;, <span class="number">0</span>);</span><br><span class="line">   setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;immediate&#x27;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&gt;&#125;);</span><br></pre></td></tr></table></figure><p>答案永远是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;immediate</span><br><span class="line">&gt;timeout</span><br></pre></td></tr></table></figure><p>因为在I/O事件的回调中，setImmediate方法的回调永远在timer的回调前执行。</p></blockquote><h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>想了解更多可以点击链接查看更多,此处只是大致了解学习  </p><ol><li>H5规范提供了js分线程的实现, 取名为: Web Workers</li><li>相关API</li></ol><ul><li>Worker: 构造函数, 加载分线程执行的js文件</li><li>Worker.prototype.onmessage: 用于接收另一个线程的回调函数</li><li>Worker.prototype.postMessage: 向另一个线程发送消息</li></ul><ol start="3"><li>不足</li></ol><ul><li>worker内代码不能操作DOM(更新UI)</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ul><h3 id="抛砖引玉-引出用处"><a href="#抛砖引玉-引出用处" class="headerlink" title="抛砖引玉,引出用处"></a>抛砖引玉,引出用处</h3><p>还是拿斐波那契（Fibonacci）数列来做例子,这东西效率低,可以拿来模拟</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;数值&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1 1 2 3 5 8    f(n) = f(n-1) + f(n-2)</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> n&lt;=<span class="number">2</span> ? <span class="number">1</span> : fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)  <span class="comment">//递归调用</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(fibonacci(7))</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;number&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> number = input.value</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> result = fibonacci(number)</span></span><br><span class="line"><span class="javascript">alert(result)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我运行此行代码,传入计算数值为50左右(有的甚至更低),整个页面就会卡住好久的时间不能操作(计算结束后才会弹窗,但是未弹窗的这段时间用户并不能进行操作),这时候就会发现单线程的弊端了</p><h3 id="尝试使用"><a href="#尝试使用" class="headerlink" title="尝试使用"></a>尝试使用</h3><ol><li><p>H5规范提供了js分线程的实现, 取名为: <code>Web Workers</code></p></li><li><p>相关API</p></li></ol><ul><li><code>Worker</code>: 构造函数, 加载分线程执行的js文件</li><li><code>Worker.prototype.onmessage</code>: 用于接收另一个线程的回调函数</li><li><code>Worker.prototype.postMessage</code>: 向另一个线程发送消息</li></ul><ol start="3"><li>不足</li></ol><ul><li>worker内代码不能操作DOM(更新UI)</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ul><h4 id="①-主线程"><a href="#①-主线程" class="headerlink" title="① 主线程"></a>① 主线程</h4><ol><li><p>创建一个Worker对象</p></li><li><p>绑定[主线程接收分线程返回的数据]方法</p></li><li><p>主线程向分线程发送数据,然后等待接受数据</p></li><li><p>接收到分线程回馈的数据,将数据进行处理(如弹窗)</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;数值&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;number&#x27;</span>)</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> number = input.value</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="comment">//创建一个Worker对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">&#x27;worker.js&#x27;</span>)</span></span><br><span class="line"><span class="javascript">   <span class="comment">// 绑定接收消息的监听</span></span></span><br><span class="line"><span class="javascript">   worker.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; <span class="comment">//此处变成回调代码,会在初始化工作完成后才会进行</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">&#x27;主线程接收分线程返回的数据: &#x27;</span>+event.data)</span></span><br><span class="line"><span class="javascript">     alert(event.data)</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 向分线程发送消息</span></span></span><br><span class="line"><span class="javascript">   worker.postMessage(number)</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(<span class="string">&#x27;主线程向分线程发送数据: &#x27;</span>+number)</span></span><br><span class="line"><span class="javascript"> &#125;</span></span><br><span class="line"><span class="javascript"> <span class="comment">// console.log(this) // window</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-分线程"><a href="#②-分线程" class="headerlink" title="② 分线程"></a>② 分线程</h4><p>将计算放置分线程中</p><p><code>注意</code>:alert(result)  alert是window的方法, 在分线程不能调用,<code>分线程中的全局对象不再是window</code>, 所以在分线程中不可能更新界面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//worker.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n&lt;=<span class="number">2</span> ? <span class="number">1</span> : fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)  <span class="comment">//递归调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line"><span class="built_in">this</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> number = event.data</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;分线程接收到主线程发送的数据: &#x27;</span>+number)</span><br><span class="line"><span class="comment">//计算</span></span><br><span class="line"><span class="keyword">var</span> result = fibonacci(number)</span><br><span class="line">postMessage(result)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;分线程向主线程返回数据: &#x27;</span>+result)</span><br><span class="line"><span class="comment">// alert(result)  alert是window的方法, 在分线程不能调用</span></span><br><span class="line"><span class="comment">// 分线程中的全局对象不再是window, 所以在分线程中不可能更新界面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程原理图"><a href="#流程原理图" class="headerlink" title="流程原理图"></a>流程原理图</h3><p><a href="https://imgtu.com/i/4dWFOA"><img src="https://z3.ax1x.com/2021/09/23/4dWFOA.png" alt="4dWFOA.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javaScript基础总结&quot;&gt;&lt;a href=&quot;#javaScript基础总结&quot; class=&quot;headerlink&quot; title=&quot;javaScript基础总结&quot;&gt;&lt;/a&gt;javaScript基础总结&lt;/h1&gt;&lt;h2 id=&quot;数据类型相关知识点&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://lesliewaong.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="https://lesliewaong.top/posts/a9ba4134.html"/>
    <id>https://lesliewaong.top/posts/a9ba4134.html</id>
    <published>2021-07-11T09:57:47.000Z</published>
    <updated>2021-12-04T06:53:29.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>JavaScript 诞生于 1995 年，它的出现主要是用于处理网页中的前端验证。</p><p>所谓的前端验证，就是指检查用户输入的内容是否符合一定的规则。</p><p>比如：用户名的长度，密码的长度，邮箱的格式等。</p><p>JavaScript 是由网景公司发明，起初命名为LiveScript ，后来由于SUN公司的介入更名为了JavaScript 。</p><p>1996 年微软公司在其最新的 IE3 浏览器中引入了自己对JavaScript 的实现 JScript 。</p><p>于是在市面上存在两个版本的JavaScript，一个网景公司的JavaScript 和微软的JScript 。</p><p>为了确保不同的浏览器上运行的 JavaScript 标准一致，所以几个公司共同定制了 JS 的标准命名为ECMAScript 。</p></blockquote><p><strong>实现</strong></p><p>ECMAScript 是一个标准，而这个标准需要由各个厂商去实现。</p><p>不同的浏览器厂商对该标准会有不同的实现。</p><table><thead><tr><th>浏览器</th><th>JavaScript实现方式</th></tr></thead><tbody><tr><td>FireFox</td><td>SpiderMonkey</td></tr><tr><td>Internet Explorer</td><td>JScript/Chakra</td></tr><tr><td>Safari</td><td>JavaScriptCore</td></tr><tr><td>Chrome</td><td>v8</td></tr><tr><td>Carakan</td><td>Carakan</td></tr></tbody></table><p>我们已经知道 ECMAScript 是 JavaScript 标准，所以一般情况下这两个词我们认为是一个意思。</p><p>但是实际上 JavaScript 的含义却要更大一些。</p><p>==一个完整的 JavaScript 实现应该由以下三个部分构成：<strong>ECMAScript 、DOM、BOM</strong>==</p><p><strong>JS 的特点</strong></p><ul><li>解释型语言<ul><li>JavaScript 是一门<strong>解释型</strong>语言，所谓解释型值语言<strong>不需要被编译</strong>为机器码在执行，而是直接执行。</li><li>由于少了编译这一步骤，所以解释型语言开发起来尤为轻松，但是解释型语言运行较慢也是它的劣势。</li><li>不过解释型语言中使用了JIT技术，使得运行速度得以改善。</li></ul></li><li>类似于C和Java的语法结构<ul><li>JavaScript 的语法结构与C和Java很像，像for、if 、while 等语句和 Java 的基本上是一模一样的。</li><li>不过 JavaScript 和与 Java 的关系也仅仅是看起来像而已。</li></ul></li><li>动态语言<ul><li>JavaScript 是一门动态语言，所谓的动态语言可以暂时理解为在语言中的一切内容都是不确定的。比如一个变量，这一时刻<br>是个整型，下一时刻可能会变成字符串了。</li><li>不过在补充一句动态语言相比静态语言性能上要差一些，不过由于 JavaScript 中应用的 JIT 技术，所以 JS 可能是运行速度最快的动态语言了。</li></ul></li><li>基于原型的面向对象<ul><li>JavaScript 是一门面向对象的语言。</li><li>Java 也是一门面向对象的语言，但是与 Java 不同 JavaScript 是基于原型的面向对象。</li></ul></li></ul><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h3><p>1.可以编写到标签的指定属性中  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello&#x27;);&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;aaa&#x27;);&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>2.可以编写到script标签中  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript"><span class="comment">//编写js代码  </span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>3.可以将代码编写到外部的js文件中，然后通过标签将其引入  </p><p>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略  ,如果需要则可以在创建一个新的script标签用于编写内部代码  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><p>在浏览器窗口中弹出一个警告框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;要输出的内容&quot;</span>);  </span><br></pre></td></tr></table></figure><p>内容将会被写到body标签中，并在页面中显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;要输出的内容&quot;</span>);  </span><br></pre></td></tr></table></figure><p>内容会被写到开发者工具的控制台中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;要输出的内容&quot;</span>);  </span><br></pre></td></tr></table></figure><h3 id="书写"><a href="#书写" class="headerlink" title="书写"></a>书写</h3><p>js函数声明不需要<code>;</code>，但是赋值语句要加<code>;</code>，结尾如果不写分号，浏览器会自动添加，但是会消耗一些系统资源，  而且有些时候，浏览器会加错分号，所以在开发中分号必须写  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0,arg1,arg2</span>)</span>&#123;  </span><br><span class="line"><span class="comment">//函数声明  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">var</span> functionName=<span class="function"><span class="keyword">function</span>(<span class="params">arg0,arg1,arg2</span>)</span>&#123;  </span><br><span class="line"><span class="comment">//函数表达式  </span></span><br><span class="line">&#125;;(注意分号)  </span><br></pre></td></tr></table></figure><p>JS严格区分大小写。      </p><p>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。  </p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释内容  </span></span><br></pre></td></tr></table></figure><p>多行注释  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">注释内容  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br></pre></td></tr></table></figure><h3 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>字面量实际上就是一些固定的值，比如 1 2 3 4 true false null NaN “hello”  </p><p><strong>字面量都是不可以改变的。</strong>  </p><p>由于字面量不是很方便使用，所以在JS中很少直接使用字面量  </p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量可以用来保存字面量，并且可以保存任意的字面量  </p><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述  </p><blockquote><p>声明变量  </p></blockquote><p>使用var关键字来声明一个变量  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;  </span><br></pre></td></tr></table></figure><blockquote><p>为变量赋值 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>; </span><br></pre></td></tr></table></figure><blockquote><p>声明和赋值同时进行 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">456</span>;   </span><br></pre></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在JS中所有的可以自主命名的内容，都可以认为是一个标识符， 是标识符就应该遵守标识符的规范。  </p><p>比如：变量名、函数名、属性名  </p><p>规范：  </p><p>1.标识符中可以含有<code>字母</code>、<code>数字</code>、<code>_</code>、<code>$</code><br>2.标识符不能以数字开头<br>3.标识符不能是JS中的关键字和保留字<br>4.标识符一般采用驼峰命名法  <code>xxxYyyZzz</code>  </p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="六种数据类型"><a href="#六种数据类型" class="headerlink" title="六种数据类型"></a>六种数据类型</h4><blockquote><p> <strong>JS中一共分成六种数据类型 5个基本数据类型+object</strong> </p><p>String 字符串 Number 数值  Boolean 布尔值  Null 空值  Undefined 未定义  Object 对象  </p><p>其中基本数据类型有    5个  </p><p><strong>typeof运算符检查数据类型</strong> </p></blockquote><h5 id="1-String-字符串"><a href="#1-String-字符串" class="headerlink" title="1.String 字符串"></a>1.String 字符串</h5><p>JS中的字符串需要使用引号引起来（双引号或单引号都行） 。</p><p>在字符串中使用<code>\</code>作为转义字符  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&#x27;  ==&gt; &#x27;</span>  </span><br><span class="line">\&quot;  ==&gt; <span class="string">&quot;  </span></span><br><span class="line"><span class="string">\n  ==&gt; 换行  </span></span><br><span class="line"><span class="string">\t  ==&gt; 制表符  </span></span><br><span class="line"><span class="string">\\  ==&gt; \  </span></span><br></pre></td></tr></table></figure><p> 使用typeof运算符检查字符串时，会返回”string”      </p><h5 id="2-Number-数值"><a href="#2-Number-数值" class="headerlink" title="2.Number 数值"></a>2.Number 数值</h5><p> <strong>JS中所有的整数和浮点数都是Number类型</strong>  </p><p>最大能表示的值：Number.MAX_VALUE=    1.7976931348623157e+308  </p><p>特殊的数字：能赋值给变量  </p><ul><li>Infinity 正无穷 a = Infinity ,能赋值  </li><li>-Infinity 负无穷  </li><li>NaN 非法数字（Not A Number） </li></ul><p>其他进制的数字的表示： </p><ul><li>0b 开头表示二进制，但是不是所有的浏览器都支持 </li><li>0 开头表示八进制 </li><li>0x 开头表示十六进制  </li></ul><p>使用typeof检查一个Number类型的数据时，会返回”number”  （包括NaN 和 Infinity）  </p><h5 id="3-Boolean-布尔值"><a href="#3-Boolean-布尔值" class="headerlink" title="3.Boolean 布尔值"></a>3.Boolean 布尔值</h5><p>布尔值主要用来进行逻辑判断，布尔值只有两个  </p><ul><li>true 逻辑的真  </li><li>false 逻辑的假 </li></ul><p>使用typeof检查一个布尔值时，会返回”boolean”      </p><h5 id="4-Null-空值"><a href="#4-Null-空值" class="headerlink" title="4.Null 空值"></a>4.Null 空值</h5><p>空值专门用来表示为空的对象，Null类型的值只有一个  null </p><p>使用typeof检查一个Null类型的值时会返回”object”  </p><h5 id="5-Undefined-未定义"><a href="#5-Undefined-未定义" class="headerlink" title="5.Undefined 未定义"></a>5.Undefined 未定义</h5><p><strong>如果声明一个变量但是没有为变量赋值此时变量的值就是undefined</strong>  </p><p>该类型的值只有一个 undefined  </p><p>使用typeof检查一个Undefined类型的值时，会返回”undefined”  </p><h5 id="6-引用数据类型"><a href="#6-引用数据类型" class="headerlink" title="6.引用数据类型"></a>6.引用数据类型</h5><p>Object 对象  </p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p> 类型转换就是指将其他的数据类型，转换为String Number 或 Boolean  </p><h5 id="转换为String"><a href="#转换为String" class="headerlink" title="转换为String"></a>转换为String</h5><blockquote><p>方式一（强制类型转换）<strong>调用被转换数据的toString()方法</strong>    </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;  </span><br><span class="line">a = a.toString(); </span><br></pre></td></tr></table></figure><p>注意：<strong>这个方法不适用于null和undefined</strong>  </p><p>由于这两个类型的数据中没有方法，所以调用toString()时会报错  </p><blockquote><p>方式二（强制类型转换）  <strong>调用String()函数</strong>   </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;  </span><br><span class="line">a = <span class="built_in">String</span>(a);  </span><br></pre></td></tr></table></figure><p> 原理：对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”  </p><blockquote><p>方式三（隐式的类型转换）<strong>为任意的数据类型 +””</strong> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;  </span><br><span class="line">a = a + <span class="string">&quot;&quot;</span>; </span><br></pre></td></tr></table></figure><p>原理：和String()函数一样      </p><h5 id="转换为Number"><a href="#转换为Number" class="headerlink" title="转换为Number"></a>转换为Number</h5><blockquote><p>方式一（强制类型转换）   <strong>调用Number()函数</strong> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;123&quot;</span>;  </span><br><span class="line">s = <span class="built_in">Number</span>(s); </span><br></pre></td></tr></table></figure><p> 转换的情况：  </p><ol><li><p>字符串 &gt; 数字 </p><ul><li>如果字符串是一个合法的数字，则直接转换为对应的数字  </li><li>如果字符串是一个非法的数字，则转换为NaN  </li><li>如果是一个空串或纯空格的字符串，则转换为0  </li></ul></li><li><p>布尔值 &gt; 数字  </p><ul><li>true转换为1   </li><li>false转换为0  </li></ul></li><li><p>空值 &gt; 数字   </p><p>null转换为0  </p></li><li><p>未定义 &gt; 数字    </p><p>undefined 转换为NaN  </p></li></ol><blockquote><p>方式二（强制类型转换）  <strong>调用parseInt()或parseFloat()</strong> </p></blockquote><p>这两个函数专门用来将一个字符串转换为数字的  </p><p>如果对非String使用parseInt()或parseFloat()，它会<strong>先将其转换为String</strong>然后再操作 </p><p>parseInt() 可以将<strong>一个字符串中的有效的整数位</strong>提取出来，并转换为Number。如果需要可以在parseInt()中指定一个第二个参数，来指定进制    </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123.456px&quot;</span>;  </span><br><span class="line">a = <span class="built_in">parseInt</span>(a); <span class="comment">//123  </span></span><br></pre></td></tr></table></figure><p>parseFloat()可以将一个<strong>字符串中的有效的小数位</strong>提取出来，并转换为Number 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123.456px&quot;</span>;  </span><br><span class="line">a = <span class="built_in">parseFloat</span>(a); <span class="comment">//123.456  </span></span><br></pre></td></tr></table></figure><blockquote><p>方式三（隐式的类型转换）   <strong>使用一元的+来进行隐式的类型转换</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;  </span><br><span class="line">a = +a;  </span><br></pre></td></tr></table></figure><p> <strong>原理：和Number()函数一样</strong>  </p><h5 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h5><blockquote><p>方式一（强制类型转换）   <strong>使用Boolean()函数</strong>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;false&quot;</span>;  </span><br><span class="line">s = <span class="built_in">Boolean</span>(s); <span class="comment">//true </span></span><br></pre></td></tr></table></figure><p>转换的情况  </p><ul><li><p>字符串 &gt; 布尔  </p><p>除了空串其余全是true  </p></li><li><p>数值 &gt; 布尔  </p><p>除了0和NaN其余的全是true  </p></li><li><p>null、undefined &gt; 布尔  </p><p>都是false  </p></li><li><p>对象 &gt; 布尔  </p><p>都是true  </p></li></ul><blockquote><p>方式二（隐式类型转换）  <strong>为任意的数据类型做两次非运算，即可将其转换为布尔值</strong> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line">a = !!a; <span class="comment">//true  </span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符也称为操作符  </p><p>通过运算符可以对一个或多个值进行运算或操作  </p><h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><p>用来检查一个变量的数据类型  </p><p>语法：<code>typeof 变量</code> </p><p>它会返回一个用于描述类型的字符串作为结果  </p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>+&ensp;对两个值进行加法运算并返回结果   </p><p>-&ensp;对两个值进行减法运算并返回结果    </p><p>*&ensp;对两个值进行乘法运算并返回结果    </p><p>/&ensp;对两个值进行除法运算并返回结果    </p><p>%&ensp;对两个值进行取余运算并返回结果  </p><p><strong>除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。</strong>  </p><p>而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。  </p><p>任何值和字符串做加法，都会先转换为字符串，然后再拼串  </p><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p> 一元运算符只需要一个操作数  </p><h5 id="一元的"><a href="#一元的" class="headerlink" title="一元的+"></a>一元的+</h5><p> 就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;  </span><br><span class="line">a = +a;  </span><br></pre></td></tr></table></figure><h5 id="一元的-1"><a href="#一元的-1" class="headerlink" title="一元的-"></a>一元的-</h5><p> 就是负号，可以对一个数字进行符号位取反    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  </span><br><span class="line">a = -a;  </span><br></pre></td></tr></table></figure><h5 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h5><blockquote><p>自增可以使变量在原值的基础上自增1  </p></blockquote><p>自增使用 <code>++</code>  </p><p>自增可以使用 <code>前++（++a）后++(a++)</code>  </p><ul><li>无论是++a 还是 a++都会立即使原变量自增1  </li><li>不同的是++a和a++的值是不同的<ul><li>++a的值是变量的新值（自增后的值）  </li><li>a++的值是变量的原值（自增前的值）  </li></ul></li></ul><h5 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h5><blockquote><p>自减可以使变量在原值的基础上自减1  </p></blockquote><p>自减使用<code>--</code>  </p><p>自减可以使用 <code>--前（--a）后--(a--)</code>  </p><ul><li>无论是–a 还是a–都会立即使原变量自减1 </li><li>不同的是a和a的值是不同的<ul><li>–a的值是变量的新值（自减后的值） </li><li>a–的值是变量的原值（自减前的值）  </li></ul></li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>!</code>  </p><p>非运算可以对一个布尔值进行取反，true变false false边true </p><p>当对非布尔值使用!时，会先将其转换为布尔值然后再取反，我们可以利用<code>!!</code>来将其他的数据类型转换为布尔值  </p><p><code>&amp;&amp;</code>      </p><p>&amp;&amp;可以对符号两侧的值进行与运算。  </p><p>只有两端的值都为true时，才会返回true。只要有一个false就会返回false。  </p><p>与是一个短路的与，如果第一个值是false，则不再检查第二个值。</p><p>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值。</p><p><code>||</code>    </p><p>||可以对符号两侧的值进行或运算。  </p><p>只有两端都是false时，才会返回false。只要有一个true，就会返回true。  </p><p>或是一个短路的或，如果第一个值是true，则不再检查第二个值。  </p><p>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值。</p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p><code>=</code>  </p><p>可以将符号右侧的值赋值给左侧变量<br><code>+=</code>      </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a += <span class="number">5</span> 相当于 a = a+<span class="number">5</span>    </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;  str += <span class="string">&quot;world&quot;</span>;  </span><br></pre></td></tr></table></figure><p><code>-=</code>    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a -= <span class="number">5</span>  相当于 a = a-<span class="number">5</span>  </span><br></pre></td></tr></table></figure><p><code>*=</code>    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a *= <span class="number">5</span> 相当于 a = a*<span class="number">5</span>  </span><br></pre></td></tr></table></figure><p><code>/=</code>    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a /= <span class="number">5</span> 相当于 a = a/<span class="number">5</span>  </span><br></pre></td></tr></table></figure><p><code>%=</code>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a %= <span class="number">5</span> 相当于 a = a%<span class="number">5</span> </span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p><code>&gt;      &gt;=      &lt;      &lt;=</code>  </p><p>关系运算符的规则和数学中一致，用来比较两个值之间的关系，如果关系成立则返回true，关系不成立则返回false。 </p><p>如果比较的两个值是非数值，会将其转换为Number然后再比较。  </p><p>如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。  </p><h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><p><code>==</code></p><p>判断左右两个值是否相等，如果相等返回true，如果不等返回false  </p><p>相等会自动对两个值进行类型转换，如果<strong>对不同的类型进行比较，会将其转换为相同的类型然后再比较</strong>。</p><p><code>!=</code> </p><p>不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false  </p><p>不等也会做自动的类型转换。<br><code>===</code> </p><p><strong>全等</strong>，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，如果两个值的类型不同，则直接返回false 。<br><code>!==</code> </p><p><strong>不全等</strong>，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true </p><p><code>特殊的值：null和undefined</code> </p><p>由于undefined衍生自null，所以<strong>null == undefined</strong> 会返回true。但是 null === undefined 会返回false。 </p><p>NaN不与任何值相等，包括它自身 <code>NaN == NaN //false</code>  </p><p>判断一个值是否是NaN，使用<code>isNaN()</code>函数  </p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>语法：<code>条件表达式?语句1:语句2;</code> </p><p>执行流程：  </p><p>先对条件表达式求值判断，如果判断结果为true，则执行语句1，并返回执行结果。  </p><p>如果判断结果为false，则执行语句2，并返回执行结果。 </p><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>和数学中一样，JS中的运算符也是具有优先级的，比如 先乘除 后加减 先与 后或 </p><p>具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高， </p><p>优先级越高的越优先计算，优先级相同的，从左往右计算。 </p><p>优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。  </p><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>程序都是自上向下的顺序执行的，  通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。  </p><h4 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h4><p>条件判断语句也称为if语句 </p><p>语法一：  </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 语法二：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> 语法三：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h4><p>switch语句  </p><p>语法:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件表达式)&#123;  </span><br><span class="line"><span class="keyword">case</span> 表达式:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">case</span> 表达式:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">case</span> 表达式:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">default</span>:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>通过循环语句可以反复执行某些语句多次  </p><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><p>语法：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;  </span><br><span class="line">    语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h5><p>语法:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)  </span><br></pre></td></tr></table></figure><p>和while的区别：  </p><ul><li>while：先判断后执行  </li><li>do…while: 先执行后判断  </li><li>do…while可以确保循环体至少执行一次。  </li></ul><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>语法：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①初始化表达式 ; ②条件表达式 ; ④更新表达式)&#123;  </span><br><span class="line">    ③语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>死循环  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是JS中的引用数据类型。  </p><p><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong>。 </p><p>使用typeof检查一个对象时，会返回object。  </p><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><p><strong>1.内建对象</strong> </p><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用  </p><p>比如：Math String Number Boolean Function Object….  </p><p><strong>2.宿主对象</strong>  </p><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象  </p><p>比如 BOM DOM  </p><p><strong>3.自定义对象</strong>  </p><p>由开发人员自己创建的对象  </p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p> 方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();  </span><br></pre></td></tr></table></figure><p> 方式二： </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; </span><br></pre></td></tr></table></figure><h3 id="向对象中添加属性"><a href="#向对象中添加属性" class="headerlink" title="向对象中添加属性"></a>向对象中添加属性</h3><p>语法：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名 = 属性值;  </span><br><span class="line"></span><br><span class="line">对象[<span class="string">&quot;属性名&quot;</span>] = 属性值;<span class="comment">//这种方式能够使用特殊的属性名</span></span><br></pre></td></tr></table></figure><p><strong>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</strong>  </p><p>属性值也可以任意的数据类型。  </p><h3 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h3><p>语法：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名  </span><br><span class="line">对象[<span class="string">&quot;属性名&quot;</span>] <span class="comment">//&quot;属性名&quot;可以使字符串常量，也可以是字符串变量 </span></span><br></pre></td></tr></table></figure><p>如果读取一个对象中没有的属性，它不会报错，而是返回一个<code>undefined</code>  </p><h3 id="删除对象中的属性"><a href="#删除对象中的属性" class="headerlink" title="删除对象中的属性"></a>删除对象中的属性</h3><p> 语法：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名  </span><br><span class="line"><span class="keyword">delete</span> 对象[<span class="string">&quot;属性名&quot;</span>]  </span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><strong>使用in检查对象中是否含有指定属性</strong>  </p><p>语法：</p><p><code>&quot;属性名&quot; in 对象</code>  </p><p>如果在对象中含有该属性，则返回true，如果没有则返回false  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;  </span><br><span class="line">     <span class="built_in">console</span>.log(i,<span class="string">&quot;:&quot;</span>,obj[i]);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p><strong>使用对象字面量，在创建对象时直接向对象中添加属性</strong>  </p><p>语法： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line">    属性名:属性值,  </span><br><span class="line">    属性名:属性值,  </span><br><span class="line">    属性名:属性值,  </span><br><span class="line">    属性名:属性值  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h3><p> 基本数据类型 ：String Number Boolean Null Undefined  </p><p> 引用数据类型  ：Object </p><p> <strong>基本数据类型的数据，变量是直接保存的它的值。</strong>  </p><p>变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。  </p><p> <strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong>  </p><p>如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。  </p><p>比较两个变量时，对于基本数据类型，比较的就是值，对于引用数据类型比较的是地址，地址相同才相同。       </p><h3 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h3><p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）。</strong></p><p>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码  </p><p>使用typeof检查一个函数时会返回function  </p><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h4><p> 函数声明 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>语法：</p><p><code>函数对象([实参1,实参2...实参N]);</code>  </p><p>当我们调用函数时，函数中封装的代码会按照编写的顺序执行  </p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>函数定义完，立即被调用，这种函数叫做立即执行函数  </p><p>立即执行函数往往只会执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b);  </span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>);  </span><br></pre></td></tr></table></figure><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><strong>形参：形式参数</strong>  </p><p>定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开  </p><p>定义形参就相当于在函数内声明了对应的变量但是并不赋值，形参会在调用时才赋值。  </p><p><strong>实参：实际参数</strong>  </p><p>调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,  调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。  </p><p>如果实参的数量大于形参，多余实参将不会赋值，  </p><p>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined  </p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><blockquote><p>就是函数执行的结果。  </p></blockquote><p>使用return 来设置函数的返回值。  </p><p>语法：</p><p><code>return 值;</code>  </p><p>该值就会成为函数的返回值，可以通过一个变量来接收返回值。 </p><p>return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。  </p><p>return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。  </p><p>如果return后不跟值，或者是不写return则函数默认返回undefined。  </p><h4 id="break、continue和return"><a href="#break、continue和return" class="headerlink" title="break、continue和return"></a>break、continue和return</h4><p>break  退出循环  </p><p>continue  跳过当次循环  </p><p>return  退出函数 </p><h4 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h4><p>使用for … in 语句</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…in语句 对象中有几个属性，循环体就会执行几次</p><p>每次执行时，会将对象中的一个属性的名字赋值给变量</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><blockquote><p>作用域简单来说就是一个变量的作用范围。  </p></blockquote><p>在JS中作用域分成两种：  </p><p>1.全局作用域  </p><p>直接在<code>script</code>标签中编写的代码都运行在全局作用域中。 </p><p>全局作用域在打开页面时创建，在页面关闭时销毁。  </p><p>全局作用域中有一个全局对象<code>window</code>，window对象由浏览器提供，可以在页面中直接使用，它代表的是整个的浏览器的窗口。  </p><p>在全局作用域中创建的变量都会作为window对象的属性保存  </p><p>在全局作用域中创建的函数都会作为window对象的方法保存  </p><p>在全局作用域中创建的变量和函数可以在页面的任意位置访问。  </p><p>在函数作用域中也可以访问到全局作用域的变量。  </p><p>尽量不要在全局中创建变量      </p><p>2.函数作用域  </p><p>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。  </p><p>函数作用域在函数执行时创建，在函数执行结束时销毁。  </p><p>在函数作用域中创建的变量，不能在全局中访问。  </p><p>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，  </p><p>如果找到了则使用，找不到则继续向上找，直到找到全局作用域，如果全局作用域中依然没有找到，则会报错<code>ReferenceError</code> 。</p><h4 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h4><p>在全局作用域中，使用var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。  </p><p>所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。  </p><p>在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，如果没有使用var关键字声明变量，则变量会变成全局变量 。</p><h4 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h4><p>在全局作用域中，使用函数声明创建的函数<code>function fun()&#123;&#125;</code>,会在所有的代码执行之前被创建，也就是我们可以在函数声明前去调用函数，但是使用函数表达式<code>var fun = function()&#123;&#125;</code>创建的函数没有该特性。</p><p>在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。  </p><h4 id="函数对象的方法"><a href="#函数对象的方法" class="headerlink" title="函数对象的方法"></a>函数对象的方法</h4><p><strong>方法（method）</strong> </p><p>可以将一个函数设置为一个对象的属性，当一个对象的属性是一个函数时， 我们称这个函数是该对象的方法。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象.方法名(); <span class="comment">//调方法</span></span><br><span class="line">函数名()； <span class="comment">//调函数</span></span><br></pre></td></tr></table></figure><p>call()和apply()</p><p>这两个方法都是函数对象的方法，需要通过函数对象来调用</p><p>当对函数调用call()和apply()都会调用函数执行</p><p>在调用call()和apply()可以将一个对象指定为第一个参数</p><p>此时这个对象将会成为函数执行时的this </p><p>call()方法可以将实参在对象之后依次传递</p><p>apply()方法需要将实参封装到一个数组中统一传递</p><h4 id="this、arguments"><a href="#this、arguments" class="headerlink" title="this、arguments"></a>this、arguments</h4><p>在调用函数时，浏览器每次都会传递进两个隐含的参数</p><blockquote><p>函数的上下文对象 this</p></blockquote><p>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。  </p><p>this的不同的情况：  </p><p>1.以函数的形式调用时，this是window  </p><p>2.以方法的形式调用时，this就是调用方法的对象  </p><p>3.以构造函数的形式调用时，this就是新创建的对象  </p><p>4.使用call和apply调用时，this是指定的那个对象</p><blockquote><p>封装实参的对象 arguments</p></blockquote><p>arguments是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</p><p>在调用函数时，我们所传递的实参都会在arguments中保存</p><p>arguments.length可以用来获取实参的长度</p><p>我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦。</p><p>arguments[0] 表示第一个实参</p><p>arguments[1] 表示第二个实参 。。。</p><p>它里边有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在指向的函数的对象</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>构造函数是专门用来创建对象的函数  </p><p>一个构造函数我们也可以称为一个类  </p><p>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例  </p><p>通过同一个构造函数创建的对象，我们称为一类对象  </p><p>构造函数就是一个普通的函数，只是他的调用方式不同，如果直接调用，它就是一个普通函数；如果使用new来调用，则它就是一个构造函数。</p><p>例子：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name , age , gender</span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">this</span>.name = name;  </span><br><span class="line">    <span class="built_in">this</span>.age = age;  </span><br><span class="line">    <span class="built_in">this</span>.gender = gender;  </span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        alert(<span class="built_in">this</span>.name);  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>构造函数的执行流程：  </p><p>1.创建一个新的对象  </p><p>2.将新的对象作为函数的上下文对象（this）  </p><p>3.执行函数中的代码  </p><p>4.将新建的对象返回  </p><p><strong>instanceof 用来检查一个对象是否是一个类的实例</strong>  </p><p>语法：<code>对象 instanceof 构造函数</code>  </p><p>如果该对象时构造函数的实例，则返回true，否则返回false  </p><p><strong>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</strong>  </p><h4 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h4><p>创建一个函数以后，<strong>解析器都会默认在函数中添加一个数prototype</strong>  </p><p>prototype属性指向的是一个对象，这个对象我们称为原型对象。  </p><p>当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性执行该原型对象。</strong>  </p><p>这个隐含的属性可以通过对象<code>__proto__</code>来访问。  </p><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong>  </p><p>我们可以将对象中共有的属性和方法统一添加到原型对象中，这样我们只需要添加一次，就可以使所有的对象都可以使用。  </p><p>当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，如果在自身中找到了，则直接使用。如果没有找到，则去原型对象中寻找，如果找到了则使用， 如果没有找到，则去原型的原型中寻找，依此类推。直到找到Object的原型为止，Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回null。</p><p>使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</p><p><strong>hasOwnProperty()</strong>  </p><p>这个方法可以用来检查<strong>对象自身中</strong>是否含有某个属性  </p><p>语法：<code>对象.hasOwnProperty(&quot;属性名&quot;)</code>  </p><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值  </p><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法      </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Person原型的toString  </span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,age=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;,gender=&quot;</span>+<span class="built_in">this</span>.gender+<span class="string">&quot;]&quot;</span>;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h3 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h3><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾。</p><p>这些垃圾积攒过多以后，会导致程序运行的速度过慢，  所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾。</p><p>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，  此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。  </p><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要<strong>将不再使用的对象设置null</strong>即可。 </p><h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h2><p>数组也是一个<strong>对象</strong>，是一个用来存储数据的对象，但是它的存储效率比普通对象要高。</p><p>数组中保存的内容我们称为<strong>元素</strong>,数组使用<strong>索引（index）</strong>来操作元素，索引指由0开始的整数。 </p><h3 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h3><p><strong>创建数组</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();  </span><br><span class="line"><span class="keyword">var</span> arr = [];  </span><br></pre></td></tr></table></figure><p><strong>向数组中添加元素</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组对象[索引] = 值;  </span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;  </span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;hello&quot;</span>;  </span><br></pre></td></tr></table></figure><p><strong>创建数组时直接添加元素</strong>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [元素<span class="number">1</span>,元素<span class="number">2.</span>...元素N]; </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>,<span class="literal">null</span>];  </span><br></pre></td></tr></table></figure><p><strong>获取和修改数组的长度</strong>  </p><p><code>数组.length</code> </p><ul><li>length获取到的是数组的最大索引+1  </li><li>对于连续的数组，length获取到的就是数组中元素的个数</li></ul><p><code>数组.length = 新长度</code> </p><ul><li>如果修改后的length大于原长度，则多出的部分会空出来  </li><li>如果修改后的length小于原长度，则原数组中多出的元素会被删除  </li></ul><p><strong>向数组的最后添加元素</strong> </p><p><code>数组[数组.length] = 值;</code>           </p><h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>该方法可以向数组的<code>末尾</code>添加一个或多个元素，并返回数组的<code>新的长度</code>。</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>该方法可以删除数组的<code>最后</code>一个元素,并将<code>被删除的元素</code>作为返回值返回。</p><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>向数组<code>开头</code>添加一个或多个元素，并返回<code>新的数组长度</code>。</p><p>向前边插入元素以后，其他的元素索引会依次调整。</p><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>可以删除数组的<code>第一个</code>元素，并将<code>被删除的元素</code>作为返回值返回。</p><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>可以用来从数组提取指定元素</p><p>该方法<code>不会改变元素数组</code>，而是将截取到的元素封装到一个新数组中返回</p><p>参数：</p><ul><li><p>截取开始的位置的索引，<code>包含开始索引</code></p></li><li><p>截取结束的位置的索引，<code>不包含结束索引</code></p><ul><li> 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素</li></ul></li><li><p>参数可以传递一个负值，如果传递一个负值，则从后往前计算</p></li></ul><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>可以用于删除数组中的指定元素</p><p>使用splice()会影响到原数组，<code>会将指定元素从原数组中删除</code>，并将<code>被删除的元素</code>作为返回值返回。</p><p>参数：</p><ul><li>第一个，表示开始位置的索引</li><li>第二个，表示删除的数量</li><li>第三个及以后，可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边     </li></ul><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>可以连接两个或多个数组，并将新的数组返回。该方法<code>不会对原数组产生影响</code>。</p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>该方法可以将数组转换为一个字符串。</p><p>该方法<code>不会对原数组产生影响</code>，而是将转换后的字符串作为结果返回。</p><p>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符。</p><p>如果不指定连接符，则默认使用<code>,</code>作为连接符</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>该方法用来反转数组（前边的去后边，后边的去前边）。该方法会直接<code>修改原数组</code> 。</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>可以用来对数组中的元素进行排序。</p><p>也会<code>影响原数组</code>，默认会按照<code>Unicode</code>编码进行排序。</p><p>即使对于纯数字的数组，使用sort()排序时，也会按照Unicode编码来排序，所以对数字进排序时，可能会得到错误的结果。</p><p>我们可以自己来指定排序的规则：</p><p>在sort()添加一个回调函数，来指定排序规则，回调函数中需要定义两个形参。</p><p>浏览器将会分别使用数组中的元素作为实参去调用回调函数。</p><p>使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边。</p><p>浏览器会根据回调函数的返回值来决定元素的顺序。</p><ul><li>如果返回一个大于0的值，则元素会交换位置</li><li>如果返回一个小于0的值，则元素位置不变</li><li>如果返回一个0，则认为两个元素相等，也不交换位置</li></ul><p>如果需要升序排列，则返回<code>a-b</code></p><p>如果需要降序排列，则返回<code>b-a</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前边的大</span></span><br><span class="line"><span class="comment">/*if(a &gt; b)&#123;</span></span><br><span class="line"><span class="comment">return -1;</span></span><br><span class="line"><span class="comment">&#125;else if(a &lt; b)&#123;</span></span><br><span class="line"><span class="comment">return 1;</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//升序排列</span></span><br><span class="line"><span class="comment">//return a - b;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序排列</span></span><br><span class="line"><span class="keyword">return</span> b - a;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>遍历数组就是将数组中元素都获取到。</p><p><strong>用for循环来遍历数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;数组.length ; i++)&#123;  </span><br><span class="line">    <span class="comment">//数组[i]  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>用forEach()方法来遍历数组（不兼容IE8）</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value , index , obj</span>)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><p>forEach()方法需要一个回调函数作为参数，数组中有几个元素，回调函数就会被调用几次，每次调用时，都会将遍历到的信息以实参的形式传递进来，我们可以定义形参来获取这些信息。  </p><p><code>value:正在遍历的元素</code>  </p><p><code>index:正在遍历元素的索引</code>  </p><p><code>obj:被遍历对象</code>    </p><h2 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h2><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>在JS中为我们提供了<strong>三个包装类：</strong>  </p><p>String() Boolean() Number()  </p><p>通过这三个包装类可以创建基本数据类型的对象  </p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">2</span>);  </span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello&quot;</span>);  </span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure><p>==但是在实际应用中千万不要这么干。==  </p><p>当我们去操作一个基本数据类型的属性和方法时，  <strong>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</strong>  操作完成以后再将这个临时对象进行销毁。  </p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>日期的对象，在JS中通过Date对象来表示一个时间  </p><p><strong>创建对象</strong>  </p><p>创建一个当前的时间对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();  </span><br></pre></td></tr></table></figure><p> 创建一个指定的时间对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;月/日/年 时:分:秒&quot;</span>);  </span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getDate()</td><td>当前日期对象是几日（1-31）</td></tr><tr><td>getDay()</td><td>返回当前日期对象时周几（0-6）0 周日    1 周一 。。。</td></tr><tr><td>getMonth()</td><td>返回当前日期对象的月份（0-11）     0 一月 1 二月 。。。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getTime()</td><td>返回当前日期对象的时间戳。(时间戳，指的是从1970年月1日 0时0分0秒，到现在时间的毫秒数）计算机底层保存时间都是以时间戳的形式保存的。</td></tr><tr><td>Date.now()</td><td>可以获取当前代码执行时的时间戳</td></tr></tbody></table><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法。 </p><p>我们可以直接使用它来进行数学运算相关的操作。</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>Math.PI</td><td>常量，圆周率</td></tr><tr><td>Math.abs()</td><td>绝对值运算</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.round()</td><td>四舍五入取整</td></tr><tr><td>Math.random()</td><td>生成一个01之间的随机数</td></tr><tr><td>Math.round(Math.random()*(y-x)+x);</td><td>生成一个xy之间的随机数</td></tr><tr><td>Math.pow(x,y)</td><td>求x的y次幂</td></tr><tr><td>Math.sqrt()</td><td>对一个数进行开方</td></tr><tr><td>Math.max()   Math.min()</td><td>求多个数中最大值 最小值</td></tr></tbody></table><p><strong>补充：</strong></p><p><code>~~</code>它代表双非按位取反运算符，如果你想使用比<code>Math.floor()</code>更快的方法，那就是它了。</p><p>需要注意，对于正数，它<strong>向下取整</strong>；对于负数，<strong>向上取整</strong>；非数字取值为<code>0</code></p><h3 id="字符串的相关的方法"><a href="#字符串的相关的方法" class="headerlink" title="字符串的相关的方法"></a>字符串的相关的方法</h3><blockquote><p>在底层字符串是以字符数组的形式保存的</p></blockquote><p><code>length</code></p><p>可以用来获取字符串的长度  </p><p><code>charAt()</code></p><p>可以返回字符串中指定位置的字符</p><p>根据索引获取指定的字符</p><p><code>charCodeAt()</code></p><p>获取指定位置字符的字符编码（Unicode编码）</p><p><code>String.formCharCode()</code></p><p>可以根据字符编码去获取字符</p><p><code>concat()</code></p><p>可以用来连接两个或多个字符串</p><p>作用和+一样</p><p><code>indexOf()</code></p><p>该方法可以检索一个字符串中是否含有指定内容</p><p>如果字符串中含有该内容，则会返回其第一次出现的索引</p><p>如果没有找到指定的内容，则返回-1</p><p>可以指定一个第二个参数，指定开始查找的位置</p><p><code>lastIndexOf()</code></p><p>该方法的用法和indexOf()一样，</p><p>不同的是indexOf是从前往后找，</p><p>而lastIndexOf是从后往前找</p><p>也可以指定开始查找的位置</p><p><code>slice()</code></p><p>可以从字符串中截取指定的内容</p><p>不会影响原字符串，而是将截取到内容返回</p><p>参数：</p><ul><li>第一个，开始位置的索引（包括开始位置）</li><li>第二个，结束位置的索引（不包括结束位置）</li><li>如果省略第二个参数，则会截取到后边所有的</li><li>也可以传递一个负数作为参数，负数的话将会从后边计算</li></ul><p><code>substring()</code></p><p>可以用来截取一个字符串，可以slice()类似</p><p>参数：</p><ul><li>第一个：开始截取位置的索引（包括开始位置）</li><li>第二个：结束位置的索引（不包括结束位置）</li><li>不同的是这个方法不能接受负值作为参数，如果传递了一个负值，则默认使用0</li><li>而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</li></ul><p><code>substr()</code></p><p>用来截取字符串</p><p> 参数：</p><ul><li>截取开始位置的索引</li><li>截取的长度</li></ul><p><code>split()</code></p><p>可以将一个字符串拆分为一个数组</p><p>参数：</p><ul><li>需要一个字符串作为参数，将会根据该字符串去拆分数组</li><li>如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素</li></ul><p><code>toUpperCase()</code></p><p>将一个字符串转换为大写并返回</p><p><code>toLowerCase()</code></p><p>将一个字符串转换为小写并返回</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，也可以将一个字符串中符合规则的内容提取出来。</p><h3 id="创建正则表达式的对象"><a href="#创建正则表达式的对象" class="headerlink" title="创建正则表达式的对象"></a>创建正则表达式的对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;正则&quot;</span>,<span class="string">&quot;匹配模式&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">//这个正则表达式可以来检查一个字符串中是否含有a</span></span><br></pre></td></tr></table></figure><p>使用typeof检查正则对象，会返回object</p><p>在构造函数中可以传递一个匹配模式作为第二个参数，</p><p>可以是 </p><ul><li><code>i</code> 忽略大小写 </li><li><code>g</code> 全局匹配模式</li></ul><h3 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h3><p><code>test()</code></p><p>使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，如果符合则返回true，否则返回false</p><h3 id="使用字面量来创建正则表达式"><a href="#使用字面量来创建正则表达式" class="headerlink" title="使用字面量来创建正则表达式"></a>使用字面量来创建正则表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 = <span class="regexp">/正则表达式/</span>匹配模式</span><br></pre></td></tr></table></figure><p>使用字面量的方式创建更加简单，使用构造函数创建更加灵活</p><p>使用 <code>|</code> 表示或者的意思</p><p><code>[]</code>里的内容也是或的关系</p><ul><li>[ab] == a|b</li><li>[a-z] 任意小写字母</li><li>[A-Z] 任意大写字母</li><li>[A-z] 任意字母</li><li>[0-9] 任意数字</li><li>[^ ] 除了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个正则表达式，检查一个字符串中是否有a或b</span></span><br><span class="line">reg = <span class="regexp">/a|b|c/</span>;</span><br><span class="line"><span class="comment">//创建一个正则表达式检查一个字符串中是否有字母</span></span><br><span class="line">reg = <span class="regexp">/[A-z]/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符串和正则相关的方法"><a href="#字符串和正则相关的方法" class="headerlink" title="字符串和正则相关的方法"></a>字符串和正则相关的方法</h3><p><code>split()</code></p><p>可以将一个字符串拆分为一个数组</p><p>方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</p><p>这个方法即使不指定全局匹配，也会全都插分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据任意字母来将字符串拆分</span></span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>);</span><br></pre></td></tr></table></figure><p><code>search()</code></p><p>可以搜索字符串中是否含有指定内容</p><p>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</p><p>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</p><p>serach()只会查找第一个，即使设置全局匹配也没用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//搜索字符串中是否含有abc 或 aec 或 afc</span></span><br><span class="line">result = str.search(<span class="regexp">/a[bef]c/</span>);</span><br></pre></td></tr></table></figure><p><code>match()</code></p><p>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</p><p>默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</p><p>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</p><p>可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p><p>match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class="line">result = str.match(<span class="regexp">/[a-z]/ig</span>);</span><br></pre></td></tr></table></figure><p><code>replace()</code></p><p>可以将字符串中指定内容替换为新的内容</p><p>参数：</p><p>1.被替换的内容，可以接受一个正则表达式作为参数</p><p>2.新的内容</p><p>默认只会替换第一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = str.replace(<span class="regexp">/[a-z]/gi</span> , <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>通过量词可以设置一个内容出现的次数</p><p>量词只对它前边的一个内容起作用</p><ul><li><code>&#123;n&#125;</code> 正好出现n次</li><li><code>&#123;m,n&#125;</code> 出现m-n次</li><li><code>&#123;m,&#125;</code> m次以上</li></ul><ul><li><code>+</code>  至少一个，相当于{1,}</li></ul><ul><li><code>*</code>  0个或多个，相当于{0,}</li><li><code>?</code>  0个或1个，相当于{0,1}</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>开头结尾</strong></p><p><code>^</code> 表示开头</p><p><code>$</code> 表示结尾</p><p>如果在正则表达式中同时使用<code>^ $</code>则要求字符串必须完全符合正则表达式</p><p><strong>含有</strong></p><p>检查一个字符串中是否含有 <code>.</code></p><p><code>.</code> 表示任意字符</p><p><strong>转义字符</strong></p><p>在正则表达式中使用<code>\</code>作为转义字符</p><p><code>\.</code> 来表示<code>.</code></p><p><code>\\</code> 表示<code>\</code></p><p>注意：使用构造函数时，由于它的参数是一个字符串，而<code>\</code>是字符串中转义字符，如果要使用<code>\</code>则需要使用<code>\\</code>来代替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\w 任意字母、数字、_  [A-z0-9_]</span><br><span class="line">\W 除了字母、数字、_  [^A-z0-9_]</span><br><span class="line">\d 任意的数字 [<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\D 除了数字 [^<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\s 空格</span><br><span class="line">\S 除了空格</span><br><span class="line">\b 单词边界</span><br><span class="line">\B 除了单词边界</span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><blockquote><p>Document Object Model      文档对象模型</p></blockquote><p>通过DOM可以来任意来修改网页中各个内容 </p><p><strong>文档</strong>：文档指的是网页，一个网页就是一个文档  </p><p><strong>对象</strong>：对象指将网页中的每一个节点都转换为对象，转换完对象以后，就可以以一种纯面向对象的形式来操作网页了  </p><p>模型：模型用来表示节点和节点之间的关系，方便操作页面  </p><p><strong>节点（Node）</strong>：节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点  </p><p>虽然都是节点，但是节点的类型却是不同的  </p><p><strong>常用的节点</strong>  </p><ul><li>文档节点 （Document），代表整个网页  </li><li>元素节点（Element），代表网页中的标签  </li><li>属性节点（Attribute），代表标签中的属性  </li><li>文本节点（Text），代表网页中的文本内容  </li></ul><blockquote><p>浏览器已经为我们提供 <strong>文档节点</strong> 对象，这个对象是window属性</p><p>可以在页面中直接使用，文档节点代表的是整个网页</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到button对象</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">//修改按钮的文字</span></span><br><span class="line">btn.innerHTML = <span class="string">&quot;I&#x27;m Button&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="文档加载"><a href="#文档加载" class="headerlink" title="文档加载"></a>文档加载</h3><p>浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行,如果将script标签写到页面的上边，在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载，会导致无法获取到DOM对象。</p><p>==onload事件会在整个页面加载完成之后才触发==</p><p>为window绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取id为btn的按钮</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//为按钮绑定一个单击响应函数</span></span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以将js代码编写到页面的下部，就可以在页面加载完毕以后再执行js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//获取id为btn的按钮</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//为按钮绑定一个单击响应函数</span></span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h3><p><strong>getElementsByTagName</strong>()</p><p>可以根据标签名来获取一组元素节点对象</p><p>这个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中</p><p>即使查询到的元素只有一个，也会封装到数组中返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找所有li节点</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>getElementsByName</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找name=gender的所有节点</span></span><br><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;gender&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>getElementsByClassName()</strong></p><p>根据元素的class属性值查询一组元素节点对象，但是该方法不支持<strong>IE8及以下</strong>的浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;box1&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>innerHTML</strong></p><p>用于获取元素内部的HTML代码的</p><p>对于自结束标签，这个属性没有意义</p><p>如果需要读取元素节点属性，直接使用 <code>元素.属性名</code></p><p>例子：元素.id 元素.name 元素.value</p><p>注意：class属性不能采用这种方式，读取class属性时需要使用 <code>元素.className</code></p><p><strong>innerText</strong></p><p>该属性可以获取到元素内部的文本内容</p><p>它和innerHTML类似，不同的是它会自动将html去除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;inputs.length ; i++)&#123;</span><br><span class="line">    <span class="comment">//alert(inputs[i].innerHTML);</span></span><br><span class="line">    alert(inputs[i].className);</span><br><span class="line">&#125;</span><br><span class="line">alert(pn.innerText);</span><br></pre></td></tr></table></figure><p><strong>childNodes</strong>会获取包括文本节点在内的所有节点</p><p>根据DOM标签，标签间空白也会当成文本节点</p><p>注意：在<strong>IE8及以下</strong>的浏览器中，不会将空白文本当成子节点</p><p><strong>children</strong>属性可以获取当前元素的所有子元素</p><p><strong>firstChild</strong>可以获取到当前元素的第一个子节点（包括空白文本节点）</p><p><strong>firstElementChild</strong>获取当前元素的第一个子元素</p><p><strong>firstElementChild</strong>不支持IE8及以下的浏览器，如果需要兼容他们尽量不要使用</p><p><strong>parentNode</strong>获取当前元素的父节点</p><p><strong>previousSibling</strong>返回前一个兄弟节点（也可能获取到空白的文本）</p><p><strong>previousElementSibling</strong>获取前一个兄弟元素，IE8及以下不支持</p><p><strong>nodeValue</strong>获取当前元素的文本节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cns = city.childNodes;</span><br><span class="line"><span class="keyword">var</span> cns2 = city.children;</span><br><span class="line"><span class="keyword">var</span> fir = phone.firstChild;</span><br><span class="line"><span class="keyword">var</span> fir = phone.firstElementChild;</span><br><span class="line"><span class="keyword">var</span> pn = bj.parentNode;</span><br><span class="line"><span class="keyword">var</span> ps = and.previousSibling;</span><br><span class="line"><span class="keyword">var</span> pe = and.previousElementSibling;</span><br><span class="line">alert(bj.firstChild.nodeValue);</span><br></pre></td></tr></table></figure><p><strong>document.body</strong>在document中有一个属性body，它保存的是body的引用</p><p><strong>document.documentElement</strong>保存的是html根标签</p><p><strong>document.all</strong>代表页面中所有的元素</p><p><strong>document.querySelector()</strong></p><p>需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象</p><p>虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替</p><p>使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个</p><p><strong>document.querySelectorAll()</strong></p><p>该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回</p><p>即使符合条件的元素只有一个，它也会返回数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="keyword">var</span> all = <span class="built_in">document</span>.all;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box1 div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.box1&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h3><p><strong>document.createElement()</strong></p><p>可以用于创建一个元素节点对象。</p><p>它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回。</p><p><strong>document.createTextNode()</strong></p><p>可以用来创建一个文本节点对象</p><p>需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回</p><p><strong>appendChild()</strong></p><p>向一个父节点中添加一个新的子节点</p><p>用法：<code>父节点.appendChild(子节点);</code></p><p><strong>insertBefore()</strong></p><p>可以在指定的子节点前插入新的子节点</p><p>语法：<code>父节点.insertBefore(新节点,旧节点);</code></p><p><strong>replaceChild()</strong></p><p>可以使用指定的子节点替换已有的子节点</p><p>语法：父节点.replaceChild(新节点,旧节点);</p><p><strong>removeChild()</strong></p><p>可以删除一个子节点</p><p>语法：<code>父节点.removeChild(子节点);</code> <code>子节点.parentNode.removeChild(子节点);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gzText = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">li.appendChild(gzText);</span><br><span class="line">city.insertBefore(li , bj);</span><br><span class="line">city.replaceChild(li , bj);</span><br><span class="line">bj.parentNode.removeChild(bj);</span><br></pre></td></tr></table></figure><p>使用<strong>innerHTML</strong>也可以完成DOM的增删改的相关操作</p><p>一般我们会两种方式结合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个li</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">//向li中设置文本</span></span><br><span class="line">li.innerHTML = <span class="string">&quot;广州&quot;</span>;</span><br><span class="line"><span class="comment">//将li添加到city中</span></span><br><span class="line">city.appendChild(li);</span><br></pre></td></tr></table></figure><h3 id="使用DOM操作CSS"><a href="#使用DOM操作CSS" class="headerlink" title="使用DOM操作CSS"></a>使用DOM操作CSS</h3><h4 id="通过JS修改元素的样式"><a href="#通过JS修改元素的样式" class="headerlink" title="通过JS修改元素的样式"></a>通过JS修改元素的样式</h4><p>语法：<code>元素.style.样式名 = 样式值</code></p><p> 注意：如果CSS的样式名中含有<code>-</code>，这种名称在JS中是不合法的比如<code>background-color</code></p><p>需要将这种样式名修改为驼峰命名法，去掉<code>-</code>，然后将<code>-</code>后的字母大写</p><p>我们通过style属性设置的样式都是<code>内联样式</code>，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</p><p>但是如果在样式中写了<code>!important</code>，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效。所以尽量不要为样式添加<code>!important</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box1.style.width = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">box1.style.height = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">box1.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="读取box1的样式"><a href="#读取box1的样式" class="headerlink" title="读取box1的样式"></a>读取box1的样式</h4><p>语法：<code>元素.style.样式名</code></p><p>通过style属性设置和读取的都是<code>内联样式</code>，无法读取样式表中的样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.style.width);</span><br></pre></td></tr></table></figure><h4 id="获取元素的当前显示的样式"><a href="#获取元素的当前显示的样式" class="headerlink" title="获取元素的当前显示的样式"></a>获取元素的当前显示的样式</h4><p>语法：<code>元素.currentStyle.样式名</code></p><p>它可以用来读取当前元素正在显示的样式</p><p>如果当前元素没有设置该样式，则获取它的默认值</p><p><code>currentStyle</code>只有<code>IE</code>浏览器支持，其他的浏览器都不支持</p><p>在其他浏览器中可以使用<code>getComputedStyle()</code>这个方法来获取元素当前的样式</p><p>这个方法是window的方法，可以直接使用</p><p>需要两个参数</p><p>第一个：要获取样式的元素</p><p>第二个：可以传递一个伪元素，一般都传null</p><p>该方法会返回一个对象，对象中封装了当前元素对应的样式</p><p>可以通过<code>对象.样式名</code>来读取样式</p><p>如果获取的样式没有设置，则会获取到真实的值，而不是默认值</p><p>比如：没有设置width，它不会获取到auto，而是一个长度</p><p> 但是该方法<code>不支持IE8及以下</code>的浏览器</p><p>通过<code>currentStyle</code>和<code>getComputedStyle()</code>读取到的样式都是<strong>只读</strong>的，不能修改，如果要修改必须通过<code>style</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常浏览器的方式</span></span><br><span class="line">alert(getComputedStyle(box1,<span class="literal">null</span>).backgroundColor);</span><br><span class="line"><span class="comment">//IE8的方式</span></span><br><span class="line">alert(box1.currentStyle.backgroundColor);</span><br></pre></td></tr></table></figure><h4 id="其他样式操作的属性"><a href="#其他样式操作的属性" class="headerlink" title="其他样式操作的属性"></a>其他样式操作的属性</h4><p><strong>clientWidth</strong> <strong>clientHeight</strong></p><p>这两个属性可以获取元素的可见宽度和高度</p><p>这些属性都是不带px的，返回都是一个数字，可以直接进行计算</p><p>会获取元素宽度和高度，包括内容区和内边距</p><p>这些属性都是只读的，不能修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.clientWidth);</span><br><span class="line">alert(box1.clientHeight);</span><br></pre></td></tr></table></figure><p><strong>offsetWidth offsetHeight</strong></p><p>获取元素的整个的宽度和高度，包括内容区、内边距和边框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.offsetWidth);</span><br></pre></td></tr></table></figure><p><strong>offsetParent</strong></p><p>可以用来获取当前元素的定位父元素</p><p>会获取到离当前元素最近的开启了定位的祖先元素</p><p>如果所有的祖先元素都没有开启定位，则返回body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> op = box1.offsetParent;</span><br></pre></td></tr></table></figure><p><strong>offsetLeft offsetTop</strong></p><p>当前元素相对于其定位父元素的水平/垂直偏移量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box1.offsetLeft);</span><br></pre></td></tr></table></figure><p><strong>scrollWidth</strong> <strong>scrollHeight</strong></p><p>可以获取元素整个滚动区域的宽度和高度</p><p><strong>scrollLeft scrollTop</strong></p><p>可以获取水平/垂直滚动条滚动的距离</p><blockquote><p>当满足scrollHeight - scrollTop == clientHeight，说明垂直滚动条滚动到底了</p><p>当满足scrollWidth - scrollLeft == clientWidth，说明水平滚动条滚动到底</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(box4.scrollHeight - box4.scrollTop); </span><br></pre></td></tr></table></figure><p><strong>onscroll</strong>  </p><p>当垂直滚动条滚动到底时使表单项可用</p><p>该事件会在元素的滚动条滚动时触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取id为info的p元素</span></span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"><span class="comment">//获取两个表单项</span></span><br><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"><span class="comment">//为info绑定一个滚动条滚动的事件</span></span><br><span class="line">info.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查垂直滚动条是否滚动到底</span></span><br><span class="line"><span class="comment">//if(info.scrollHeight - info.scrollTop == info.clientHeight)&#123;</span></span><br><span class="line">    <span class="comment">//谷歌存在误差，需取整</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.round(info.scrollHeight - info.scrollTop) == info.clientHeight)&#123;</span><br><span class="line"><span class="comment">//滚动条滚动到底，使表单项可用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* disabled属性可以设置一个元素是否禁用，</span></span><br><span class="line"><span class="comment">* 如果设置为true，则元素禁用</span></span><br><span class="line"><span class="comment">* 如果设置为false，则元素可用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">inputs[<span class="number">0</span>].disabled = <span class="literal">false</span>;</span><br><span class="line">inputs[<span class="number">1</span>].disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;   </span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>用户和浏览器之间的交互行为，比如：点击按钮，鼠标移动、关闭窗口。。。</p><p>可以为按钮的对应事件绑定处理函数的形式来响应事件</p><p>这样当事件被触发时，其对应的函数将会被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定一个单击事件</span></span><br><span class="line"><span class="comment">//像这种为单击事件绑定的函数，我们称为单击响应函数</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;你还点~~~&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。。  </p><p>在IE8及以下的浏览器中，是将事件对象作为<strong>window对象的属性</strong>保存的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//onmousemove 该事件将会在鼠标在元素中移动时被触发</span></span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="comment">//解决兼容问题</span></span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="comment">//获取滚动条滚动的距离</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* chrome认为浏览器的滚动条是body的，可以通过body.scrollTop来获取</span></span><br><span class="line"><span class="comment">* 火狐等浏览器认为浏览器的滚动条是html的，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"><span class="keyword">var</span> sl = <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line"><span class="comment">//var st = document.documentElement.scrollTop;</span></span><br><span class="line"><span class="comment">//获取到鼠标的坐标</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* clientX和clientY</span></span><br><span class="line"><span class="comment">* 用于获取鼠标在当前的可见窗口的坐标</span></span><br><span class="line"><span class="comment">* div的偏移量，是相对于整个页面的</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* pageX和pageY可以获取鼠标相对于当前页面的坐标</span></span><br><span class="line"><span class="comment">* 但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> left = event.clientX;</span><br><span class="line"><span class="keyword">var</span>　top = event.clientY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置div的偏移量</span></span><br><span class="line">box1.style.left = left + sl + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">box1.style.top = top + st + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h3><p>事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。  </p><p> 事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消  </p><p><strong>可以将事件对象的cancelBubble设置为true，即可取消冒泡</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;  </span><br><span class="line">    event = event || <span class="built_in">window</span>.event;  </span><br><span class="line">    event.cancelBubble = <span class="literal">true</span>;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h3 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h3><blockquote><p>我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的  </p><p>我们可以尝试将其绑定给元素的共同的祖先元素  </p></blockquote><p>事件委派指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。  </p><p>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能          </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为ul绑定一个单击响应函数</span></span><br><span class="line">u1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* target</span></span><br><span class="line"><span class="comment">* - event中的target表示的触发事件的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//alert(event.target);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span></span><br><span class="line"><span class="keyword">if</span>(event.target.className == <span class="string">&quot;link&quot;</span>)&#123;</span><br><span class="line">alert(<span class="string">&quot;我是ul的单击响应函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><p>使用 <code>对象.事件 = 函数</code> 的形式绑定响应函数，</p><p>它只能同时为一个元素的一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的</p><p><strong>addEventListener()</strong></p><p>通过这个方法也可以为元素绑定响应函数</p><p>参数：</p><ol><li><p>事件的字符串，不要on</p></li><li><p>回调函数，当事件触发时该函数会被调用</p></li><li><p>是否在捕获阶段触发事件，需要一个布尔值，一般都传false</p></li></ol><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</p><p><strong>这个方法不支持IE8及以下的浏览器</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">alert(<span class="number">1</span>);  </span><br><span class="line">&#125;,<span class="literal">false</span>);  </span><br><span class="line">  </span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">alert(<span class="number">2</span>);  </span><br><span class="line">&#125;,<span class="literal">false</span>);  </span><br></pre></td></tr></table></figure><p><strong>attachEvent()</strong>  </p><p>在IE8中可以使用attachEvent()来绑定事件  </p><p>参数：  </p><ol><li>事件的字符串，要on  </li><li>回调函数  </li></ol><p>这个方法也可以同时为一个事件绑定多个处理函数，不同的是它是<strong>后绑定先执行</strong>，执行顺序和addEventListener()相反  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">alert(<span class="number">1</span>);  </span><br><span class="line">&#125;);   </span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">alert(<span class="number">2</span>);  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来为指定元素绑定响应函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* addEventListener()中的this，是绑定事件的对象</span></span><br><span class="line"><span class="comment">* attachEvent()中的this，是window</span></span><br><span class="line"><span class="comment">*  需要统一两个方法this</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 参数：</span></span><br><span class="line"><span class="comment">* obj 要绑定事件的对象</span></span><br><span class="line"><span class="comment">* eventStr 事件的字符串(不要on)</span></span><br><span class="line"><span class="comment">*   callback 回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj , eventStr , callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line"><span class="comment">//大部分浏览器兼容的方式</span></span><br><span class="line">obj.addEventListener(eventStr , callback , <span class="literal">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* this是谁由调用方式决定</span></span><br><span class="line"><span class="comment">* callback.call(obj)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//IE8及以下</span></span><br><span class="line">obj.attachEvent(<span class="string">&quot;on&quot;</span>+eventStr , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//在匿名函数中调用回调函数</span></span><br><span class="line">callback.call(obj);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><p>关于事件的传播网景公司和微软公司有不同的理解  </p><p>微软公司认为事件应该是<strong>由内向外</strong>传播，也就是当事件触发时，应该先触发当前元素上的事件，然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。  </p><p>网景公司认为事件应该是<strong>由外向内</strong>传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素  </p><p> W3C综合了两个公司的方案，将事件传播分成了三个阶段 </p><ol><li><p>捕获阶段  </p><p>在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件 </p></li><li><p>目标阶段  </p><p>事件捕获到目标元素，捕获结束开始在目标元素上触发事件  </p></li><li><p>冒泡阶段  </p><p>事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件  </p></li></ol><p> 如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true  </p><p>一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false  </p><p> <strong>IE8及以下的浏览器中没有捕获阶段</strong>  </p><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p>拖拽事件  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 拖拽box1元素</span></span><br><span class="line"><span class="comment">*  - 拖拽的流程</span></span><br><span class="line"><span class="comment">* 1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line"><span class="comment">* 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line"><span class="comment">* 3.当鼠标松开时，被拖拽元素固定在当前位置onmouseup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取box1</span></span><br><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启box1的拖拽</span></span><br><span class="line">drag(box1);</span><br><span class="line"><span class="comment">//开启box2的</span></span><br><span class="line">drag(box2);</span><br><span class="line"></span><br><span class="line">drag(img1);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 提取一个专门用来设置拖拽的函数</span></span><br><span class="line"><span class="comment">* 参数：开启拖拽的元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">//当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line">obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置box1捕获所有鼠标按下的事件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* setCapture()</span></span><br><span class="line"><span class="comment">* - 只有IE支持，但是在火狐中调用时不会报错，</span></span><br><span class="line"><span class="comment">* 而如果使用chrome调用，会报错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*if(box1.setCapture)&#123;</span></span><br><span class="line"><span class="comment">box1.setCapture();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">obj.setCapture &amp;&amp; obj.setCapture();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="comment">//div的偏移量 鼠标.clentX - 元素.offsetLeft</span></span><br><span class="line"><span class="comment">//div的偏移量 鼠标.clentY - 元素.offsetTop</span></span><br><span class="line"><span class="keyword">var</span> ol = event.clientX - obj.offsetLeft;</span><br><span class="line"><span class="keyword">var</span> ot = event.clientY - obj.offsetTop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//为document绑定一个onmousemove事件</span></span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="comment">//当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line"><span class="comment">//获取鼠标的坐标</span></span><br><span class="line"><span class="keyword">var</span> left = event.clientX - ol;</span><br><span class="line"><span class="keyword">var</span> top = event.clientY - ot;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改box1的位置</span></span><br><span class="line">obj.style.left = left+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">obj.style.top = top+<span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为document绑定一个鼠标松开事件</span></span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//当鼠标松开时，被拖拽元素固定在当前位置onmouseup</span></span><br><span class="line"><span class="comment">//取消document的onmousemove事件</span></span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//取消document的onmouseup事件</span></span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//当鼠标松开时，取消对事件的捕获</span></span><br><span class="line">obj.releaseCapture &amp;&amp; obj.releaseCapture();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，</span></span><br><span class="line"><span class="comment">* 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，</span></span><br><span class="line"><span class="comment">* 如果不希望发生这个行为，则可以通过return false来取消默认行为</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 但是这招对IE8不起作用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滚轮事件：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取id为box1的div</span></span><br><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为box1绑定一个鼠标滚轮滚动的事件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，</span></span><br><span class="line"><span class="comment">* 但是火狐不支持该属性</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 在火狐中需要使用 DOMMouseScroll 来绑定滚动事件</span></span><br><span class="line"><span class="comment">* 注意该事件需要通过addEventListener()函数来绑定</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">box1.onmousewheel = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.wheelDelta 可以获取鼠标滚轮滚动的方向</span></span><br><span class="line"><span class="comment">//向上滚 120   向下滚 -120</span></span><br><span class="line"><span class="comment">//wheelDelta这个值我们不看大小，只看正负</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//alert(event.wheelDelta);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//wheelDelta这个属性火狐中不支持</span></span><br><span class="line"><span class="comment">//在火狐中使用event.detail来获取滚动的方向</span></span><br><span class="line"><span class="comment">//向上滚 -3  向下滚 3</span></span><br><span class="line"><span class="comment">//alert(event.detail);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 当鼠标滚轮向下滚动时，box1变长</span></span><br><span class="line"><span class="comment">* 当滚轮向上滚动时，box1变短</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//判断鼠标滚轮滚动的方向</span></span><br><span class="line"><span class="keyword">if</span>(event.wheelDelta &gt; <span class="number">0</span> || event.detail &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//向上滚，box1变短</span></span><br><span class="line">box1.style.height = box1.clientHeight - <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//向下滚，box1变长</span></span><br><span class="line">box1.style.height = box1.clientHeight + <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false</span></span><br><span class="line"><span class="comment">* 需要使用event来取消默认行为event.preventDefault();</span></span><br><span class="line"><span class="comment">* 但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">event.preventDefault &amp;&amp; event.preventDefault();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，</span></span><br><span class="line"><span class="comment">* 这是浏览器的默认行为，如果不希望发生，则可以取消默认行为</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为火狐绑定滚轮事件</span></span><br><span class="line">bind(box1,<span class="string">&quot;DOMMouseScroll&quot;</span>,box1.onmousewheel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj , eventStr , callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line"><span class="comment">//大部分浏览器兼容的方式</span></span><br><span class="line">obj.addEventListener(eventStr , callback , <span class="literal">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* this是谁由调用方式决定</span></span><br><span class="line"><span class="comment">* callback.call(obj)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//IE8及以下</span></span><br><span class="line">obj.attachEvent(<span class="string">&quot;on&quot;</span>+eventStr , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//在匿名函数中调用回调函数</span></span><br><span class="line">callback.call(obj);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 键盘事件：</span></span><br><span class="line"><span class="comment">* onkeydown</span></span><br><span class="line"><span class="comment">* - 按键被按下</span></span><br><span class="line"><span class="comment">* - 对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发</span></span><br><span class="line"><span class="comment">* - 当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快</span></span><br><span class="line"><span class="comment">* 这种设计是为了防止误操作的发生。</span></span><br><span class="line"><span class="comment">* onkeyup</span></span><br><span class="line"><span class="comment">* - 按键被松开</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*  键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 可以通过keyCode来获取按键的编码</span></span><br><span class="line"><span class="comment">* 通过它可以判断哪个按键被按下</span></span><br><span class="line"><span class="comment">* 除了keyCode，事件对象中还提供了几个属性</span></span><br><span class="line"><span class="comment">* altKey</span></span><br><span class="line"><span class="comment">* ctrlKey</span></span><br><span class="line"><span class="comment">* shiftKey</span></span><br><span class="line"><span class="comment">* - 这个三个用来判断alt ctrl 和 shift是否被按下</span></span><br><span class="line"><span class="comment">* 如果按下则返回true，否则返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(event.keyCode);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个y是否被按下</span></span><br><span class="line"><span class="comment">//判断y和ctrl是否同时被按下</span></span><br><span class="line"><span class="keyword">if</span>(event.keyCode === <span class="number">89</span> &amp;&amp; event.ctrlKey)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ctrl和y都被按下了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*document.onkeyup = function()&#123;</span></span><br><span class="line"><span class="comment">console.log(&quot;按键松开了&quot;);</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取input</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">input.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(event.keyCode);</span></span><br><span class="line"><span class="comment">//数字 48 - 57</span></span><br><span class="line"><span class="comment">// 小键盘的数字 96-105</span></span><br><span class="line"><span class="comment">//使文本框中不能输入数字</span></span><br><span class="line"><span class="keyword">if</span>(event.keyCode &gt;= <span class="number">48</span> &amp;&amp; event.keyCode &lt;= <span class="number">57</span>)&#123;</span><br><span class="line"><span class="comment">//在文本框中输入内容，属于onkeydown的默认行为</span></span><br><span class="line"><span class="comment">//如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p>浏览器对象模型(browser object model) </p></blockquote><p>BOM可以使我们通过JS来操作浏览器，在BOM中为我们提供了一组对象，用来完成对浏览器的操作  </p><p><strong>BOM对象</strong>  </p><ul><li>Window  代表的是整个浏览器的窗口，同时window也是网页中的全局对象  </li><li>Navigator  代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器  </li><li>Location  代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面  </li><li>History  代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效。  </li><li>Screen  代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息  </li></ul><p>这些BOM对象在浏览器中都是作为<strong>window对象的属性</strong>保存的，可以通过window对象来使用，也可以直接使用。  </p><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器  </p><p>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了  </p><p>一般我们只会使用userAgent来判断浏览器的信息，userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，  不同的浏览器会有不同的userAgent  </p><p><strong>userAgent</strong></p><p>火狐  <code>Mozilla5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko20100101 Firefox50.0</code>  </p><p>Chrome  <code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36</code></p><p>IE8  <code>Mozilla4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</code>  </p><p>IE9  <code>Mozilla5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</code>  </p><p>IE10  <code>Mozilla5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</code>  </p><p>IE11  <code>Mozilla5.0 (Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko</code>  </p><p>在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alert(navigator.appName);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(ua);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(firefoxi.test(ua))&#123;  </span><br><span class="line">alert(<span class="string">&quot;你是火狐！！！&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(chromei.test(ua))&#123;  </span><br><span class="line">alert(<span class="string">&quot;你是Chrome&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(msiei.test(ua))&#123;  </span><br><span class="line">alert(<span class="string">&quot;你是IE浏览器~~~&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;  </span><br><span class="line">alert(<span class="string">&quot;你是IE11，枪毙了你~~~&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><blockquote><p>可以用来操作浏览器向前或向后翻页      </p></blockquote><p>length  属性，可以获取到当成访问的链接数量  </p><p>back()  可以用来回退到上一个页面，作用和浏览器的回退按钮一样      </p><p>forward()  可以跳转下一个页面，作用和浏览器的前进按钮一样      </p><p>go()  可以用来跳转到指定的页面  </p><p>它需要一个整数作为参数  </p><p>1:表示向前跳转一个页面 相当于forward()  </p><p>2:表示向前跳转两个页面  </p><p>-1:表示向后跳转一个页面  </p><p>-2:表示向后跳转两个页面  </p><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><blockquote><p>该对象中封装了浏览器的地址栏的信息      </p></blockquote><p>如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(location); </span><br></pre></td></tr></table></figure><p>如果直接将location属性修改为一个完整的路径，或相对路径 ，则我们页面会自动跳转到该路径，并且会生成相应的历史记录  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location = <span class="string">&quot;http:www.baidu.com&quot;</span>;  </span><br><span class="line">location = <span class="string">&quot;01.BOM.html&quot;</span>; </span><br></pre></td></tr></table></figure><p>assign()  用来跳转到其他的页面，作用和直接修改location一样      </p><p>reload()  用于重新加载当前页面，作用和刷新按钮一样  </p><p>如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.reload(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure><p>replace()  可以使用一个新的页面替换当前页面，调用完毕也会跳转页面。不会生成历史记录，不能使用回退按钮回退  </p><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><h4 id="window对象的方法"><a href="#window对象的方法" class="headerlink" title="window对象的方法"></a>window对象的方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>==alert()==</td><td>警告框</td></tr><tr><td>blur()</td><td>键盘焦点从顶层窗口移开</td></tr><tr><td>==clearInterval()==</td><td>取消周期性定时器</td></tr><tr><td>==clearTimeout()==</td><td>取消一次性定时器</td></tr><tr><td>close()</td><td>关闭浏览器窗口</td></tr><tr><td>==confirm()==</td><td>显示带有消息及确认取消按钮的对话框</td></tr><tr><td>createPopup()</td><td>创建一个弹出窗口(?？？)</td></tr><tr><td>focus()</td><td>把键盘的焦点给窗口</td></tr><tr><td>moveBy()</td><td>基于当前窗口的坐标，向某个方向移动指定像素距离</td></tr><tr><td>moveTo()</td><td>窗口的左上角移动到指定位置</td></tr><tr><td>open()</td><td>打开一个新的浏览器窗口或查找一个已经命名的窗口</td></tr><tr><td>print()</td><td>打印当前窗口的内容</td></tr><tr><td>==prompt()==</td><td>可输入的对话框</td></tr><tr><td>resizeBy()</td><td>按照指定的像素调整窗口的大小</td></tr><tr><td>resizeTo()</td><td>窗口的大小调整到指定的宽高</td></tr><tr><td>scrollBy()</td><td>指定的像素值来滚动内容</td></tr><tr><td>scrollTo()</td><td>内容滚动到指定坐标</td></tr><tr><td>==setInterval()==</td><td>周期性定时器</td></tr><tr><td>==setTimeout()==</td><td>一次性定时器</td></tr></tbody></table><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><strong>setInterval()</strong>  </p><p>定时调用  </p><p>可以将一个函数，每隔一段时间执行一次  </p><p>参数：  </p><ol><li><p>回调函数，该函数会每隔一段时间被调用一次  </p></li><li><p>每次调用间隔的时间，单位是毫秒  </p></li></ol><p>返回值：  </p><p>返回一个Number类型的数据，这个数字用来作为定时器的唯一标识  </p><p><strong>clearInterval()</strong></p><p>可以用来关闭一个定时器  </p><p>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器   </p><p>clearInterval()可以接收任意参数，如果参数是一个有效的定时器的标识，则停止对应的定时器；如果参数不是一个有效的标识，则什么也不做  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">count.innerHTML = num++;  </span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">11</span>) &#123;  </span><br><span class="line"><span class="comment">//关闭定时器  </span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;, <span class="number">1000</span>);  </span><br></pre></td></tr></table></figure><h4 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h4><p><strong>setTimeout</strong>  </p><p>延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次  </p><p>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次  </p><p>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择  </p><p>使用**clearTimeout()**来关闭一个延时调用  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="built_in">console</span>.log(num++);  </span><br><span class="line">&#125;,<span class="number">3000</span>);  </span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);  </span><br></pre></td></tr></table></figure><h2 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h2><p><strong>直接修改元素的类css：</strong>  </p><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面。 这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.style.width = <span class="string">&quot;200px&quot;</span>;</span><br><span class="line">box.style.height = <span class="string">&quot;200px&quot;</span>;</span><br><span class="line">box.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们可以通过修改元素的class属性来间接的修改样式.这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，并且这种方式，可以使表现和行为进一步的分离  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.className += <span class="string">&quot; b2&quot;</span>;<span class="comment">//注意有空格，添加class属性  </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来向一个元素中添加指定的class属性值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 参数:</span></span><br><span class="line"><span class="comment">* obj 要添加class属性的元素</span></span><br><span class="line"><span class="comment">*  cn 要添加的class值</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查obj中是否含有cn</span></span><br><span class="line"><span class="keyword">if</span>(!hasClass(obj , cn))&#123;</span><br><span class="line">obj.className += <span class="string">&quot; &quot;</span>+cn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 判断一个元素中是否含有指定的class属性值</span></span><br><span class="line"><span class="comment">* 如果有该class，则返回true，没有则返回false</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断obj中有没有cn class</span></span><br><span class="line"><span class="comment">//创建一个正则表达式</span></span><br><span class="line"><span class="comment">//var reg = /\bb2\b/;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\b&quot;</span>+cn+<span class="string">&quot;\\b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> reg.test(obj.className);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 删除一个元素中的指定的class属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span><br><span class="line"><span class="comment">//创建一个正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\b&quot;</span>+cn+<span class="string">&quot;\\b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除class</span></span><br><span class="line">obj.className = obj.className.replace(reg , <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* toggleClass可以用来切换一个类</span></span><br><span class="line"><span class="comment">* 如果元素中具有该类，则删除</span></span><br><span class="line"><span class="comment">* 如果元素中没有该类，则添加</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断obj中是否含有cn</span></span><br><span class="line"><span class="keyword">if</span>(hasClass(obj , cn))&#123;</span><br><span class="line"><span class="comment">//有，则删除</span></span><br><span class="line">removeClass(obj , cn);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//没有，则添加</span></span><br><span class="line">addClass(obj , cn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote><p><strong>JavaScript Object Notation</strong> JS对象表示法</p></blockquote><p>JS中的对象只有JS自己认识，其他的语言都不认识  </p><p><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别，  并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互  </p><p>JSON和JS对象的格式一样，只不过<strong>JSON字符串中的属性名必须加双引号</strong>  </p><p>其他的和JS语法一致  </p><p>JSON分类：  </p><ul><li>对象 {}  </li><li>数组 []  </li></ul><p>JSON中允许的值：  </p><ul><li>字符串  </li><li>数值  </li><li>布尔值  </li><li>null  </li><li>对象  </li><li>数组  </li></ul><p>举例：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">&#x27;[1,2,3,&quot;hello&quot;,true]&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="string">&#x27;&#123;&quot;arr&quot;:[1,2,3]&#125;&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> arr2 =<span class="string">&#x27;[&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;,&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;]&#x27;</span>;  </span><br></pre></td></tr></table></figure><p><strong>JSON工具类</strong>  </p><p>将JSON字符串转换为JS中的对象</p><p>在JS中，为我们提供了一个工具类，就叫JSON</p><p>这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON</p><p><strong>json –&gt; js对象</strong></p><p><code>JSON.parse()</code></p><p>可以将以JSON字符串转换为js对象</p><p>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p><strong>JS对象 —&gt; JSON</strong></p><p><code>JSON.stringify()</code></p><p>可以将一个JS对象转换为JSON字符串</p><p>需要一个js对象作为参数，会返回一个JSON字符串</p><p><strong>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</strong></p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回。</p><p>如果使用eval()执行的字符串中含有{},它会将{}当成是代码块。  </p><p>如果不希望将其当成代码块解析，则需要在字符串前后各加一个()  </p><p> eval()这个函数的功能很强大，但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患           </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;  </span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span>+str+<span class="string">&quot;)&quot;</span>);  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript基础&quot;&gt;&lt;a href=&quot;#JavaScript基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础&quot;&gt;&lt;/a&gt;JavaScript基础&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://lesliewaong.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>HTML和CSS基础</title>
    <link href="https://lesliewaong.top/posts/2eec1551.html"/>
    <id>https://lesliewaong.top/posts/2eec1551.html</id>
    <published>2021-07-08T14:10:22.000Z</published>
    <updated>2021-12-04T06:14:58.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML&amp;CSS"></a>HTML&amp;CSS</h1><blockquote><p>软件架构</p></blockquote><p><strong>C/S: Client/Server 客户端/服务器端</strong></p><ul><li><p>在用户本地有一个客户端程序，在远程有一个服务器端程序</p></li><li><p>QQ、迅雷…</p><ul><li>优点：用户体验好</li><li>缺点：开发、安装、部署、维护 麻烦</li></ul></li></ul><p><strong>B/S: Browser/Server 浏览器/服务器端</strong></p><ul><li><p>只需要一个浏览器，用户通过不同的网址(URL)，可以访问不同的服务器端程序</p></li><li><p>优点：</p><ul><li>开发、安装、部署、维护 简单</li></ul></li><li><p>缺点：</p><ul><li><p>如果应用过大，用户的体验可能会受到影响</p></li><li><p>对硬件要求过高</p></li></ul></li></ul><blockquote><p>网页结构——W3C（万维网联盟）标准</p></blockquote><ul><li><code>结构</code>HTML用于描述页面的结构</li><li><code>表现</code>CSS用于控制页面中元素的样式</li><li><code>行为</code>JavaScript用于响应用户操作</li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><strong>HTML</strong>(Hyper Text Markup Language):超文本标记语言</p><ul><li>它负责网页三要素中的<strong>结构</strong>。</li><li>HTML使用标签的形式来标识网页中的不同组成部分。</li><li>所谓超文本指的是<strong>超链接</strong>，使用超链可以让我们从一个页面跳转到另一个页面。</li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>哈哈，我在哪出现？<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>回乡偶书（二首）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>其一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>贺知章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>少小离家老大回<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>儿童相见不相识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>笑问客从何处来<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>HTML的注释，注释中的内容会被浏览器所忽略，不会在网页中直接显示，但是可以在源码中查看注释，注释用来对代码进行解释说明的。开发中一定要养成良好的编写注释的习惯，注释要求简单明了。注释还可以将一些不希望显示的内容隐藏。<strong>注释不能嵌套。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>这是我的第二个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个东西很重要，千万不要删--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是我的第二个网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">标签一般成对出现，但是也存在一些自结束标签</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;img&gt;</span></span><br><span class="line"><span class="comment">&lt;img /&gt;</span></span><br><span class="line"><span class="comment">&lt;input&gt;</span></span><br><span class="line"><span class="comment">&lt;input /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">我是注释中的注释 注释不能嵌套</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>在标签中（开始标签或自结束标签）还可以设置属性。</p><ul><li><p>属性是一个名值对（x=y）</p></li><li><p>属性用来设置标签中的内容如何显示</p></li><li><p>属性和标签名或其他属性应该使用空格隔开</p></li><li><p>属性不能瞎写，应该根据文档中的规定来编写，有些属性有属性值，有些没有。如果有属性值，属性值应该使用引号引起来        </p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标签的属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是我的<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&#x27;3&#x27;</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">font</span>&gt;</span>网页！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="网页的基本结构"><a href="#网页的基本结构" class="headerlink" title="网页的基本结构"></a>网页的基本结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以通过meta标签来设置网页的字符集，避免乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的基本结构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">迭代</span></span><br><span class="line"><span class="comment">网页的版本</span></span><br><span class="line"><span class="comment">HTML4</span></span><br><span class="line"><span class="comment">XHTML2.0</span></span><br><span class="line"><span class="comment">HTML5</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">文档声明（doctype）</span></span><br><span class="line"><span class="comment">- 文档声明用来告诉浏览器当前网页的版本</span></span><br><span class="line"><span class="comment">- html5的文档声明</span></span><br><span class="line"><span class="comment">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="comment">&lt;!Doctype HTML&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进制：</span></span><br><span class="line"><span class="comment">十进制（日常使用）</span></span><br><span class="line"><span class="comment">- 特点：满10进1</span></span><br><span class="line"><span class="comment">- 计数：0 1 2 3 4 5 6 7 8 9 10 11 12 13 ... 19 20</span></span><br><span class="line"><span class="comment">- 单位数字：10个 （0-9）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二进制（计算机底层的进制）</span></span><br><span class="line"><span class="comment">- 特点：满2进1</span></span><br><span class="line"><span class="comment">- 计数：0 1 10 11 100 101 110 111</span></span><br><span class="line"><span class="comment">- 单位数字：2个 （0-1）</span></span><br><span class="line"><span class="comment">- 扩展：</span></span><br><span class="line"><span class="comment">- 所有数据在计算机底层都会以二进制的形式保存</span></span><br><span class="line"><span class="comment">- 可以将内存想象为一个有多个小格子组成的容器，每一个小格子中可以存储一个1或一个0</span></span><br><span class="line"><span class="comment">这一个小格子在内存中被称为1位（bit）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8bit = 1byte(字节)</span></span><br><span class="line"><span class="comment">1024byte = 1kb(千字节)</span></span><br><span class="line"><span class="comment">1024kb = 1mb(兆字节)</span></span><br><span class="line"><span class="comment">1024mb = 1gb(吉字节)</span></span><br><span class="line"><span class="comment">1024gb = 1tb(特字节)</span></span><br><span class="line"><span class="comment">1024tp = 1pb</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">八进制(很少用)</span></span><br><span class="line"><span class="comment">- 特点：满8进1</span></span><br><span class="line"><span class="comment">- 计数： 0 1 2 3 4 5 6 7 10 11 12 ... 17 20</span></span><br><span class="line"><span class="comment">- 单位数字：8个 （0-7）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">十六进制(一般显示一个二进制数字时，都会转换为十六进制)</span></span><br><span class="line"><span class="comment">- 特点：满16进1</span></span><br><span class="line"><span class="comment">- 计数：0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 ... 1a 1b 1c 1d 1e 1f 20 ..</span></span><br><span class="line"><span class="comment">- 单位数字：16个（0-f）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符编码</span></span><br><span class="line"><span class="comment">李立超 -&gt; 110000110110 （编码）</span></span><br><span class="line"><span class="comment">110000110110 -&gt; 李立超 （解码）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 所有的数据在计算机中存储时都是以二进制形式存储的，文字也不例外。</span></span><br><span class="line"><span class="comment">所以一段文字在存储到内存中时，都需要转换为二进制编码</span></span><br><span class="line"><span class="comment">当我们读取这段文字时，计算机会将编码转换为字符，供我们阅读</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 编码</span></span><br><span class="line"><span class="comment">- 将字符转换为二进制码的过程称为编码</span></span><br><span class="line"><span class="comment">- 解码</span></span><br><span class="line"><span class="comment">- 将二进制码转换为字符的过程称为解码</span></span><br><span class="line"><span class="comment">- 字符集（charset）</span></span><br><span class="line"><span class="comment">    - 编码和解码所采用的规则称为字符集</span></span><br><span class="line"><span class="comment">- 乱码问题：</span></span><br><span class="line"><span class="comment">- 如果编码和解码所采用的字符集不同就会出现乱码问题</span></span><br><span class="line"><span class="comment">- 常见的字符集：</span></span><br><span class="line"><span class="comment">ASCII</span></span><br><span class="line"><span class="comment">ISO88591</span></span><br><span class="line"><span class="comment">GB2312</span></span><br><span class="line"><span class="comment">GBK</span></span><br><span class="line"><span class="comment">UTF-8，在开发时我们使用的字符集都是UTF-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档声明，声明当前网页的版本 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html的根标签（元素），网页中的所有内容都要写根元素的里边 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- head是网页的头部，head中的内容不会在网页中直接出现，主要用来帮助浏览器或搜索引擎来解析网页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- meta标签用来设置网页的元数据，这里meta用来设置网页的字符集，避免乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- title中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中的内容来判断网页的主要内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body是html的子元素，表示网页的主体，网页中所有的可见内容都应该写在body里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- h1网页的一级标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页的大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体（转义字符）"><a href="#实体（转义字符）" class="headerlink" title="实体（转义字符）"></a>实体（转义字符）</h3><p>在网页中编写的多个空格默认情况会自动被浏览器解析为一个空格。</p><p>在HTML中有些时候，我们不能直接书写一些特殊符号，比如：多个连续的空格，比如字母两侧的大于和小于号……</p><p>如果我们需要在网页中书写这些特殊的符号，则需要使用html中的实体（转义字符）。</p><p>实体的语法：</p><pre><code>&amp;实体的名字;  &amp;nbsp; 空格  &amp;gt; 大于号  &amp;lt; 小于号  &amp;copy; 版权符号</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    今天<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>天气真不错！</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    a<span class="symbol">&amp;lt;</span>b<span class="symbol">&amp;gt;</span>c</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p> meta主要用于设置网页中的一些元数据，元数据不是给用户看。</p><ul><li>charset 指定网页的字符集</li><li>name 指定的数据的名称</li><li>content 指定的数据的内容</li><li>keywords 表示网站的关键字，可以同时指定多个关键字，关键字间使用,隔开</li><li>description 用于指定网站的描述，网站的描述会显示在搜索引擎的搜索的结果中</li></ul><p>title标签的内容会作为搜索结果的超链接上的文字显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                    &lt;meta name=&quot;Keywords&quot; content=&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数 码,配件,手表,存储卡,京东&quot;/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;meta name=&quot;keywords&quot; content=&quot;网购,网上购物,在线购物,网购网站,网购商城,购物网站,网购中心,购 物中心,卓越,亚马逊,卓越亚马逊,亚马逊中国,joyo,amazon&quot;&gt;</span></span><br><span class="line"><span class="comment">                    &lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电  脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上    购物体验!&quot;/&gt;  </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5,前端,CSS3&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这是一个非常不错的网站&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=https://www.mozilla.org&quot;&gt; </span></span><br><span class="line"><span class="comment">        将页面重定向到另一个网站</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=https://www.baidu.com&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p> 在网页中HTML专门用来负责网页的结构，所以在使用html标签时，应该关注的是<strong>标签的语义</strong>，而不是它的样式。</p><p><strong>标题标签：</strong></p><ul><li><p>h1 ~ h6 一共有六级标题</p></li><li><p>从h1~h6重要性递减，h1最重要，h6最不重要</p></li><li><p>h1在网页中的重要性仅次于title标签，一般情况下一个页面中只会有一个h1</p></li><li><p>一般情况下标题标签只会使用到h1<del>h3， 很少用h4</del>h6</p></li><li><p><strong>标题标签都是块元素</strong>。==在页面中独占一行的元素称为块元素==（block element）。</p></li><li><p>hgroup标签用来为标题分组，可以将一组相关的标题同时放入到hgroup</p></li><li><p><em>p标签：</em>*</p></li><li><p>表示页面中的一个段落</p></li><li><p>p也是一个块元素  </p></li></ul><p><strong>em标签：</strong></p><ul><li><p>用于表示语音语调的一个加重</p></li><li><p>==在页面中不会独占一行的元素称为行内元素==（inline element）<strong>只根据内容的长度来扩展</strong></p></li></ul><p><strong>strong标签：</strong></p><p>表示强调，重要内容！</p><p><strong>blockquote标签：</strong></p><p> 表示一个长引用</p><p><strong>q标签：</strong></p><p>表示一个短引用</p><p><strong>br标签：</strong></p><p>表示页面中的换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>回乡偶书二首<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>其一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>在p标签中的内容就表示一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>在p标签中的内容就表示一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气<span class="tag">&lt;<span class="name">em</span>&gt;</span>真<span class="tag">&lt;/<span class="name">em</span>&gt;</span>不错！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>你今天必须要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>完成作业<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      鲁迅说：</span><br><span class="line">      <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">          这句话我是从来没有说过的！</span><br><span class="line">      <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      子曰<span class="tag">&lt;<span class="name">q</span>&gt;</span>学而时习之，乐呵乐呵！<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      今天天气真不错</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>块元素（block element）</strong></p><ul><li>在网页中一般通过块元素来对页面进行布局</li></ul><p><strong>行内元素（inline element）</strong></p><ul><li>行内元素主要用来包裹文字</li><li>一般情况下会在块元素中放行内元素，而不会在行内元素中放块元素</li><li>块元素中基本上什么都能放</li><li>p元素中不能放任何的块元素</li></ul><p>浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正<br>比如：</p><ul><li>标签写在了根元素的外部</li><li>p元素中嵌套了块元素</li><li>根元素中出现了除head和body以外的子元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我就要写在html标签的外部！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>布局标签（结构化语义标签）</strong></p><ul><li>header 表示网页的头部</li><li>main 表示网页的主体部分(一个页面中只会有一个main)</li><li>footer 表示网页的底部</li><li>nav 表示网页中的导航</li><li>aside 和主体相关的其他内容（侧边栏）</li><li>article 表示一个独立的文章</li><li>section 表示一个独立的区块，上边的标签都不能表示时使用section</li><li>div 没有语义，就用来表示一个区块，目前来讲div还是我们主要的布局元素</li><li>span 行内元素，没有任何的语义，一般用于在网页中选中文字</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表（list）:<br>    1、铅笔<br>    2、尺子<br>    3、橡皮</p><p>在html中也可以创建列表，html列表一共有三种：<br>    1、有序列表<br>    2、无序列表<br>    3、定义列表</p><p><strong>有序列表</strong></p><ul><li>使用<code>ol</code>标签来创建有序列表</li><li>使用<code>li</code>表示列表项 </li></ul><p><strong>无序列表</strong></p><ul><li>使用<code>ul</code>标签来创建无序列表</li><li>使用<code>li</code>表示列表项</li></ul><p><strong>定义列表</strong></p><ul><li>使用<code>dl</code>标签来创建一个定义列表</li><li>使用<code>dt</code>来表示定义的内容</li><li>使用<code>dd</code>来对内容进行解释说明</li></ul><p><strong>列表之间可以互相嵌套</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>结构表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>结构表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>结构表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            aa</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>aa-1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>aa-2</span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>aa-1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>aa-2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>超链接可以让我们从一个页面跳转到其他页面，或者是当前页面的其他的位置。</p><p>使用 <code>a</code> 标签来定义超链接</p><p>超链接是也是一个<strong>行内元素</strong>，在a标签中可以嵌套除它自身外的任何元素</p><p>属性：</p><ul><li>href 指定跳转的目标路径<ul><li>值可以是一个外部网站的地址</li><li>也可以写一个内部页面的地址</li></ul></li><li>target属性，用来指定超链接打开的位置<ul><li>_self 默认值 在当前页面中打开超链接</li><li>_blank 在一个新的要么中打开超链接</li></ul></li><li>在开发中可以将<code>#</code>作为超链接的路径的展位符使用</li><li>可以使用 <code>javascript:;</code> 来作为href的属性，此时点击这个超链接什么也不会发生</li><li>可以直接将超链接的href属性设置为#，这样点击超链接以后，页面不会发生跳转，而是转到当前页面的<strong>顶部</strong>的位置</li><li>可以跳转到页面的指定位置，只需将href属性设置 <code>#目标元素的id属性值</code></li><li>id属性（唯一不重复的）<ul><li>每一个标签都可以添加一个id属性</li><li>id属性就是元素的唯一标识，同一个页面中不能出现重复的id属性</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- &lt;a href=&quot;https://www.baidu123.com&quot;&gt;超链接&lt;/a&gt; --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;07.列表.html&quot;</span>&gt;</span>超链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;07.列表.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span>&gt;</span>去底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#p3&quot;</span>&gt;</span>去第三个自然段<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quia quasi numquam quam molestias cumque eveniet ab nobis doloribus dolores. Nesciunt, distinctio tempore similique consequuntur nulla dolorem sapiente minus praesentium impedit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这是一个新的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>这是一个新的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>当我们需要跳转一个服务器内部的页面时，一般我们都会使用相对路径</p><p>相对路径都会使用<code>.</code>或<code>..</code>开头</p><ul><li>./  表示当前文件所在的目录</li><li>../ 表示当前文件所在目录的上一级目录</li><li>./可以省略不写，如果不写./也不写../则就相当于写了./</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./target.html&quot;</span>&gt;</span>超链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../07.列表.html&quot;</span>&gt;</span>超链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./inner/target2.html&quot;</span>&gt;</span>超链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../outer/target3.html&quot;</span>&gt;</span>超链接4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>图片标签用于向当前页面中引入一个外部图片</p><p>使用<code>img</code>标签来引入外部图片，img标签是一个<strong>自结束标签</strong></p><p>img这种元素属于<strong>替换元素（块和行内元素之间，具有两种元素的特点）</strong></p><p><strong>属性：</strong> </p><ul><li>src 属性指定的是外部图片的路径（路径规则和超链接是一样的）</li><li>alt 图片的描述，这个描述默认情况下不会显示，有些浏览器会图片无法加载时显示。搜索引擎会根据alt中的内容来识别图片，如果不写alt属性则图片不会被搜索引擎所收录。</li><li>width 图片的宽度 (单位是像素)</li><li>height 图片的高度<ul><li>宽度和高度中如果只修改了一个，则另一个会等比例缩放</li></ul></li></ul><p><strong>注意：</strong></p><ul><li>一般情况在pc端，不建议修改图片的大小，需要多大的图片就裁多大</li><li>但是在移动端，经常需要对图片进行缩放（大图缩小）</li></ul><p><strong>图片的格式：</strong></p><ul><li>jpeg(jpg)<ul><li>支持的颜色比较丰富，不支持透明效果，不支持动图</li><li>一般用来显示照片</li></ul></li><li>gif<ul><li>支持的颜色比较少，支持简单透明，支持动图</li><li>颜色单一的图片，动图</li></ul></li><li>png<ul><li>支持的颜色丰富，支持复杂透明，不支持动图</li><li>颜色丰富，复杂透明图片（专为网页而生）</li></ul></li><li>webp<ul><li>这种格式是谷歌新推出的专门用来表示网页中的图片的一种格式</li><li>它具备其他图片格式的所有优点，而且文件还特别的小</li><li>缺点：兼容性不好</li></ul></li><li>base64<ul><li>将图片使用base64编码，这样可以将图片转换为字符，通过字符的形式来引入图片 </li><li>一般都是一些需要和网页一起加载的图片才会使用base64</li></ul></li><li>效果一样，用小的；效果不一样，用效果好的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;松鼠&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F3%2F513d3f96726af.jpg&amp;refer=http%3A%2F%2Fpic1.win4000.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1622632937&amp;t=5a11c1eaf32663125304ae1338fffec3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;钢铁侠&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h3><p>内联框架，用于向当前页面中引入一个其他页面</p><ul><li><p>src 指定要引入的网页的路径 </p></li><li><p>frameborder 指定内联框架的边框</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><p><code>audio</code>标签用来向页面中引入一个外部的音频文件的，音视频文件引入时，默认情况下不允许用户自己控制播放停止。</p><p><strong>属性：</strong></p><ul><li>controls 是否允许用户控制播放</li><li> autoplay 音频文件是否自动播放</li><li>​    如果设置了autoplay 则音乐在打开页面时会自动播放，但是目前来讲大部分浏览器都不会自动对音乐进行播放 </li><li>loop 音乐是否循环播放</li><li>除了通过src来指定外部文件的路径以外，还可以通过source来指定文件的路径</li></ul><p>使用<code>video</code>标签来向网页中引入一个视频，使用方式和audio基本上是一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;audio src=&quot;./source/audio.mp3&quot; controls autoplay loop&gt;&lt;/audio&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- &lt;audio src=&quot;./source/audio.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对不起，您的浏览器不支持播放音频！请升级浏览器！ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.ogg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.webm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://v.qq.com/txp/iframe/player.html?vid=b00318l66nt&quot;</span> <span class="attr">allowFullScreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><blockquote><p>层叠样式表</p><p>网页实际上是一个多层的结构，通过CSS可以分别为网页的每一个层来设置样式,而最终我们能看到只是网页的最上边一层。</p><p>总之一句话，CSS用来设置网页中元素的样式</p></blockquote><p> 使用CSS来修改元素的样式</p><p><strong>第一种方式(内联样式，行内样式)</strong></p><ul><li>在标签内部通过style属性来设置元素的样式</li><li>问题：<pre><code>  - 使用内联样式，样式只能对一个标签生效， 如果希望影响到多个元素必须在每一个元素中都复制一遍  - 并且当样式发生变化时，我们必须要一个一个的修改，非常的不方便  - ==开发时绝对不要使用内联样式==</code></pre></li></ul><p><strong>第二种方式（内部样式表）</strong></p><ul><li>将样式编写到head中的<code>style</code>标签里，然后通过CSS的<strong>选择器</strong>来选中元素并为其设置各种样式，可以同时为多个标签设置样式，并且修改时只需要修改一处即可全部应用</li><li>内部样式表更加方便对样式进行复用</li><li>问题：我们的内部样式表只能对一个网页起作用，它里边的样式<strong>不能跨页面进行复用</strong></li></ul><p><strong>第三种方式 （外部样式表） 最佳实践</strong></p><ul><li>可以将CSS样式编写到一个<strong>外部的CSS文件</strong>中, 然后通过<code>link</code>标签来引入外部的CSS文件</li><li>外部样式表需要通过link标签进行引入，意味着只要想使用这些样式的网页都可以对其进行引用，使样式可以<strong>在不同页面之间进行复用</strong>。</li><li>将样式编写到外部的CSS文件中，可以使用到浏览器的<strong>缓存机制</strong>，从而加快网页的加载速度，提高用户的体验。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;style&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        p&#123;</span></span><br><span class="line"><span class="comment">            color: green;</span></span><br><span class="line"><span class="comment">            font-size: 50px;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/style&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- &lt;p style=&quot;color:red; font-size: 60px;&quot;&gt;少小离家老大回，乡音无改鬓毛衰&lt;/p&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     &lt;p style=&quot;color: red; font-size: 60px;&quot;&gt;今天天气真不错！&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>落霞与孤鹜齐飞，秋水共长天一色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>少小离家老大回，乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><p>CSS的基本语法:</p><p>​        <code>选择器 声明块</code></p><p><strong>选择器</strong></p><ul><li>通过选择器可以选中页面中的指定元素</li><li>比如 p 的作用就是选中页面中所有的p元素</li></ul><p><strong>声明块</strong></p><ul><li>通过声明块来指定要为元素设置的样式</li><li>声明块由一个一个的声明组成</li><li>声明是一个名值对结构 <code>一个样式名对应一个样式值，名和值之间以:连接，以;结尾</code>      </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*      </span></span></span><br><span class="line"><span class="comment"><span class="css">        CSS中的注释，注释中的内容会自动被浏览器所忽略</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">          <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      </span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气真不错！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气真不错！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气真不错！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气真不错！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h3><p><strong>元素选择器</strong></p><ul><li>作用：根据标签名来选中指定的元素</li><li>语法：<code>标签名&#123;&#125;</code></li><li>例子：p{}  h1{}  div{}</li></ul><p><strong>id选择器</strong></p><ul><li>作用：根据元素的id属性值选中一个元素</li><li>语法：<code>#id属性值&#123;&#125;</code></li><li>例子：#box{} #red{}  </li></ul><p><strong>类选择器</strong></p><ul><li>作用：根据元素的class属性值选中一组元素</li><li>语法：<code>.class属性值</code></li></ul><p><strong>通配选择器</strong></p><ul><li>作用：选中页面中的所有元素</li><li>语法: <code>*</code></li></ul><blockquote><p>class是一个标签的属性，它和id类似，不同的是class可以重复使用</p><p>可以通过class属性来为元素分组</p><p>可以同时为一个元素指定多个class属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            将所有的段落设置为红色（字体）</span></span></span><br><span class="line"><span class="comment"><span class="css">           </span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* p&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        h1&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: green;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            将儿童相见不相识设置红色</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* #red&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">            将 秋水... 和 落霞... 设置为蓝色</span></span></span><br><span class="line"><span class="comment"><span class="css">                </span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* .blue&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: blue;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        .abc&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            font-size: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            通配选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;blue abc&quot;</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>少小离家老大回<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>儿童相见不相识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>笑问客从何处来<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>秋水共长天一色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>落霞与孤鹜齐飞<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p><strong>交集选择器</strong></p><ul><li>作用：选中同时复合多个条件的元素</li><li>语法：<code>选择器1选择器2选择器3选择器n&#123;&#125;</code></li><li>注意点：交集选择器中如果有元素选择器，<strong>必须使用元素选择器开头</strong></li></ul><p><strong>选择器分组（并集选择器）</strong></p><ul><li>作用：同时选择多个选择器对应的元素 </li><li>语法：<code>选择器1,选择器2,选择器3,选择器n&#123;&#125;</code>  <code>#b1,.p1,h1,span,div.red&#123;&#125;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 将class为red的元素设置为红色（字体） */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 将class为red的div字体大小设置为30px */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            交集选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.c</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* div#box1&#123;&#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">            选择器分组（并集选择器）</span></span></span><br><span class="line"><span class="comment"><span class="css">         */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>, <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red2 a b c&quot;</span>&gt;</span>我是div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><p><strong>父元素</strong></p><ul><li>直接包含子元素的元素叫做父元素</li></ul><p><strong>子元素</strong></p><ul><li>直接被父元素包含的元素是子元素</li></ul><p><strong>祖先元素</strong></p><ul><li><p>直接或间接包含后代元素的元素叫做祖先元素</p></li><li><p>一个元素的父元素也是它的祖先元素</p></li></ul><p><strong>后代元素</strong></p><ul><li>直接或间接被祖先元素包含的元素叫做后代元素</li><li>子元素也是后代元素</li></ul><p><strong>兄弟元素</strong></p><ul><li>拥有相同父元素的元素是兄弟元素</li></ul><p>==<strong>子元素选择器</strong>==</p><ul><li>作用：选中指定父元素的指定子元素</li><li>语法：父元素 &gt; 子元素</li></ul><p>==<strong>后代元素选择器</strong>==</p><ul><li>作用：选中指定元素内的指定后代元素</li><li>语法：祖先 后代</li></ul><p>==<strong>选择下一个兄弟</strong>==</p><ul><li>语法：前一个 + 下一个</li></ul><p>==<strong>选择下边所有的兄弟</strong>==</p><ul><li>语法：兄 ~ 弟</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            为div的子元素span设置一个字体颜色红色</span></span></span><br><span class="line"><span class="comment"><span class="css">            （为div直接包含的span设置一个字体颜色）</span></span></span><br><span class="line"><span class="comment"><span class="css">         */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* div.box &gt; span&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: orange;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">         <span class="comment">/* div span&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">             color: skyblue</span></span></span><br><span class="line"><span class="comment"><span class="css">         &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">         <span class="comment">/* div &gt; p &gt; span&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">             color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">         &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-tag">p</span> + <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-tag">p</span> ~ <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        我是一个div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            我是div中的p元素</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        我是div外的span</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><code>[属性名]</code> 选择含有指定属性的元素</p><p><code>[属性名=属性值]</code> 选择含有指定属性和属性值的元素</p><p><code>[属性名^=属性值]</code> 选择属性值以指定值开头的元素</p><p><code>[属性名$=属性值]</code> 选择属性值以指定值结尾的元素</p><p><code>[属性名*=属性值]</code> 选择属性值中含有某值的元素的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* p[title]&#123; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* p[title=abc]&#123; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* p[title^=abc]&#123; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* p[title$=abc]&#123; */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-attr">[title*=e]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>少小离家老大回<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;abcdef&quot;</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;helloabc&quot;</span>&gt;</span>儿童相见不相识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>笑问客从何处来<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>秋水共长天一色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>落霞与孤鹜齐飞<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪类（不存在的类，特殊的类）</p><ul><li><p><strong>伪类用来描述一个元素的特殊状态</strong></p><p>   比如：第一个子元素、被点击的元素、鼠标移入的元素…</p></li><li><p>伪类一般情况下都是使用<code>:</code>开头</p><pre><code>  - `:first-child` 第一个子元素  - `:last-child` 最后一个子元素  - `:nth-child()` 选中第n个子元素       特殊值：          - n 第n个 n的范围0到正无穷          - 2n 或 even 表示选中偶数位的元素          - 2n+1 或 odd 表示选中奇数位的元素       以上这些伪类都是根据**所有的子元素**进行排序  - `:first-of-type`  - `:last-of-type`  - `:nth-of-type()`       这几个伪类的功能和上述的类似，不通点是他们是在**同类型元素**中进行排序  - `:not()` 否定伪类       将符合条件的元素从选择器中去除</code></pre></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            将ul里的第一个li设置为红色</span></span></span><br><span class="line"><span class="comment"><span class="css">         */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* ul &gt; li:first-child&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">        <span class="comment">/* ul &gt; li:last-child&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* ul &gt; li:nth-child(2n+1)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* ul &gt; li:nth-child(even)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* ul &gt; li:first-of-type&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>))&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ul&gt;li*5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第〇个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第五个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="a元素的伪类"><a href="#a元素的伪类" class="headerlink" title="a元素的伪类"></a>a元素的伪类</h3><p><code>:link</code> 用来表示没访问过的链接（正常的链接）</p><p><code>:visited</code> 用来表示访问过的链接（由于隐私的原因，所以visited这个伪类只能修改链接的颜色）</p><p><code>:hover</code> 用来表示鼠标移入的状态</p><p><code>:active</code> 用来表示鼠标点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange; </span></span><br><span class="line"><span class="css">            <span class="comment">/* font-size: 50px;   */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">             <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">             <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">             <span class="attribute">color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">             </span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>访问过的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu123.com&quot;</span>&gt;</span>没访问过的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>伪元素，表示页面中一些特殊的并不真实的存在的元素（特殊的位置）</p><p>伪元素使用 <code>::</code> 开头</p><ul><li><code>::first-letter</code> 表示第一个字母</li><li><code>::first-line</code> 表示第一行</li><li><code>::selection</code> 表示选中的内容</li><li><code>::before</code> 元素的开始 </li><li><code>::after</code> 元素的最后<ul><li><strong>before 和 after 必须结合content属性来使用</strong></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow; </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* div::before&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            content: &#x27;abc&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        div::after&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            content: &#x27;haha&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="css">            color: blue;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;『&#x27;</span>;</span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;』&#x27;</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;q&gt;hello&lt;/q&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Hello How are you<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque velit modi veniam nisi veritatis tempore laborum nemo ipsa itaque optio. Id odit consequatur mollitia excepturi, minus saepe nostrum vel porro.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h3><p>样式的继承，我们为一个元素设置的样式同时也会应用到它的后代元素上。</p><p>继承是发生在祖先和后代之间的。</p><p> 继承的设计是为了方便我们的开发，利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，这样只需设置一次即可让所有的元素都具有该样式。</p><p>注意：并不是所有的样式都会被继承。 比如：<strong>背景相关的，布局相关等的这些样式都不会被继承。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* body&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            font-size: 12px;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: yellowgreen</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是一个p元素</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素外的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是div</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            我是div中的span</span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span>&gt;</span>我是span中的em<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h3><p>样式的冲突：当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式的冲突。</p><p>发生样式冲突时，应用哪个样式由选择器的权重（优先级）决定。</p><p>选择器的权重</p><ul><li>内联样式        1,0,0,0</li><li>id选择器        0,1,0,0</li><li>类和伪类选择器   0,0,1,0</li><li>元素选择器       0,0,0,1</li><li>通配选择器       0,0,0,0</li><li>继承的样式       没有优先级</li></ul><blockquote><p> 比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的）,选择器的累加不会超过其最大的数量级，类选择器再高也不会超过id选择器。如果优先级计算后相同，此时则优先使用靠下的样式。</p><p>可以在某一个样式的后边添加 <code>!important</code> ，则此时该样式会获取到最高的优先级，甚至超过内联样式，<br>注意：在开发中这个玩意一定要慎用！</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* #box1&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            background-color: orange;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        div#box1&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            background-color: yellow;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: purple <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* font-size: 20px; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* div,p,span&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            background-color:yellowgreen;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">         *&#123;</span></span><br><span class="line"><span class="css">             <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">         <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">             <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red d1 d2 d3 d4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: chocolate;&quot;</span>&gt;</span>我是一个div <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><p>长度单位：</p><ul><li>像素<ul><li>屏幕（显示器）实际上是由一个一个的小点点构成的</li><li>不同屏幕的像素大小是不同的，像素越小的屏幕显示的效果越清晰</li><li>所以同样的200px在不同的设备下显示效果不一样</li></ul></li><li>百分比<ul><li>也可以将属性值设置为相对于其父元素属性的百分比</li><li>设置百分比可以使子元素跟随父元素的改变而改变</li></ul></li><li>em<ul><li>em是相对于元素的字体大小来计算的</li><li>1em = 1font-size</li><li>em会根据字体大小的改变而改变</li></ul></li><li>rem<ul><li>rem是相对于根元素的字体大小来计算</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:aqua; </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* width: 10em;</span></span></span><br><span class="line"><span class="comment"><span class="css">            height: 10em; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- .box1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色单位：</p><p>在CSS中可以直接使用颜色名来设置各种颜色，比如：red、orange、yellow、blue、green … …</p><p>但是在css中直接使用颜色名是非常的不方便</p><ul><li>RGB值：<ul><li>RGB通过三种颜色的不同浓度来调配出不同的颜色</li><li>R red，G green ，B blue</li><li>每一种颜色的范围在 0 - 255 (0% - 100%) 之间</li><li> 语法：<code>RGB(红色,绿色,蓝色)</code></li></ul></li><li>RGBA:<ul><li>就是在rgb的基础上增加了一个a表示不透明度</li><li>需要四个值，前三个和rgb一样，第四个表示不透明度</li><li>1表示完全不透明   0表示完全透明  .5半透明</li></ul></li><li>十六进制的RGB值：<ul><li>语法：<code>#红色绿色蓝色</code></li><li>颜色浓度通过 00-ff</li><li>如果颜色两位两位重复可以进行简写  #aabbcc –&gt; #abc</li></ul></li><li>HSL值 HSLA值<ul><li>H 色相(0 - 360)</li><li>S 饱和度，颜色的浓度 0% - 100%</li><li>L 亮度，颜色的亮度 0% - 100%</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">106</span>,<span class="number">153</span>,<span class="number">85</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">106</span>,<span class="number">153</span>,<span class="number">85</span>,.<span class="number">5</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ffff00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bbffaa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#9CDCFE</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">254</span>, <span class="number">156</span>, <span class="number">156</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">98</span>, <span class="number">48%</span>, <span class="number">40%</span>, <span class="number">0.658</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h2><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>文档流（normal flow）</p><ul><li>网页是一个多层的结构，一层叠着一层</li><li>通过CSS可以分别为每一层来设置样式</li><li>作为用户来讲只能看到最顶上一层</li><li>这些层中，最底下的一层称为文档流，文档流是网页的基础（我们所创建的元素默认都是在文档流中进行排列）</li><li>对于我们来元素主要有两个状态<pre><code>  - 在文档流中  - 不在文档流中（脱离文档流）</code></pre></li></ul><p><strong>元素在文档流中有什么特点</strong></p><p><strong>块元素</strong></p><ul><li>块元素会在页面中独占一行(自上向下垂直排列)</li><li>默认宽度是父元素的全部（会把父元素撑满）</li><li>默认高度是被内容撑开（子元素）</li></ul><p><strong>行内元素</strong></p><ul><li>行内元素不会独占页面的一行，只占自身的大小</li><li>行内元素在页面中左向右水平排列，如果一行之中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（书写习惯一致）</li><li>行内元素的默认宽度和高度都是被内容撑开</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>我是div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>盒模型、盒子模型、框模型（box model）</p><ul><li>CSS将页面中的所有元素都设置为了一个矩形的盒子</li><li>将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置</li><li>每一个盒子都由一下几个部分组成：<ul><li>内容区（content）</li><li>内边距（padding）</li><li>边框（border）</li><li>外边距（margin）</li></ul></li></ul><p><a href="https://imgtu.com/i/hzMVKO"><img src="https://z3.ax1x.com/2021/09/11/hzMVKO.gif" alt="hzMVKO.gif"></a></p><p><strong>内容区（content）</strong></p><ul><li>元素中的所有的子元素和文本内容都在内容区中排列 </li><li>内容区的大小由width 和 height两个属性来设置 <ul><li>width 设置内容区的宽度</li><li>height 设置内容区的高度</li></ul></li></ul><p><strong>边框（border）</strong></p><p>边框属于盒子边缘，边框里边属于盒子内部，出了边框都是盒子的外部</p><p>边框的大小会影响到整个盒子的大小</p><p>要设置边框，需要至少设置三个样式：</p><ul><li>边框的宽度 border-width</li><li>边框的颜色 border-color</li><li>边框的样式 border-style</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">             <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">             <span class="attribute">border-color</span>: red;</span></span><br><span class="line"><span class="css">             <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="盒子模型-边框"><a href="#盒子模型-边框" class="headerlink" title="盒子模型_边框"></a>盒子模型_边框</h3><p><strong>边框的宽度 border-width</strong></p><ul><li><p>默认值，一般都是 3个像素</p></li><li><p>border-width可以用来指定四个方向的边框的宽度</p><p>值的情况</p><pre><code>                    四个值：上 右 下 左                    三个值：上 左右 下                    两个值：上下 左右                    一个值：上下左右</code></pre></li><li><p>除了border-width还有一组 border-xxx-width xxx可以是 top right bottom left，用来单独指定某一个边的宽度</p></li></ul><p><strong>边框的颜色 border-color</strong></p><ul><li>border-color用来指定边框的颜色，同样可以分别指定四个边的边框。规则和border-width一样</li><li>border-color也可以省略不写，如果省略了则自动使用color的颜色值</li></ul><p><strong>边框的样式 border-style</strong></p><ul><li>border-style 指定边框的样式<ul><li>solid 表示实线</li><li> dotted 点状虚线</li><li>dashed 虚线</li><li>double 双线</li></ul></li><li>border-style的默认值是none 表示没有边框</li></ul><p><strong>border简写属性</strong></p><ul><li>通过该属性可以同时设置边框所有的相关样式，并且没有顺序要求</li><li>除了border以外还有四个 border-xxx<ul><li>border-top</li><li>border-right </li><li>border-bottom</li><li>border-left</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* border-width: 10px; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* border-top-width: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             border-left-width: 30px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* border-color: orange red yellow green;</span></span></span><br><span class="line"><span class="comment"><span class="css">             border-color: orange; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* border-style: solid dotted dashed double;</span></span></span><br><span class="line"><span class="comment"><span class="css">             border-style: solid; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* border-width: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             border-color: orange;</span></span></span><br><span class="line"><span class="comment"><span class="css">             border-style: solid; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">              <span class="comment">/* border: solid 10px orange; */</span></span></span><br><span class="line"><span class="css">              <span class="comment">/* border-top: 10px solid red;</span></span></span><br><span class="line"><span class="comment"><span class="css">              border-left: 10px solid red;</span></span></span><br><span class="line"><span class="comment"><span class="css">              border-bottom: 10px solid red; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">              <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">              <span class="attribute">border-right</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="盒子模型-内边距"><a href="#盒子模型-内边距" class="headerlink" title="盒子模型_内边距"></a>盒子模型_内边距</h3><p>内边距（padding）</p><blockquote><p>一个盒子的可见框的大小，由内容区 内边距 和 边框共同决定，所以在计算盒子大小时，需要将这三个区域加到一起计算</p></blockquote><ul><li>内容区和边框之间的距离是内边距</li><li>一共有四个方向的内边距：<pre><code>  - padding-top  - padding-right  - padding-bottom  - padding-left</code></pre></li><li>内边距的设置会影响到盒子的大小</li><li>背景颜色会延伸到内边距上</li><li>padding 内边距的简写属性，可以同时指定四个方向的内边距。规则和border-width 一样。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> orange solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* padding-top: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             padding-left: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             padding-right: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             padding-bottom: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">              <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> ;</span></span><br><span class="line"><span class="css">              <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> ;</span></span><br><span class="line"><span class="css">              <span class="attribute">padding</span>: <span class="number">10px</span> ;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="盒子模型-外边距"><a href="#盒子模型-外边距" class="headerlink" title="盒子模型_外边距"></a>盒子模型_外边距</h3><p>外边距（margin）</p><ul><li>外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置</li><li>一共有四个方向的外边距：<pre><code>  - margin-top 上外边距，设置一个正值，元素会向下移动  - margin-right 默认情况下设置margin-right不会产生任何效果  - margin-bottom 下外边距，设置一个正值，其下边的元素会向下移动  - margin-left 左外边距，设置一个正值，元素会向右移动</code></pre></li><li>margin也可以设置负值，如果是负值则元素会向相反的方向移动</li><li>元素在页面中是按照自左向右的顺序排列的<pre><code>  - 所以默认情况下如果我们设置的左和上外边距则会移动元素自身  - 而设置下和右外边距会移动其他元素</code></pre></li><li>margin的简写属性<pre><code>  - margin 可以同时设置四个方向的外边距 ，用法和padding一样</code></pre></li><li>margin会影响到盒子实际占用空间 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* margin-top: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             margin-left: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             margin-bottom: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* margin-bottom: 100px; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* margin-top: -100px; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* margin-left: -100px; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* margin-bottom: -100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* margin-right: 0px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h3><p>元素的水平方向的布局：</p><p>元素在其父元素中水平方向的位置由以下几个属性共同决定</p><ul><li>margin-left</li><li>border-left</li><li>padding-left</li><li>width</li><li>padding-right</li><li>border-right</li><li>margin-right</li></ul><p>一个元素在其父元素中，水平布局必须要满足以下的等式</p><p>==margin-left+border-left+padding-left+width+padding-right+border-right+margin-right = 其父元素内容区的宽度 （必须满足）==</p><ul><li>如果相加结果使等式不成立，则称为过度约束，则等式会自动调整</li><li>调整的情况：<ul><li>如果这七个值中没有为 auto 的情况，则浏览器会自动调整<code>margin-right</code>值以使等式满足</li><li>这七个值中有三个值可以设置为auto <code>width、margin-left、maring-right</code><ul><li>如果某个值为auto，则会自动调整为auto的那个值以使等式成立</li><li>如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0</li><li>如果将三个值都设置为auto，则外边距都是0，宽度最大</li><li>如果将两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值</li></ul></li><li>所以我们经常利用这个特点来使一个元素在其父元素中水平居中<br><code>width:xxxpx;</code><br><code>margin:0 auto;</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* width: auto;  width的值默认就是auto*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="comment">/* margin-left: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin-right: 400px */</span></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="垂直方向的布局"><a href="#垂直方向的布局" class="headerlink" title="垂直方向的布局"></a>垂直方向的布局</h3><blockquote><p>默认情况下父元素的高度被内容撑开</p><p>子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出</p><p>使用 overflow 属性来设置父元素如何处理溢出的子元素</p></blockquote><p>可选值：</p><ul><li>visible，默认值 子元素会从父元素中溢出，在父元素外部的位置显示</li><li>hidden 溢出内容将会被裁剪不会显示</li><li>scroll 生成两个滚动条，通过滚动条来查看完整的内容</li><li>auto 根据需要生成滚动条</li><li>overflow-x、overflow-y</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;outer&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">            在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外边距的折叠"><a href="#外边距的折叠" class="headerlink" title="外边距的折叠"></a>外边距的折叠</h3><p>  垂直外边距的重叠（折叠）</p><ul><li><p>相邻的垂直方向外边距会发生重叠现象</p><pre><code>       - 兄弟元素                       - 兄弟元素           - 兄弟元素间的相邻垂直外边距会取两者之间的较大值（两者都是正值）           - 特殊情况：               - 如果相邻的外边距一正一负，则取两者的和               - 如果相邻的外边距都是负值，则取两者中绝对值较大的                      * 兄弟元素之间的外边距的重叠，对于开发是有利的，所以我们不需要进行处理</code></pre></li></ul><ul><li>父子元素<ul><li>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）</li><li>父子外边距的折叠会影响到页面的布局，必须要进行处理</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> , <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      </span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置一个下外边距 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置一个上外边距 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* padding-top: 100px; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-top: 1px #bfa solid; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h3><blockquote><ul><li>行内元素不支持设置宽度和高度</li><li>行内元素可以设置padding，但是垂直方向padding不会影响页面的布局</li><li>行内元素可以设置border，垂直方向的border不会影响页面的布局</li><li>行内元素可以设置margin，垂直方向的margin不会影响布局</li></ul></blockquote><p><strong>display 用来设置元素显示的类型</strong></p><p>可选值：</p><ul><li>inline 将元素设置为行内元素</li><li>block 将元素设置为块元素</li><li>inline-block 将元素设置为行内块元素 （行内块，既可以设置宽度和高度又不会独占一行）</li><li>table 将元素设置为一个表格 </li><li>none 元素不在页面中显示</li></ul><p><strong>visibility 用来设置元素的显示状态</strong></p><p>可选值：</p><ul><li><p>visible 默认值，元素在页面中正常显示</p></li><li><p>hidden 元素在页面中隐藏不显示，但是依然占据页面的位置</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.s1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* width: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">             height: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* padding: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* border: 100px solid red; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h3><p>默认样式：</p><ul><li>通常情况，浏览器都会为元素设置一些默认样式</li><li>默认样式的存在会影响到页面的布局，通常情况下编写网页时必须要去除浏览器的默认样式（PC端的页面）</li></ul><p>重置样式表：专门用来对浏览器的样式进行重置的</p><ul><li>reset.css 直接去除了浏览器的默认样式</li><li>normalize.css 对默认样式进行了统一</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/reset.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/normalize.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* body&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        p&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        ul&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            /* 去除项目符号 * /</span></span></span><br><span class="line"><span class="comment"><span class="css">            list-style:none; </span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* *&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="盒子的尺寸"><a href="#盒子的尺寸" class="headerlink" title="盒子的尺寸"></a>盒子的尺寸</h3><p>默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定</p><p>box-sizing 用来设置盒子尺寸的计算方式（设置width和height的作用）</p><p>可选值：</p><ul><li>content-box 默认值，宽度和高度用来设置内容区的大小</li><li>border-box 宽度和高度用来设置整个盒子可见框的大小</li><li>width 和 height 指的是内容区 和 内边距 和 边框的总大小</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="轮廓和圆角"><a href="#轮廓和圆角" class="headerlink" title="轮廓和圆角"></a>轮廓和圆角</h3><p><strong>box-shadow 用来设置元素的阴影效果，阴影不会影响页面布局</strong> </p><ul><li><p>第一个值 水平偏移量 设置阴影的水平位置 正值向右移动 负值向左移动</p></li><li><p>第二个值 垂直偏移量 设置阴影的水平位置 正值向下移动 负值向上移动</p></li><li><p>第三个值 阴影的模糊半径</p></li><li><p>第四个值 阴影的颜色</p></li><li><p><em>outline 用来设置元素的轮廓线</em>*</p></li><li><p>用法和border一模一样</p></li><li><p>轮廓和边框不同的点，就是轮廓不会影响到可见框的大小</p></li></ul><p><strong>border-radius: 用来设置圆角 圆角设置的圆的半径大小</strong></p><p>border-radius 可以分别指定四个角的圆角</p><ul><li>四个值 左上 右上 右下 左下</li><li>三个值 左上 右上/左下 右下 </li><li>两个个值 左上/右下 右上/左下 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>) ; </span></span><br><span class="line"><span class="css">  </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .box1:hover&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            outline: 10px red solid;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-top-left-radius:  */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-top-right-radius */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-bottom-left-radius:  */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-bottom-right-radius:  */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-top-left-radius:50px 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* border-radius: 20px / 40px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将元素设置为一个圆形 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><h3 id="浮动的简介"><a href="#浮动的简介" class="headerlink" title="浮动的简介"></a>浮动的简介</h3><blockquote><p>通过浮动可以使一个元素向其父元素的左侧或右侧移动</p></blockquote><p><strong>使用 float 属性来设置于元素的浮动</strong></p><p>可选值：</p><ul><li>none 默认值 ，元素不浮动</li><li>left 元素向左浮动</li><li>right 元素向右浮动</li></ul><p>注意，元素设置浮动以后，水平布局的等式便不需要强制成立</p><p>元素设置浮动以后，会完全从文档流中脱离，不再占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动</p><p><strong>浮动的特点：</strong></p><ul><li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li><li>设置浮动以后元素会向父元素的左侧或右侧移动，</li><li>浮动元素默认不会从父元素中移出</li><li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li><li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li><li>浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和它一样高</li></ul><p>简单总结：</p><p>==浮动目前来讲它的主要作用就是让页面中的元素可以水平排列，通过浮动可以制作一些水平方向的布局==  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="浮动其他的特点"><a href="#浮动其他的特点" class="headerlink" title="浮动其他的特点"></a>浮动其他的特点</h3><ul><li><p>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果</p></li><li><p>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离后，元素的一些特点也会发生变化</p><p>脱离文档流的特点：</p><ul><li><p>块元素：</p><ul><li>块元素不在独占页面的一行</li><li>脱离文档流以后，块元素的宽度和高度默认都被内容撑开</li></ul></li><li><p>行内元素：行内元素脱离文档流以后会变成块元素，特点和块元素一样</p></li><li><p>脱离文档流以后，不需要再区分块和行内了</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.s1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;</span></span><br><span class="line"><span class="comment">        在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。</span></span><br><span class="line"><span class="comment">    &lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box2&quot;&gt;helloaaaaa&lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box3&quot;&gt;hello&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="网页的布局"><a href="#网页的布局" class="headerlink" title="网页的布局"></a>网页的布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>, <span class="selector-tag">main</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置头部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: silver;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置主体 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置左侧的导航 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置中间的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">article</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">580px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置右侧的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置底部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建网页的主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧导航 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 中间的内容 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 右边的边栏 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 网页的底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="高度塌陷的问题"><a href="#高度塌陷的问题" class="headerlink" title="高度塌陷的问题"></a>高度塌陷的问题</h3><p><strong>高度塌陷的问题：</strong></p><p>在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动后，其会完全脱离文档流。</p><p>子元素从文档流中脱离，将会无法撑起父元素的高度，导致父元素的高度丢失。</p><p>父元素高度丢失以后，其下的元素会自动上移，导致页面的布局混乱。</p><p>所以高度塌陷是浮动布局中比较常见的一个问题，这个问题我们必须要进行处理！</p><p><strong>BFC(Block Formatting Context) 块级格式化环境</strong></p><ul><li>BFC是一个CSS中的一个隐含的属性，可以为一个元素开启BFC<pre><code>  - 开启BFC该元素会变成一个独立的布局区域</code></pre></li><li>元素开启BFC后的特点：<pre><code>  - 开启BFC的元素不会被浮动元素所覆盖  - 开启BFC的元素子元素和父元素外边距不会重叠  - 开启BFC的元素可以包含浮动的子元素</code></pre></li></ul><ul><li>可以通过一些特殊方式来开启元素的BFC：<ul><li>设置元素的浮动（不推荐）</li><li>将元素设置为行内块元素（不推荐）</li><li>将元素的overflow设置为一个非visible的值<ul><li>常用的方式 为元素设置 <code>overflow:hidden</code> 开启其BFC 以使其可以包含浮动元素</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="css">             <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px;background-color:yellow;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box2&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>如果我们不希望某个元素因为其他元素浮动的影响而改变位置，可以通过<code>clear</code>属性来清除浮动元素对当前元素所产生的影响</p><p><strong>clear</strong></p><ul><li>作用：清除浮动元素对当前元素所产生的影响</li><li>可选值：<pre><code>  - left 清除左侧浮动元素对当前元素的影响  - right 清除右侧浮动元素对当前元素的影响  - both 清除两侧中最大影响的那侧</code></pre></li></ul><ul><li>原理：<ul><li>设置清除浮动以后，浏览器会自动为元素添加一个上外边距，以使其位置不受其他元素的影响</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                由于box1的浮动，导致box3位置上移</span></span></span><br><span class="line"><span class="comment"><span class="css">                    也就是box3收到了box1浮动的影响，位置发生了改变</span></span></span><br><span class="line"><span class="comment"><span class="css">             */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="高度塌陷的最终解决方案"><a href="#高度塌陷的最终解决方案" class="headerlink" title="高度塌陷的最终解决方案"></a>高度塌陷的最终解决方案</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* overflow: hidden; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h3><p>==clearfix 这个样式可以同时解决高度塌陷和外边距重叠的问题，当你在遇到这些问题时，直接使用clearfix这个类即可==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .box1::before&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            content: &#x27;&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="css">            display: table;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><h3 id="定位的简介"><a href="#定位的简介" class="headerlink" title="定位的简介"></a>定位的简介</h3><p><strong>定位（position）</strong></p><ul><li><p>定位是一种更加高级的布局手段</p></li><li><p>通过定位可以将元素摆放到页面的任意位置</p></li><li><p>使用position属性来设置定位</p><p>   可选值：</p><ul><li>static 默认值，元素是静止的没有开启定位</li><li>relative 开启元素的相对定位</li><li>absolute 开启元素的绝对定位</li><li>fixed 开启元素的固定定位</li><li>sticky 开启元素的粘滞定位</li></ul></li></ul><p><strong>相对定位：</strong></p><p>当元素的position属性值设置为relative时则开启了元素的相对定位</p><p>相对定位的特点：</p><ul><li>元素开启相对定位以后，如果不设置偏移量元素不会发生任何的变化</li><li>相对定位是参照于元素在文档流中的位置进行定位的</li><li>相对定位会提升元素的层级</li><li>相对定位不会使元素脱离文档流</li><li>相对定位不会改变元素的性质块还是块，行内还是行内</li></ul><p><strong>偏移量（offset）</strong></p><p>当元素开启了定位以后，可以通过偏移量来设置元素的位置</p><ul><li>top <ul><li>定位元素和定位位置上边的距离</li></ul></li><li>bottom <ul><li>定位元素和定位位置下边的距离</li></ul></li><li>定位元素垂直方向的位置由top和bottom两个属性来控制 通常情况下我们只会使用其中一<ul><li>top值越大，定位元素越向下移动</li><li>bottom值越大，定位元素越向上移动</li></ul></li><li>left<ul><li>定位元素和定位位置的左侧距离</li></ul></li><li>right<ul><li>定位元素和定位位置的右侧距离</li></ul></li><li>定位元素水平方向的位置由left和right两个属性控制 通常情况下只会使用一个<ul><li>left越大元素越靠右</li><li>right越大元素越靠左</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><blockquote><p>当元素的position属性值设置为absolute时，则开启了元素的绝对定位</p></blockquote><p><strong>绝对定位的特点：</strong></p><ul><li><p>开启绝对定位后，如果不设置偏移量元素的位置不会发生变化</p></li><li><p>开启绝对定位后，元素会从文档流中脱离</p></li><li><p>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</p></li><li><p>绝对定位会使元素提升一个层级</p></li><li><p>绝对定位元素是相对于其包含块进行定位的</p></li><li><p><em>包含块( containing block )</em>*</p></li><li><p>正常情况下：包含块就是离当前元素最近的祖先块元素</p></li><li><p>绝对定位的包含块:</p><ul><li>包含块就是离它最近的开启了定位的祖先元素，如果所有的祖先元素都没有开启定位则根元素就是它的包含块</li></ul></li><li><p>html（根元素、初始包含块）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="comment">/* left: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            top: 0; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="css">            <span class="comment">/* position: relative; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line">        4</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span></span><br><span class="line">            5</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><blockquote><p>将元素的position属性设置为fixed则开启了元素的固定定位</p></blockquote><p>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样</p><ul><li>唯一不同的是固定定位永远参照于浏览器的视口进行定位</li><li>固定定位的元素不会随网页的滚动条滚动</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line">        4</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span></span><br><span class="line">            5</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h3><blockquote><p>当元素的position属性设置为sticky时则开启了元素的粘滞定位</p></blockquote><p>粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时将其固定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>导航条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">3000px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置nav的大小 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span>&#123;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置宽度和高度 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1210px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置背景颜色 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#E8E7E3</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>:<span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">position</span>: sticky;</span></span><br><span class="line"><span class="css">             <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置nav中li */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置li向左浮动，已使菜单横向排列 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置li的高度 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* height: 48px; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将文字在父元素中垂直居中 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置a的样式 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 将a转换为块元素 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 去除下划线 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置字体颜色 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#777777</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 修改字体大小 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">39px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">42px</span> <span class="number">0</span> <span class="number">41px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置鼠标移入的效果 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#3F3F3F</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#E8E7E3</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建导航条的结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML/CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Browser Side<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Server Side<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Programming<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>XML<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Web Building<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Reference<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绝对定位元素的布局"><a href="#绝对定位元素的布局" class="headerlink" title="绝对定位元素的布局"></a>绝对定位元素的布局</h3><p> <strong>水平布局</strong></p><p>==left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = 包含块的内容区的宽度==</p><p>当我们开启了绝对定位后:  水平方向的布局等式就需要添加<code>left</code> 和 <code>right</code> 两个值</p><p>此时规则和之前一样只是多添加了两个值</p><p>当发生过度约束：</p><ul><li>如果9个值中没有 auto 则自动调整right值以使等式满足</li><li>如果有auto，则自动调整auto的值以使等式满足</li><li>可设置auto的值 <code>margin、width、left、right</code></li><li>因为left 和 right的值默认是auto，所以如果不指定left和right，则等式不满足时，会自动调整这两个值</li></ul><p><strong>垂直方向布局的等式的也必须要满足</strong></p><p>==top + margin-top/bottom + padding-top/bottom + border-top/bottom + height = 包含块的高度==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">             <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">             <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h3><p>对于开启了定位元素，可以通过z-index属性来指定元素的层级</p><ul><li>z-index需要一个整数作为参数，值越大元素的层级越高，元素的层级越高越优先显示</li><li>如果元素的层级一样，则优先显示靠下的元素</li><li> 祖先的元素的层级再高也不会盖住后代元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">       </span></span><br><span class="line"><span class="css">             <span class="comment">/* z-index: 3; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span> , <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* z-index: 3; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="font-amp-background"><a href="#font-amp-background" class="headerlink" title="font&amp;background"></a>font&amp;background</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><strong>字体相关的样式</strong> </p><ul><li><p> color 用来设置字体颜色</p></li><li><p>font-size 字体的大小</p><p>和font-size相关的单位</p><ul><li>em 相当于当前元素的一个font-size</li><li>rem 相对于根元素的一个font-size</li></ul></li><li><p>font-family 字体族（字体的格式）</p><p>可选值：</p><ul><li>serif  衬线字体</li><li>sans-serif 非衬线字体</li><li>monospace 等宽字体</li><li>指定字体的类别，浏览器会自动使用该类别下的字体</li></ul><p>font-family 可以同时指定多个字体，多个字体间使用<code>,</code>隔开</p><p>字体生效时优先使用第一个，第一个无法使用则使用第二个 以此类推</p></li><li><p><em>font-face</em>*</p></li></ul><p>可以将服务器中的字体直接提供给用户去使用 </p><p>问题：</p><ul><li>加载速度</li><li>版权</li><li>字体格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/* 指定字体的名字 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>:<span class="string">&#x27;myfont&#x27;</span> ;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 服务器中字体的路径 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font/ZCOOLKuaiLe-Regular.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*            </span></span></span><br><span class="line"><span class="comment"><span class="css">                        Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,&quot;\5B8B\4F53&quot;,sans-serif</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">            */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* font-family: &#x27;Courier New&#x27;, Courier, monospace; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: myfont;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        今天天气真不错，Hello Hello How are you！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图标字体（iconfont）"><a href="#图标字体（iconfont）" class="headerlink" title="图标字体（iconfont）"></a>图标字体（iconfont）</h3><p>在网页中经常需要使用一些图标，可以通过图片来引入图标，但是图片大小本身比较大，并且非常的不灵活</p><p>所以在使用图标时，我们还可以将图标直接设置为字体，然后通过font-face的形式来对字体进行引入</p><p>这样我们就可以通过使用字体的形式来使用图标</p><p><strong>fontawesome 使用步骤</strong></p><ul><li>下载 <a href="https://fontawesome.com/">https://fontawesome.com/</a></li><li>解压</li><li>将css和webfonts移动到项目中</li><li>将all.css引入到网页中</li><li>使用图标字体</li><li>直接通过类名来使用图标字体<br><code>class=&quot;fas fa-bell&quot;</code><br><code>class=&quot;fab fa-accessible-icon&quot;</code></li></ul><p><strong>通过伪元素来设置图标字体</strong></p><ul><li><p>找到要设置图标的元素通过before或after选中</p></li><li><p>在content中设置字体的编码</p></li><li><p>设置字体的样式       </p><p><code>fab</code><br>   <code>font-family: &#39;Font Awesome 5 Brands&#39;;</code></p><p><code>fas</code><br>   <code>font-family: &#39;Font Awesome 5 Free&#39;;</code><br>   <code>font-weight: 900;</code>         </p></li></ul><p><strong>通过实体来使用图标字体：</strong></p><p><code>&amp;#x图标的编码;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./fa/css/all.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size:80px; color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bell-slash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-accessible-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-otter&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 160px; color:green;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./fa/css/all.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;\f1b0&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* font-family: &#x27;Font Awesome 5 Brands&#x27;; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Font Awesome 5 Free&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: <span class="number">900</span>; </span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;i class=&quot;fas fa-cat&quot;&gt;&lt;/i&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>锄禾日当午<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>汗滴禾下土<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>谁知盘中餐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>粒粒皆辛苦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fas&quot;</span>&gt;</span><span class="symbol">&amp;#xf0f3;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阿里的字体库"><a href="#阿里的字体库" class="headerlink" title="阿里的字体库"></a>阿里的字体库</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">i</span><span class="selector-class">.iconfont</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;\e625&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe61c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe622;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe623;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-qitalaji&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行高（line-height）"><a href="#行高（line-height）" class="headerlink" title="行高（line height）"></a>行高（line height）</h3><blockquote><p>行高指的是文字占有的实际高度</p></blockquote><p>可以通过line-height来设置行高</p><ul><li><p>行高可以直接指定一个大小（px em）</p></li><li><p>也可以直接为行高设置一个整数（如果是一个整数的话，行高将会是字体的指定的倍数）</p></li><li><p>行高经常还用来设置文字的行间距（行间距 = 行高 - 字体大小）</p></li><li><p>可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中</p></li></ul><p><strong>字体框</strong></p><ul><li>字体框就是字体存在的格子，设置font-size实际上就是在设置字体框的高度</li><li>行高会在字体框的上下平均分配</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* line-height: 1.33; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* line-height: 1; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* line-height: 10 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>今天天气这不错 Hello hello 今天天气这不错 Hello hello 今天天气这不错 Hello hello 今天天气这不错 Hello hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字体的简写属性"><a href="#字体的简写属性" class="headerlink" title="字体的简写属性"></a>字体的简写属性</h3><blockquote><p>font 可以设置字体相关的所有属性</p></blockquote><p>语法：</p><ul><li>font: 字体大小/行高 字体族</li><li>行高 可以省略不写 如果不写使用默认值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* font-size: 50px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            font-family: &#x27;Times New Roman&#x27;, Times, serif; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="comment">/* font: 50px/2  微软雅黑, &#x27;Times New Roman&#x27;, Times, serif; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* font: normal normal 50px/2  微软雅黑, &#x27;Times New Roman&#x27;, Times, serif; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold italic <span class="number">50px</span>/<span class="number">2</span>  微软雅黑, <span class="string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span></span><br><span class="line"><span class="css">            <span class="comment">/* font:50px &#x27;Times New Roman&#x27;, Times, serif;</span></span></span><br><span class="line"><span class="comment"><span class="css">            line-height: 2; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* font-size: 50px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* font-weight 字重 字体的加粗 </span></span></span><br><span class="line"><span class="comment"><span class="css">                可选值：</span></span></span><br><span class="line"><span class="comment"><span class="css">                    normal 默认值 不加粗</span></span></span><br><span class="line"><span class="comment"><span class="css">                    bold 加粗</span></span></span><br><span class="line"><span class="comment"><span class="css">                    100-900 九个级别（没什么用）</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">                font-style 字体的风格</span></span></span><br><span class="line"><span class="comment"><span class="css">                    normal 正常的</span></span></span><br><span class="line"><span class="comment"><span class="css">                    italic 斜体</span></span></span><br><span class="line"><span class="comment"><span class="css">            */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* font-weight: bold; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* font-weight: 500;</span></span></span><br><span class="line"><span class="comment"><span class="css">            font-style: italic; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>今天天气真不错 Hello hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本的样式"><a href="#文本的样式" class="headerlink" title="文本的样式"></a>文本的样式</h3><p><strong>text-align 文本的水平对齐</strong></p><p>可选值：</p><ul><li>left 左侧对齐</li><li>right 右对齐</li><li>center 居中对齐</li><li>justify 两端对齐</li></ul><p><strong>vertical-align 设置元素垂直对齐的方式</strong></p><p>可选值：</p><ul><li>baseline 默认值 基线对齐</li><li>top 顶部对齐</li><li>bottom 底部对齐</li><li>middle 居中对齐</li></ul><p><strong>text-decoration 设置文本修饰</strong></p><p>可选值：</p><ul><li>none 什么都没有</li><li>underline 下划线</li><li>line-through 删除线</li><li>overline 上划线</li></ul><p><strong>white-space 设置网页如何处理空白</strong></p><p>可选值：</p><ul><li>normal 正常</li><li>nowrap 不换行</li><li>pre 保留空白</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* text-align: justify; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             </span></span><br><span class="line"><span class="css">            <span class="attribute">vertical-align</span>:baseline; </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">vertical-align</span>: bottom;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    今天天气 Helloyx<span class="tag">&lt;<span class="name">span</span>&gt;</span>真不错 Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span>！</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div&gt;</span></span><br><span class="line"><span class="comment">        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Illo nihil iure at ab atque nostrum molestiae totam porro, dolorem maiores repudiandae molestias veritatis, eligendi laudantium incidunt dolores corporis? Quibusdam, consequatur.</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/an.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: 微软雅黑;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* text-decoration: overline; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* text-decoration: underline red dotted; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequatur, minus fugit in perspiciatis reprehenderit consequuntur aspernatur repellat cumque quidem asperiores quaerat placeat, tenetur vel veritatis deserunt numquam. Dolores, cupiditate enim.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        今天天气真不错</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><code>background-color</code> 设置背景颜色</p><p><code>background-image</code> 设置背景图片</p><ul><li>可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色</li><li>如果背景的图片小于元素，则背景图片会自动在元素中平铺将元素铺满</li><li>如果背景的图片大于元素，将会一个部分背景无法完全显示</li><li>如果背景图片和元素一样大，则会直接正常显示</li></ul><p><code>background-repeat</code> 用来设置背景的重复方式</p><p>可选值：</p><ul><li>repeat 默认值 ， 背景会沿着x轴 y轴双方向重复</li><li>repeat-x 沿着x轴方向重复</li><li>repeat-y 沿着y轴方向重复</li><li>no-repeat 背景图片不重复</li></ul><p><code>background-position</code> 用来设置背景图片的位置</p><ul><li><p>设置方式：</p><ul><li>通过 top left right bottom center 几个表示方位的词来设置背景图片的位置</li><li>使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是center</li></ul></li><li><p>通过偏移量来指定背景图片的位置：</p><ul><li>水平方向的偏移量 垂直方向变量</li></ul></li></ul><p><code>background-clip</code>  设置背景的范围 </p><p>可选值：</p><ul><li>border-box 默认值，背景会出现在边框的下边</li><li>padding-box 背景不会出现在边框，只出现在内容区和内边距</li><li>content-box 背景只会出现在内容区</li></ul><p><code>background-origin</code> 背景图片的偏移量计算的原点</p><ul><li>padding-box 默认值，background-position从内边距处开始计算</li><li>content-box 背景图片的偏移量从内容区处计算</li><li>border-box 背景图片的变量从边框处开始计算</li></ul><p><code>background-size</code> 设置背景图片的大小</p><ul><li><p>第一个值表示宽度 第二个值表示高度 </p><ul><li>如果只写一个，则第二个值默认是 auto</li><li>cover 图片的比例不变，将元素铺满</li><li>contain 图片比例不变，将图片在元素中完整显示</li></ul></li></ul><p><code>background-attachment</code></p><ul><li>背景图片是否跟随元素移动</li><li>可选值：<ul><li>scroll 默认值 背景图片会跟随元素移动</li><li>fixed 背景会固定在页面中，不会随元素移动</li></ul></li></ul><p><strong>backgound 背景相关的简写属性</strong></p><ul><li><p>所有背景相关的样式都可以通过该样式来设置，并且该样式没有顺序要求，也没有哪个属性是必须写的</p></li><li><p>background-size必须写在background-position的后边，并且使用/隔开 <code>background-position/background-size</code></p></li><li><p>background-origin background-clip 两个样式 ，orgin要在clip的前边</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;./img/1.png&quot;</span>);</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="comment">/* background-position: center; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: -<span class="number">50px</span> <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;./img/2.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="comment">/* background-origin: border-box;</span></span></span><br><span class="line"><span class="comment"><span class="css">            background-clip: content-box; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">background-size</span>: contain;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./img/1.png&#x27;</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red double;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./img/2.jpg&#x27;</span>) <span class="number">#bfa</span>  center center/contain border-box content-box no-repeat ;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box1&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class=&quot;box2&quot;&gt;</span></span><br><span class="line"><span class="comment">            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Totam aut, odio iusto accusantium ipsum aliquid omnis facere sapiente, nobis vel dicta alias ducimus. Repellat similique unde eius tempore, quia quo.</span></span><br><span class="line"><span class="comment">            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Accusantium, accusamus quibusdam. Adipisci in dolorem qui accusantium accusamus voluptatibus magnam nesciunt minus enim quaerat! Quidem, rem. Ipsum amet praesentium enim aliquid!</span></span><br><span class="line"><span class="comment">            Lorem ipsum dolor sit amet consectetur adipisicing elit. Aperiam provident repellendus ipsum dolorum optio quo, iure eveniet beatae cupiditate rerum minus corporis illum aliquam illo ut quidem aliquid expedita deserunt.</span></span><br><span class="line"><span class="comment">        &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p>通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其他颜色过渡的效果</p><p>！！渐变是图片，需要通过<code>background-image</code>来设置</p><p>线性渐变，颜色沿着一条直线发生变化 <code>linear-gradient()</code></p><p><code>linear-gradient(red,yellow)</code> 红色在开头，黄色在结尾，中间是过渡区域</p><p>线性渐变的开头，我们可以指定一个渐变的方向</p><ul><li>to left</li><li>to right</li><li>to bottom</li><li>to top</li><li>deg deg表示度数</li><li>turn 表示圈</li></ul><p>渐变可以同时指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况</p><p><code>repeating-linear-gradient()</code> 可以平铺的线性渐变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: #bfa; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* background-image: linear-gradient(red,yellow,#bfa,orange); */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* background-image: linear-gradient(red 50px,yellow 100px, green 120px, orange 200px); */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(to right ,red, yellow <span class="number">50px</span>);</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p><code>radial-gradient()</code> 径向渐变(放射性的效果)</p><ul><li><p>默认情况下径向渐变的形状根据元素的形状来计算的</p><ul><li><p>正方形 –&gt; 圆形</p></li><li><p>长方形 –&gt; 椭圆形</p></li><li><p>我们也可以手动指定径向渐变的大小</p><ul><li>circle</li><li>ellipse</li></ul></li></ul></li><li><p>也可以指定渐变的位置</p></li><li><p>语法： <code>radial-gradient(大小 at 位置, 颜色 位置 ,颜色 位置 ,颜色 位置)</code></p><ul><li><p>大小：</p><ul><li>circle 圆形</li><li>ellipse 椭圆</li><li>closest-side 近边    </li><li>closest-corner 近角</li><li>farthest-side 远边</li><li>farthest-corner 远角</li></ul></li><li><p>位置：</p><ul><li>top right left center bottom</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(farthest-corner at <span class="number">100px</span> <span class="number">100px</span>, red , <span class="number">#bfa</span>)</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><blockquote><p>在现实生活中，我们经常需要使用表格来表示一些格式化数据：课程表、人名单、成绩单….</p><p>同样在网页中我们也需要使用表格，我们通过table标签来创建一个表格</p></blockquote><p>在table中使用tr表示表格中的一行，有几个tr就有几行</p><p>在tr中使用td表示一个单元格，有几个td就有几个单元格</p><p>rowspan 纵向的合并单元格</p><p>colspan 横向的合并单元格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&#x27;50%&#x27;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>C4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h3><p>可以将一个表格分成三个部分：</p><ul><li><p>头部 thead</p></li><li><p>主体 tbody</p></li><li><p>底部 tfoot</p></li><li><p>th 表示头部的单元格</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&#x27;50%&#x27;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>收入<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>支出<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格的样式"><a href="#表格的样式" class="headerlink" title="表格的样式"></a>表格的样式</h3><p><code>border-spacing:</code> 指定边框之间的距离</p><p><code>border-collapse: collapse;</code> 设置边框的合并</p><p>默认情况下元素在td中是垂直居中的 可以通过 <code>vertical-align</code> 来修改</p><p>如果表格中没有使用tbody而是直接使用tr，那么浏览器会自动创建一个tbody，并且将tr全都放到tbody中（tr不是table的子元素）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css">            <span class="comment">/* border-spacing: 0px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">vertical-align</span>:middle;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center; </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将元素设置为单元格 td  */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="css">            <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p> 表单：</p><ul><li>在现实生活中表单用于提交数据</li><li>在网页中也可以使用表单，网页中的表单用于将本地的数据提交给远程的服务器</li><li>使用form标签来创建一个表单</li></ul><p>form的属性</p><ul><li>action 表单要提交的服务器的地址</li><li>文本框 注意：数据要提交到服务器中，必须要为元素指定一个name属性值</li><li>密码框</li><li>单选按钮<ul><li>像这种选择框，必须要指定一个value属性，value属性最终会作为用户的填写的值传递给服务器</li><li>checked 可以将单选按钮设置为默认选中</li></ul></li><li>多选框</li><li>下拉列表</li><li>提交按钮</li><li> autocomplete=”off” 关闭自动补全</li><li>readonly 将表单项设置为只读，数据会提交</li><li>disabled 将表单项设置为禁用，数据不会提交</li><li>autofocus 设置表单项自动获取焦点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;target.html&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        文本框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        密码框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        单选按钮 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        多选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;haha&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;i&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&quot;ii&quot;</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;iii&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;target.html&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;input type=&quot;color&quot;&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;input type=&quot;email&quot;&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 重置按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通的按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><h3 id="过渡（transition）"><a href="#过渡（transition）" class="headerlink" title="过渡（transition）"></a>过渡（transition）</h3><blockquote><p>通过过渡可以指定一个属性发生变化时的切换方式</p><p>通过过渡可以创建一些非常好的效果，提升用户的体验</p></blockquote><p><code>transition-property</code>: 指定要执行过渡的属性  </p><ul><li>多个属性间使用,隔开 </li><li>如果所有属性都需要过渡，则使用all关键字</li><li>大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡</li></ul><p><code>transition-duration</code>: 指定过渡效果的持续时间 时间单位：s 和 ms  1s = 1000ms</p><p><code>transition-timing-function</code>: 过渡的时序函数 指定过渡的执行的方式 </p><p>可选值： <a href="https://cubic-bezier.com/">https://cubic-bezier.com</a></p><ul><li><p>ease 默认值，慢速开始，先加速，再减速</p></li><li><p>linear 匀速运动</p></li><li><p>ease-in 加速运动</p></li><li><p>ease-out 减速运动</p></li><li><p>ease-in-out 先加速 后减速</p></li><li><p>cubic-bezier() 来指定时序函数</p></li><li><p>steps() 分步执行过渡效果</p><p>可以设置一个第二个值：</p><p>end ， 在时间结束时执行过渡(默认值)</p><p>start ， 在时间开始时执行过渡</p></li></ul><p><code>transition-delay</code>: 过渡效果的延迟，等待一段时间后在执行过渡</p><p>==transition 可以同时设置过渡相关的所有属性，只有一个要求，如果要写延迟，则两个时间中第一个是持续时间，第二个是延迟== </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: silver;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* margin-left: auto; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* transition:all 2s; */</span></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             </span></span><br><span class="line"><span class="css">            <span class="comment">/* transition-property: height , width; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* transition-property: all; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             </span></span><br><span class="line"><span class="css">             <span class="comment">/* transition-duration: 100ms, 2s; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* transition-duration: 2s; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">             <span class="comment">/* transition-timing-function: cubic-bezier(.24,.95,.82,-0.88); */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* transition-timing-function: steps(2, start); */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             </span></span><br><span class="line"><span class="css">             <span class="comment">/* transition-delay: 2s; */</span></span></span><br><span class="line"><span class="css">             </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">transition</span>:<span class="number">2s</span> margin-left <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">24</span>,.<span class="number">95</span>,.<span class="number">82</span>,-<span class="number">0.88</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition-property</span>: all;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* width: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            height: 200px; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: orange; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p> 动画和过渡类似，都是可以实现一些动态的效果，</p><p>不同的是过渡需要在某个属性发生变化时才会触发</p><p>动画可以自动触发动态效果</p><p>设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行每一个步骤      </p><p><code>animation-name</code>: 要对当前元素生效的关键帧的名字   </p><p><code>animation-duration</code>: 动画的执行时间</p><p><code>animation-iteration-count</code> 动画执行的次数  可选值：次数 、infinite 无限执行</p><p><code>animation-direction</code> 指定动画运行的方向</p><p>可选值：</p><ul><li>normal 默认值  从 from 向 to运行 每次都是这样 </li><li>reverse 从 to 向 from 运行 每次都是这样 </li><li>alternate 从 from 向 to运行 重复执行动画时反向执行</li><li>alternate-reverse 从 to 向 from运行 重复执行动画时反向执行</li></ul><p><code>animation-play-state</code>: 设置动画的执行状态 </p><p>可选值：</p><ul><li>running 默认值 动画执行</li><li>paused 动画暂停</li></ul><p> <code>animation-fill-mode</code>: 动画的填充模式</p><p>可选值：</p><ul><li>none 默认值 动画执行完毕元素回到原来位置</li><li>forwards 动画执行完毕元素会停止在动画结束的位置</li><li>backwards 动画延时等待时，元素就会处于开始位置</li><li>both 结合了forwards 和 backwards</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: silver;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置box2的动画 */</span>       </span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-name: test; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-duration: 4s; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 动画的延时 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-delay: 2s; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-timing-function: ease-in-out; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-iteration-count: 1; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-direction: alternate-reverse; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-play-state: paused; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="comment">/* animation-fill-mode: both; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">animation</span>: test <span class="number">2s</span> <span class="number">2</span> <span class="number">1s</span> alternate;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">       </span></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> test &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* from表示动画的开始位置 也可以使用 0% */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            &#125; </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* to动画的结束位置 也可以使用100%*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-left</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">10px</span> black solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation</span>: ball .<span class="number">5s</span> forwards linear infinite alternate;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">1s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">3s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box5</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">4s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box6</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">5s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box7</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">6s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box8</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">7s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.box9</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation-delay</span>: .<span class="number">8s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 创建小球下落的动画 */</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> ball &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-top</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 2                                    to&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">                margin-top: 400px;</span></span></span><br><span class="line"><span class="comment"><span class="css">                animation-timing-function: ease-in;</span></span></span><br><span class="line"><span class="comment"><span class="css">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">            40%&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">                margin-top: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">            80%&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">                margin-top: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变形、"><a href="#变形、" class="headerlink" title="变形、"></a>变形、</h3><p>变形就是指通过CSS来改变元素的形状或位置</p><ul><li><p>变形不会影响到页面的布局</p></li><li><p>transform 用来设置元素的变形效果</p></li></ul><p><strong>平移：</strong></p><ul><li>translateX() 沿着x轴方向平移</li><li>translateY() 沿着y轴方向平移</li><li>translateZ() 沿着z轴方向平移</li><li>平移元素，百分比是相对于自身计算的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">236</span>, <span class="number">236</span>, <span class="number">236</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css">            <span class="comment">/* transform: translateY(-100px); */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .box2&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            width: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            height: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            background-color: orange;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin: 0 auto;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                这种居中方式，只适用于元素的大小确定</span></span></span><br><span class="line"><span class="comment"><span class="css">            top: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            left: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            bottom: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            right: 0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin: auto; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span>, <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>:all .<span class="number">3s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.box5</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">4px</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>)</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box3&quot;&gt;</span></span><br><span class="line"><span class="comment">        aaaa</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="z轴平移"><a href="#z轴平移" class="headerlink" title="z轴平移"></a>z轴平移</h3><p>z轴平移，调整元素在z轴的位置，正常情况就是调整元素和人眼之间的距离，</p><p>距离越大，元素离人越近</p><p>z轴平移属于立体效果（近大远小），默认情况下网页是不支持透视，如果需要看见效果</p><p>必须要设置网页的视距</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置当前网页的视距为800px，人眼距离网页的距离 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">perspective</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">241</span>, <span class="number">241</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>:<span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">800px</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>通过旋转可以使元素沿着x y 或 z旋转指定的角度</p><ul><li>rotateX()</li><li>rotateY()</li><li>rotateZ()</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">perspective</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">241</span>, <span class="number">241</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>:<span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">            <span class="comment">/* transform: rotateZ(.25turn); */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* transform: rotateY(180deg) translateZ(400px); */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* transform: translateZ(400px) rotateY(180deg) ; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* 是否显示元素的背面 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">backface-visibility</span>: hidden;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;an.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>对元素进行缩放的函数：</p><ul><li>scaleX() 水平方向缩放</li><li>scaleY() 垂直方向缩放</li><li>scale() 双方向的缩放</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">perspective</span>:<span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>:<span class="number">2s</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 变形的原点 默认值 center*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* transform-origin:20px 20px;  */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.img-wrapper</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: .<span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.img-wrapper</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.2</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;an.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><h3 id="less简介"><a href="#less简介" class="headerlink" title="less简介"></a>less简介</h3><blockquote><p>less是一门css的预处理语言</p></blockquote><ul><li><p>less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式，添加了许多的新特性：像对变量的支持、对mixin的支持… …</p></li><li><p>less的语法大体上和css语法一致，但是less中增添了许多对css的扩展，所以浏览器无法直接执行less代码，要执行必须向将less转换为css，然后再由浏览器执行 <code>VSCode插件：Easy LESS</code></p></li></ul><h3 id="less语法"><a href="#less语法" class="headerlink" title="less语法"></a>less语法</h3><ul><li><p>结构更加写的更加清晰</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box2</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box4</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box3</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注释</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less中的单行注释，注释中的内容不会被解析到css中`</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  css中的注释，内容会被解析到css文件中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>变量</p><ul><li><p>在变量中可以存储一个任意的值,并且我们可以在需要时，任意的修改变量中的值</p></li><li><p>变量的语法： <code>@变量名</code></p></li><li><p>作为类名，或者一部分值使用时必须以 <code>@&#123;变量名&#125;</code> 的形式使用</p></li><li><p>变量发生重名时，会优先使用比较近的变量</p></li><li><p>可以在变量声明前就使用变量(不建议)</p></li><li><p>新版语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>&amp; 表示外层的父元素</p></li><li><p><code>:extend()</code> 对当前选择器扩展指定选择器的样式（选择器分组）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p2</span>:<span class="selector-tag">extend</span>(.p1)&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mixins 混合</p><ul><li><p>直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p3</span>&#123;</span><br><span class="line">    <span class="selector-class">.p1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixin</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p4</span>()&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p5</span>&#123;</span><br><span class="line">    <span class="selector-class">.p4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在混合函数中可以直接设置变量，调用混合函数，按顺序（或指定名称）传递参数，有默认值时可以不全部传值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span>(<span class="variable">@w</span>:<span class="number">100px</span>,<span class="variable">@h</span>:<span class="number">200px</span>,<span class="variable">@bg-color</span>:red)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">//调用混合函数，按顺序传递参数</span></span><br><span class="line">    <span class="comment">// .test(200px,300px,#bfa);</span></span><br><span class="line">    <span class="selector-class">.test</span>(<span class="number">300px</span>);</span><br><span class="line">    <span class="comment">// .test(@bg-color:red, @h:100px, @w:300px);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="JSON设置"><a href="#JSON设置" class="headerlink" title="JSON设置"></a>JSON设置</h3><p><a href="https://imgtu.com/i/hzMeqe"><img src="https://z3.ax1x.com/2021/09/11/hzMeqe.png" alt="hzMeqe.png"></a></p><p><a href="https://imgtu.com/i/hzMZrD"><img src="https://z3.ax1x.com/2021/09/11/hzMZrD.png" alt="hzMZrD.png"></a></p><p><a href="https://imgtu.com/i/hzMAxK"><img src="https://z3.ax1x.com/2021/09/11/hzMAxK.png" alt="hzMAxK.png"></a></p><p><a href="https://imgtu.com/i/hzMk26"><img src="https://z3.ax1x.com/2021/09/11/hzMk26.png" alt="hzMk26.png"></a></p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><h3 id="弹性盒"><a href="#弹性盒" class="headerlink" title="弹性盒"></a>弹性盒</h3><p><strong>flex(弹性盒、伸缩盒)</strong></p><ul><li>是CSS中的又一种布局手段，它主要用来<strong>代替浮动</strong>来完成页面的布局</li><li>flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变</li></ul><p><strong>弹性容器</strong></p><ul><li>要使用弹性盒，必须先将一个元素设置为弹性容器</li><li>我们通过 display 来设置弹性容器<ul><li><code>display:flex</code> 设置为块级弹性容器</li><li><code>display:inline-flex</code> 设置为行内的弹性容器</li></ul></li></ul><p><strong>弹性元素</strong></p><ul><li><p>弹性容器的子元素是弹性元素（弹性项）</p></li><li><p>弹性元素可以同时是弹性容器</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 将ul设置为弹性容器 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-grow: 1; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-grow: 2; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-grow: 3; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">flex-shrink</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="弹性容器的样式"><a href="#弹性容器的样式" class="headerlink" title="弹性容器的样式"></a>弹性容器的样式</h3><p><code>flex-direction</code> 指定容器中弹性元素的排列方式</p><blockquote><p>主轴：弹性元素的排列方向称为主轴</p><p>侧轴：与主轴垂直方向的称为侧轴</p></blockquote><p>可选值：</p><ul><li>row 默认值，弹性元素在容器中水平排列（左向右） 主轴 自左向右</li><li>row-reverse 弹性元素在容器中反向水平排列（右向左） 主轴 自右向左</li><li>column 弹性元素纵向排列（自上向下）</li><li>column-reverse 弹性元素方向纵向排列（自下向上）</li></ul><p><code>flex-wrap</code>: 设置弹性元素是否在弹性容器中自动换行</p><p>可选值：</p><ul><li>nowrap 默认值，元素不会自动换行</li><li>wrap 元素沿着辅轴方向自动换行</li><li>wrap-reverse 元素沿着辅轴反方向换行</li></ul><p><code>flex-flow</code>:  wrap 和 direction 的简写属性 </p><p><code>justify-content</code>  如何分配主轴上的空白空间（主轴上的元素如何排列）</p><p>可选值：</p><ul><li>flex-start 元素沿着主轴起边排列</li><li>flex-end 元素沿着主轴终边排列</li><li>center 元素居中排列</li><li>space-around 空白分布到元素两侧</li><li>space-between 空白均匀分布到元素间</li><li>space-evenly 空白分布到元素的单侧</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">          <span class="comment">/* 设置ul为弹性容器 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-direction: column; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-wrap: wrap-reverse; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-flow: row wrap; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* justify-content: center; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* li:nth-child(1)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>align-items</code>: 元素在辅轴上如何对齐 元素间的关系</p><p>可选值：</p><ul><li>stretch 默认值，将元素的长度设置为相同的值</li><li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li><li>flex-end 沿着辅轴的终边对齐</li><li>center 居中对齐</li><li>baseline 基线对齐</li></ul><p><code>align-content</code>: 辅轴空白空间的分布</p><p><code>align-self</code>: 用来覆盖当前弹性元素上的align-items（弹性元素属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">          <span class="comment">/* 设置ul为弹性容器 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-direction: column; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-wrap: wrap-reverse; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-flow:  wrap 和 direction 的简写属性 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* justify-content: center; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="comment">/* justify-content: center; */</span></span></span><br><span class="line"><span class="css">             <span class="attribute">align-items</span>: flex-start;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">             <span class="attribute">align-content</span>: space-between;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css">            <span class="attribute">align-self</span>: stretch;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">             2</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">             3</span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                2</span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="弹性元素的样式"><a href="#弹性元素的样式" class="headerlink" title="弹性元素的样式"></a>弹性元素的样式</h3><p><code>flex-grow: 1;</code> 指定弹性元素的伸展的系数</p><ul><li>当父元素有多余空间的时，子元素如何伸展</li><li>父元素的剩余空间，会按照比例进行分配</li></ul><p><code>flex-shrink: 1;</code> 弹性元素的缩减系数</p><ul><li>缩减系数的计算方式比较复杂</li><li>缩减多少是根据 缩减系数 和 元素大小来计算</li></ul><p><code>flex-basis</code> 指定的是元素在主轴上的基础长度</p><ul><li>如果主轴是 横向的 则 该值指定的就是元素的宽度</li><li>如果主轴是 纵向的 则 该值指定的是就是元素的高度</li><li>默认值是 auto，表示参考元素自身的高度或宽度</li><li>如果传递了一个具体的数值，则以该值为准</li></ul><p>flex 可以设置弹性元素所有的三个样式  <code>flex 增长 缩减 基础;</code></p><ul><li>initial “flex: 0 1 auto”.</li><li>auto  “flex: 1 1 auto”</li><li>none “flex: 0 0 auto” 弹性元素没有弹性</li></ul><p> <code>order</code> 决定弹性元素的排列顺序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置弹性盒 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-grow: 1; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          </span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-shrink: 1; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-basis: auto; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css">            <span class="attribute">flex</span>: initial;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">order</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-grow: 2; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">order</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-grow: 3; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">order</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>屏幕是由一个一个发光的小点构成，这一个个的小点就是像素</p><p>分辨率：1920 x 1080 说的就是屏幕中小点的数量</p><p>在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素</p><ul><li>物理像素，上述所说的小点点就属于物理像素</li><li>CSS像素，编写网页时，我们所用像素都是CSS像素<ul><li>浏览器在显示网页时，需要将CSS像素转换为物理像素然后再呈现</li><li> 一个css像素最终由几个物理像素显示，由浏览器决定：默认情况下在pc端，一个css像素 = 一个物理像素</li></ul></li></ul><p><strong>视口（viewport）</strong></p><p>视口就是屏幕中用来显示网页的区域</p><ul><li><p>可以通过查看视口的大小，来观察CSS像素和物理像素的比值</p><ul><li>默认情况下：视口宽度 1920px（CSS像素） 1920px（物理像素） 此时，css像素和物理像素的比是1:1</li><li>放大两倍的情况：视口宽度 960px（CSS像素） 1920px（物理像素） 此时，css像素和物理像素的比是1:2</li></ul></li><li><p>我们可以通过改变视口的大小，来改变CSS像素和物理像素的比值</p></li></ul><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>在不同的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰</p><p>24寸 1920x1080</p><p>i6 4.7寸 750 x 1334</p><p>智能手机的像素点 远远小于 计算机的像素点</p><p><strong>问题：一个宽度为900px的网页在iphone6中要如何显示呢？</strong></p><p>默认情况下，移动端的网页都会将视口设置为980像素（css像素）</p><p>以确保pc端网页可以在移动端正常访问，但是如果网页的宽度超过了980，移动端的浏览器会自动对网页缩放以完整显示网页</p><p>所以基本大部分的pc端网站都可以在移动端中正常浏览，但是往往都不会有一个好的体验。</p><p>为了解决这个问题，大部分网站都会专门为移动端设计网页</p><h3 id="移动端页面"><a href="#移动端页面" class="headerlink" title="移动端页面"></a>移动端页面</h3><p>移动端默认的视口大小是980px(css像素)，默认情况下，移动端的像素比就是 980/移动端宽度 （980/750）</p><p>如果我们直接在网页中编写移动端代码，这样在980的视口下，像素比是非常不好，导致网页中的内容非常非常的小</p><p>编写移动页面时，必须要确保有一个比较合理的像素比：</p><p>1css像素 对应 2个物理像素</p><p>1css像素 对应 3个物理像素</p><p><strong>可以通过meta标签来设置视口大小</strong></p><p>每一款移动设备设计时，都会有一个最佳的像素比，</p><p>一般我们只需要将像素比设置为该值即可得到一个最佳效果</p><p>将像素比设置为最佳像素比的视口大小我们称其为完美视口</p><p>将网页的视口设置为完美视口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：以后再写移动端的页面，就把上边这个玩意先写上</p><h3 id="vw适配"><a href="#vw适配" class="headerlink" title="vw适配"></a>vw适配</h3><p>不同的设备完美视口的大小是不一样的</p><ul><li>iphone6 – 375</li><li>iphone6plus – 414</li></ul><p>由于不同设备视口和像素比不同，所以同样的375个像素在不同的设备下意义是不一样</p><p>比如在iphone6中 375就是全屏，而到了plus中375就会缺一块</p><p>所以在移动端开发时，就不能再使用px来进行布局了</p><p><strong>vw 表示的是视口的宽度（viewport width）</strong></p><ul><li>100vw = 一个视口的宽度</li><li>1vw = 1%视口宽度</li></ul><p>vw这个单位永远相当于视口宽度进行计算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                网页中字体大小最小是12px，不能设置一个比12像素还小的字体</span></span></span><br><span class="line"><span class="comment"><span class="css">                    如果我们设置了一个小于12px的字体，则字体自动设置为12</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">                0.1333333vw = 1px</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">                5.3333vw = 40px</span></span></span><br><span class="line"><span class="comment"><span class="css">            */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">5.3333vw</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                rem</span></span></span><br><span class="line"><span class="comment"><span class="css">                    - 1 rem = 1 html的字体大小</span></span></span><br><span class="line"><span class="comment"><span class="css">                    - 1 rem = 40 px(设计图)</span></span></span><br><span class="line"><span class="comment"><span class="css">            */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">18.75rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">0.875rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        48 x 35</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>网页可以根据不同的设备或窗口大小呈现出不同的效果</p><p>使用响应式布局，可以使一个网页适用于所有设备</p><p><strong>响应布局的关键就是 媒体查询</strong></p><p>通过媒体查询，可以为不同的设备，或设备不同状态来分别设置样式</p><p>使用媒体查询</p><p>语法： <code>@media 查询规则&#123;&#125;</code><br>媒体类型：</p><ul><li><p>all 所有设备</p></li><li><p>print 打印设备</p></li><li><p>screen 带屏幕的设备</p></li><li><p>speech 屏幕阅读器</p><pre><code>              - 可以使用`,`连接多个媒体类型，这样它们之间就是一个或的关系</code></pre></li></ul><p>可以在媒体类型前添加一个only，表示只有。only的使用主要是为了兼容一些老版本浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      </span></span><br><span class="line"><span class="css">        <span class="comment">/* @media print,screen&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            body&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">                background-color: #bfa;</span></span></span><br><span class="line"><span class="comment"><span class="css">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> <span class="keyword">only</span> screen &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>媒体特性：</p><ul><li>width 视口的宽度</li><li>height 视口的高度 </li><li>min-width 视口的最小宽度（视口大于指定宽度时生效）</li><li>max-width 视口的最大宽度（视口小于指定宽度时生效）</li></ul><p>样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化</p><p>一般比较常用的断点</p><ul><li>小于768 超小屏幕 max-width=768px</li><li>大于768 小屏幕   min-width=768px</li><li>大于992 中型屏幕 min-width=992px</li><li>大于1200 大屏幕  min-width=1200px</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">         <span class="comment">/* @media (max-width: 500px)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">             body&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">                background-color: #bfa;</span></span></span><br><span class="line"><span class="comment"><span class="css">             &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">         &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">         <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">500px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">700px</span>)&#123;</span></span><br><span class="line"><span class="css">             <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">             &#125;</span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML-amp-CSS&quot;&gt;&lt;a href=&quot;#HTML-amp-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML&amp;amp;CSS&quot;&gt;&lt;/a&gt;HTML&amp;amp;CSS&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;软件架构&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="前端" scheme="https://lesliewaong.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://lesliewaong.top/tags/HTML/"/>
    
    <category term="CSS" scheme="https://lesliewaong.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly进阶</title>
    <link href="https://lesliewaong.top/posts/bbf9924c.html"/>
    <id>https://lesliewaong.top/posts/bbf9924c.html</id>
    <published>2021-07-07T10:43:28.000Z</published>
    <updated>2021-12-04T06:06:32.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哔哩哔哩番剧页面插件"><a href="#哔哩哔哩番剧页面插件" class="headerlink" title="哔哩哔哩番剧页面插件"></a>哔哩哔哩番剧页面插件</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件<code>_config.yml</code>里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bangumi:</span> <span class="comment"># 追番设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">  <span class="attr">vmid:</span> <span class="string">xxxxxxx</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&#x27;追番列表&#x27;</span></span><br><span class="line">  <span class="attr">quote:</span> <span class="string">&#x27;生命不息，追番不止！&#x27;</span></span><br><span class="line">  <span class="attr">show:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">loading:</span></span><br><span class="line">  <span class="attr">metaColor:</span></span><br><span class="line">  <span class="attr">color:</span></span><br><span class="line">  <span class="attr">webp:</span></span><br><span class="line">  <span class="attr">progress:</span></span><br><span class="line"><span class="attr">cinema:</span> <span class="comment"># 追剧设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">  <span class="attr">vmid:</span> <span class="string">xxxxxxx</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&#x27;追剧列表&#x27;</span></span><br><span class="line">  <span class="attr">quote:</span> <span class="string">&#x27;生命不息，追剧不止！&#x27;</span></span><br><span class="line">  <span class="attr">show:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">loading:</span></span><br><span class="line">  <span class="attr">metaColor:</span></span><br><span class="line">  <span class="attr">color:</span></span><br><span class="line">  <span class="attr">webp:</span></span><br><span class="line">  <span class="attr">progress:</span></span><br></pre></td></tr></table></figure><ul><li>enable: 是否启用 </li><li>path: 页面路径，默认bangumis/index.html,cinemas/index.html </li><li>vmid: 哔哩哔哩的vmid(uid) </li><li>title: 该页面的标题 </li><li>quote: 写在页面开头的一段话，支持 html 语法，可留空。 </li><li>show: 初始显示页面：0: 想看,1: 在看,2: 看过，默认为1 </li><li>loading: 图片加载完成前的 loading 图片 </li><li>metaColor: meta 部分(简介上方)字体颜色 </li><li>color: 简介字体颜色 </li><li>webp: 番剧封面使用webp格式(此格式在safari浏览器下不显示，但是图片大小可以缩小 100 倍左右), 默认true </li><li>progress: 获取番剧数据时是否显示进度条，默认true</li></ul><h2 id="获取-uid"><a href="#获取-uid" class="headerlink" title="获取 uid"></a>获取 uid</h2><p>登录哔哩哔哩后前往<a href="https://space.bilibili.com/%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%BD%91%E5%9D%80%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%80%E4%B8%B2%E6%95%B0%E5%AD%97%E5%B0%B1%E6%98%AFuid">https://space.bilibili.com/页面，网址最后的一串数字就是uid</a> ==需要将追番列表设置为公开！==</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新追番数据，使用<code>hexo cinema -u</code>命令更新追剧数据！ 删除数据命令:<code>hexo bangumi -d/hexo cinema -d</code></p><h1 id="添加信封样式留言板"><a href="#添加信封样式留言板" class="headerlink" title="添加信封样式留言板"></a>添加信封样式留言板</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>在博客根目录下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>添加配置信息，以下为写法示例 在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># envelope_comment</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/e2d3c450/</span></span><br><span class="line"><span class="attr">envelope_comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制开关</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg</span> <span class="comment">#信笺头部图片</span></span><br><span class="line">  <span class="attr">message:</span> <span class="comment">#信笺正文，多行文本，写法如下</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想问的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想说的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想吐槽的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哪怕是有什么想吃的，都可以告诉我哦~</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">自动书记人偶竭诚为您服务！</span> <span class="comment">#仅支持单行文本</span></span><br><span class="line">  <span class="attr">height:</span> <span class="comment">#1050px，信封划出的高度</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】comments页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">留言板</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>参数释义</p><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>enable</td><td>true/false</td><td>控制开关</td></tr><tr><td>cover</td><td>URL</td><td>信笺头部图片链接</td></tr><tr><td>message</td><td>text</td><td>信笺正文，支持多行文本，写法见上文示例</td></tr><tr><td>bottom</td><td>text</td><td>信笺底部信息，仅支持单行文本</td></tr><tr><td>height</td><td>1050px</td><td>默认1050px，信封划出的高度</td></tr><tr><td>path</td><td>comments</td><td>【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</td></tr><tr><td>front_matter</td><td>object</td><td>【可选】comments页面的 front_matter 配置,写法见上文示例</td></tr></tbody></table><h1 id="文章链接唯一化"><a href="#文章链接唯一化" class="headerlink" title="文章链接唯一化"></a>文章链接唯一化</h1><p>也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。</p><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在<code>站点配置文件</code>中查找代码<code>permalink</code>，将其更改为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink/  <span class="comment"># “posts/” 可自行更换</span></span><br></pre></td></tr></table></figure><p>这里有个知识点：</p><blockquote><p>百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。</p></blockquote><p>搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。</p><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><p>然后在<code>站点配置文件</code>中添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p>可选择模式：</p><ul><li>crc16 &amp; hex</li><li>crc16 &amp; dec</li><li>crc32 &amp; hex</li><li>crc32 &amp; dec</li></ul><h1 id="压缩（hexo-all-minifier）"><a href="#压缩（hexo-all-minifier）" class="headerlink" title="压缩（hexo-all-minifier）"></a>压缩（hexo-all-minifier）</h1><p>它兼顾了hexo-neat的易用性，和gulp的功能。</p><h2 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure><p>如果安装失败试试用cnpm（我就是这么安装成功的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure><h2 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h2><p>在<code>_config.yml</code>里添加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>详细设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignore_error:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">css_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">js_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">interlaced:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">multipass:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">optimizationLevel:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">pngquant:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">progressive:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://imgtu.com/i/hzco59"><img src="https://z3.ax1x.com/2021/09/11/hzco59.png" alt="hzco59.png"></a></p><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h2 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h2><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="模型宠物"><a href="#模型宠物" class="headerlink" title="模型宠物"></a>模型宠物</h1><h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">npm install live2d-widget-model-tororo   对应的模型命令</span><br></pre></td></tr></table></figure><p>模型的GitHub地址：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p><h2 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件<code>_config.yml</code>里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment"># 这是宠物模型 对应命令</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="comment"># 设置模型的位置</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span>   <span class="comment"># left  左边    right  右边  </span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span>        <span class="comment"># 模型大小  宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span>       <span class="comment"># 模型大小 高度</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">0</span>         <span class="comment"># 水平偏移</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">0</span>      <span class="comment"># 垂直偏移</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span>  <span class="comment"># 手机显示开关</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span>   <span class="comment"># 透明度</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><p><strong>Twikoo</strong> 是一个简洁、安全、无后端的静态网站评论系统，基于腾讯云开发。</p><p>具体如何配置评论，请查看<a href="https://twikoo.js.org/quick-start.html#%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2">Twikoo文档</a></p><p>你只需要把获取到的 <code>环境ID (envId)</code> 填写到配置上去就行</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><h1 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h1><h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-wordcount</span> <span class="string">--save</span> </span><br></pre></td></tr></table></figure><h2 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h2><p>修改 <code>主题配置文件</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="说说（Artitalk）"><a href="#说说（Artitalk）" class="headerlink" title="说说（Artitalk）"></a>说说（Artitalk）</h1><h2 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-artitalk</span><br></pre></td></tr></table></figure><h2 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h2><p>參考 <a href="https://artitalk.js.org/doc.html#%F0%9F%8C%88-leancloud-%E7%9A%84%E7%9B%B8%E5%85%B3%E5%87%86%E5%A4%87">Artitalk 文檔 - LeanCloud 的相關準備</a></p><h2 id="配置-7"><a href="#配置-7" class="headerlink" title="配置"></a>配置</h2><p>添加配置信息 在 <strong>Hexo</strong> 的配置文件 或者 <strong>主题</strong>的配置文件中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Artitalk</span></span><br><span class="line"><span class="comment"># see https://artitalk.js.org/</span></span><br><span class="line"><span class="attr">artitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span></span><br><span class="line">  <span class="attr">appKey:</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  <span class="attr">front_matter:</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>appId</td><td>【必须】LeanCloud创建的应用程序中的AppID</td></tr><tr><td>appKey</td><td>【必须】LeanCloud创建的应用程序中的AppKEY</td></tr><tr><td>path</td><td>【任选】Artitalk 的路径名称（默认为<code>artitalk</code>，生成的页面为 artitalk/index.html）</td></tr><tr><td>js</td><td>【任选】Artitalk 的 js CDN（默认为<code>https://cdn.jsdelivr.net/npm/artitalk</code>）</td></tr><tr><td>option</td><td>【任选】Artitalk 需要额外的配置</td></tr><tr><td>front_matter</td><td>【任选】Artitalk页面的front_matter配置</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哔哩哔哩番剧页面插件&quot;&gt;&lt;a href=&quot;#哔哩哔哩番剧页面插件&quot; class=&quot;headerlink&quot; title=&quot;哔哩哔哩番剧页面插件&quot;&gt;&lt;/a&gt;哔哩哔哩番剧页面插件&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Hexo" scheme="https://lesliewaong.top/categories/Hexo/"/>
    
    
    <category term="Butterfly" scheme="https://lesliewaong.top/tags/Butterfly/"/>
    
    <category term="Hexo" scheme="https://lesliewaong.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly主题</title>
    <link href="https://lesliewaong.top/posts/2756f2af.html"/>
    <id>https://lesliewaong.top/posts/2756f2af.html</id>
    <published>2021-07-05T10:43:28.000Z</published>
    <updated>2021-12-04T05:18:26.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Git安装-Github"><a href="#Git安装-Github" class="headerlink" title="Git安装 (Github)"></a>Git安装 (Github)</h2><p>稳定版【建议】</p><p>在你的 Hexo 根目录里</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>修改 Hexo 根目录下的 _config.yml，把主题改为butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><h2 id="建议修改"><a href="#建议修改" class="headerlink" title="建议修改"></a>建议修改</h2><p>在 hexo 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把主题目录的 <code>_config.yml</code> 内容复製到 <code>_config.butterfly.yml</code> 去。</p><blockquote><p>注意： ==不要把主题目录的 _config.yml 删掉==</p></blockquote><p>以后只需要在 <code>_config.butterfly.yml</code>进行配置就行。</p><p>Hexo会自动合併主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</p><h1 id="主题页面"><a href="#主题页面" class="headerlink" title="主题页面"></a>主题页面</h1><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是 markdown 文件最上方以 <code>---</code> 分隔的区域，用于指定个别档案的变数。</p><p><code>Page Front-matter</code> 用于页面配置</p><p><code>Post Front-matter</code> 用于文章页配置</p><blockquote><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p></blockquote><p><code>Page Front-matter</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:【必需】页面标题</span><br><span class="line">date:【必需】页面创建日期</span><br><span class="line">type:【必需】标籤、分类和友情链接三个页面需要配置</span><br><span class="line">updated:【可选】页面更新日期</span><br><span class="line">description:【可选】页面描述</span><br><span class="line">keywords:【可选】页面关键字</span><br><span class="line">comments:【可选】显示页面评论模块(默认 true)</span><br><span class="line">top<span class="emphasis">_img:【可选】页面顶部图片</span></span><br><span class="line"><span class="emphasis">mathjax:【可选】显示mathjax(当设置mathjax的per_</span>page: false时，才需要配置，默认 false)</span><br><span class="line">katex:【可选】显示katex(当设置katex的per<span class="emphasis">_page: false时，才需要配置，默认 false)</span></span><br><span class="line"><span class="emphasis">aside:【可选】显示侧边栏 (默认 true)</span></span><br><span class="line"><span class="emphasis">aplayer:【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:【可选】配置代码框是否展开(true/false)(默认为设置中highlight<span class="emphasis">_shrink的配置)</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><p><code>Post Front-matter</code>    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:【必需】文章标题</span><br><span class="line">date:【必需】文章创建日期</span><br><span class="line">updated:【可选】文章更新日期</span><br><span class="line">tags:【可选】文章标签</span><br><span class="line">categories:【可选】文章分类</span><br><span class="line">keywords:【可选】文章关键字</span><br><span class="line">description:【可选】文章描述</span><br><span class="line">top<span class="emphasis">_img:【可选】文章顶部图片</span></span><br><span class="line"><span class="emphasis">cover:【可选】文章缩略图(如果没有设置top_</span>img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</span><br><span class="line">comments:【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc:【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc<span class="emphasis">_number:【可选】显示toc_</span>number(默认为设置中toc的number配置)</span><br><span class="line">copyright:【可选】显示文章版权模块(默认为设置中post<span class="emphasis">_copyright的enable配置)</span></span><br><span class="line"><span class="emphasis">copyright_</span>author:【可选】文章版权模块的文章作者</span><br><span class="line">copyright<span class="emphasis">_author_</span>href:【可选】文章版权模块的文章作者链接</span><br><span class="line">copyright<span class="emphasis">_url:【可选】文章版权模块的文章连结链接</span></span><br><span class="line"><span class="emphasis">copyright_</span>info:【可选】文章版权模块的版权声明文字</span><br><span class="line">mathjax:【可选】显示mathjax(当设置mathjax的per<span class="emphasis">_page: false时，才需要配置，默认 false)</span></span><br><span class="line"><span class="emphasis">katex:【可选】显示katex(当设置katex的per_</span>page: false时，才需要配置，默认 false)</span><br><span class="line">aplayer:【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</span><br><span class="line">highlight<span class="emphasis">_shrink:【可选】配置代码框是否展开(true/false)(默认为设置中highlight_</span>shrink的配置)</span><br><span class="line"><span class="section">aside:【可选】显示侧边栏 (默认 true)</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>前往你的 Hexo 博客的根目录 输入<code>hexo new page tags</code></p><p>你会找到<code>source/tags/index.md</code>这个文件</p><p>修改这个文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标籤</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>前往你的 Hexo 博客的根目录 输入<code>hexo new page categories</code></p><p>你会找到<code>source/categories/index.md</code>这个文件</p><p>修改这个文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>为你的博客创建一个友情链接！</p><h3 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h3><p>前往你的 Hexo 博客的根目录 输入 <code>hexo new page link</code></p><p>你会找到<code>source/link/index.md</code>这个文件</p><p>修改这个文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2018-06-07 22:17:49</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h3><p>在Hexo博客目录中的<code>source/_data</code>（如果没有 <code>_data</code> 文件夹，请自行创建），创建一个文件<code>link.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">大佬</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><p><code>class_name和class_desc支持html格式书写，如不需要，也可以留空。</code></p><h3 id="友情链接界面设置"><a href="#友情链接界面设置" class="headerlink" title="友情链接界面设置"></a>友情链接界面设置</h3><p>由 2.2.0 起，友情链接界面可以由用户自己自定义，只需要在友情链接的md档设置就行，以普通的Markdown格式书写。</p><h2 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h2><p>图库页面只是普通的页面，你只需要<code>hexo n page xxxxx</code> 创建你的页面就行</p><p>然后使用标签外挂 <code>galleryGroup</code>。</p><p>==注意：文件的相对路径都是相对于source文件==</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;div</span> <span class="string">class=&quot;gallery-group-main&quot;&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">galleryGroup</span> <span class="string">&#x27;壁纸&#x27;</span> <span class="string">&#x27;收藏的一些壁纸&#x27;</span> <span class="string">&#x27;/Gallery/wallpaper&#x27;</span> <span class="string">https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">galleryGroup</span> <span class="string">&#x27;漫威&#x27;</span> <span class="string">&#x27;关于漫威的图片&#x27;</span> <span class="string">&#x27;/Gallery/marvel&#x27;</span> <span class="string">https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">galleryGroup</span> <span class="string">&#x27;OH MY GIRL&#x27;</span> <span class="string">&#x27;关于OH MY GIRL的图片&#x27;</span> <span class="string">&#x27;/Gallery/ohmygirl&#x27;</span> <span class="string">https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子页面</strong></p><p>子页面也是普通的页面，你只需要<code>hexo n page xxxxx</code> 创建你的页面就行</p><p>然后使用标签外挂 <code>gallery</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">gallery</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span></span><br><span class="line"><span class="type">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endgallery</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>主题内置了一个简单的404页面，可在设置中开启</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;18禁，博主已私藏，去别处康康吧！&#x27;</span>     <span class="comment"># xxxxxxxxx  404出现的文字</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://z3.ax1x.com/2021/08/21/fvTmCV.jpg</span></span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="运行后网页显示代码"><a href="#运行后网页显示代码" class="headerlink" title="运行后网页显示代码"></a>运行后网页显示代码</h2><p>页面只显示 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content <span class="comment">#recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug #aside_content.aside_content include includes/aside.pug</span></span><br></pre></td></tr></table></figure><p>请下载安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save </span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;Git安装-Github&quot;&gt;&lt;a href=&quot;#Git安装-Github&quot; class=&quot;headerlink&quot; title=&quot;G</summary>
      
    
    
    
    <category term="Hexo" scheme="https://lesliewaong.top/categories/Hexo/"/>
    
    
    <category term="Butterfly" scheme="https://lesliewaong.top/tags/Butterfly/"/>
    
    <category term="Hexo" scheme="https://lesliewaong.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客</title>
    <link href="https://lesliewaong.top/posts/32e4259a.html"/>
    <id>https://lesliewaong.top/posts/32e4259a.html</id>
    <published>2021-06-22T14:08:19.000Z</published>
    <updated>2021-12-04T05:18:13.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><blockquote><p>Github</p></blockquote><p>搭建一个这样的Blog首先你得知道什么是Github 和 Github Pages，你可以理解为咱们没有服务器，咱们将页面托管到了Github上</p><blockquote><p>Github Pages</p></blockquote><p> <a href="https://pages.github.com/">Github Pages</a>可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><blockquote><p>Hexo</p></blockquote><p> <a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p>进入Node.js官网](<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>)</p><p>按照自己的机器选择对应的版本下载，我是windous 64位</p><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><p><a href="https://git-scm.com/downloads">Git官网</a></p><h1 id="检验软件是否安装成功"><a href="#检验软件是否安装成功" class="headerlink" title="检验软件是否安装成功"></a>检验软件是否安装成功</h1><p>同时按下 Win 键和 R 键打开运行窗口,输入 <code>cmd</code> ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/5sxpPU"><img src="https://z3.ax1x.com/2021/10/21/5sxpPU.png" alt="5sxpPU.png"></a></p><p>此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>两个选项，第一个是<code>图形界面的Git操作</code>，另一个<code>是命令行</code>，我们一般使用第二个</p><p><a href="https://imgtu.com/i/5sxFM9"><img src="https://z3.ax1x.com/2021/10/21/5sxFM9.png" alt="5sxFM9.png"></a></p><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：E:\Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装。第一次可能需要久一点输入命令后等一等，再输入第二条命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功</p><h1 id="Hexo-初始化配置"><a href="#Hexo-初始化配置" class="headerlink" title="Hexo 初始化配置"></a>Hexo 初始化配置</h1><p>在刚才新建的文件夹里面再次新建一个 Hexo 文件夹（如：我的文件夹为：E:\Blog\Hexo）,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令，如图所示则安装成功<br>如果失败了就再输入一次，比如说我</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：</p><p><a href="https://imgtu.com/i/5sxC24"><img src="https://z3.ax1x.com/2021/10/21/5sxC24.png" alt="5sxC24.png"></a></p><h1 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h1><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate (hexo g)</span><br><span class="line">hexo server (hexo s)</span><br></pre></td></tr></table></figure><p>执行完即可登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果</p><h1 id="将博客部署到-Github-Pages-上"><a href="#将博客部署到-Github-Pages-上" class="headerlink" title="将博客部署到 Github Pages 上"></a>将博客部署到 Github Pages 上</h1><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><p><strong>一、注册 Github 账户：点击此处访问 <a href="https://github.com/">Github 官网</a>，点击 Sign Up 注册账户</strong></p><p><strong>二、创建项目代码库：</strong></p><p>点击 New repository 开始创建，步骤及注意事项见图：</p><p><a href="https://imgtu.com/i/5sxVVx"><img src="https://z3.ax1x.com/2021/10/21/5sxVVx.png" alt="5sxVVx.png"></a></p><p><a href="https://imgtu.com/i/5sxAq1"><img src="https://z3.ax1x.com/2021/10/21/5sxAq1.png" alt="5sxAq1.png"></a></p><p><strong>三、配置 <code>SSH</code> 密钥：</strong></p><p>只有配置好 <code>SSH</code> 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面 <code>Git Bash Here</code> 输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email@example.com&quot;</span><br><span class="line">//引号里面填写你的邮箱地址</span><br></pre></td></tr></table></figure><p>之后会出现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</span><br><span class="line">//到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure><p>然后会出现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">//这里是要你输入密码，其实不需要输什么密码，直接回车就行</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>接下来屏幕会显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">这里是各种字母数字组成的字符串，结尾是你的邮箱</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">这里也是各种字母数字符号组成的字符串</span><br></pre></td></tr></table></figure><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><strong>四、在 GitHub 账户中添加你的公钥</strong></p><p>1.登陆 GitHub，进入 <code>Settings</code>：</p><p>2.点击 <code>SSH and GPG Keys</code>：</p><p>3.选择 New SSH key：</p><p>4.粘贴密钥：</p><p><strong>五、测试</strong></p><p>直接在桌面右键 点击 Git Bash Here，输入以下命令输入以下命令：注意：<a href="mailto:git@github.com">git@github.com</a>不要做任何更改！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>之后会显示：</p><p><a href="https://imgtu.com/i/5svz5T"><img src="https://z3.ax1x.com/2021/10/21/5svz5T.png" alt="5svz5T.png"></a></p><p>此时表示设置正确</p><p><strong>六、配置 Git 个人信息</strong></p><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;此处填你的用户名&quot;git config --global user.email &quot;此处填你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h1 id="将本地的-Hexo-文件更新到-Github-的库中"><a href="#将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="将本地的 Hexo 文件更新到 Github 的库中"></a>将本地的 Hexo 文件更新到 Github 的库中</h1><p><strong>一、登录 Github 打开自己的项目 yourname.github.io</strong></p><p><strong>二、鼠标移到 Code 按钮，点击按钮复制，或者直接把SSH全部复制</strong></p><p><strong>三、打开你创建的 Hexo 文件夹，右键用记事本打开该文件夹下的 _config.yml 文件</strong></p><p><strong>四、滑到最下面,按下图修改 _config.yml 文件并保存</strong></p><p><a href="https://imgtu.com/i/5sxkrR"><img src="https://z3.ax1x.com/2021/10/21/5sxkrR.png" alt="5sxkrR.png"></a></p><p><strong>五、在 Hexo 文件夹下分别执行以下命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo ghexo d</span><br></pre></td></tr></table></figure><p>或者直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>执行完之后如果此时报错，说明你的 deployer 没有安装成功</p><p>需要执行以下命令再安装一次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CODEnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再执行 <strong>hexo g -d</strong>，你的博客就会部署到 Github 上了</p><p><strong>六、访问博客</strong></p><p>你的博客地址：https://你的用户名.github.io。</p><h1 id="如何在博客上发表文章"><a href="#如何在博客上发表文章" class="headerlink" title="如何在博客上发表文章"></a>如何在博客上发表文章</h1><p>博客已经成功搭建了，但是我们该怎么写博客呢？</p><p>一、新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><p>二、用编辑器编写文章</p><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>或者将两个命令合二为一输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>现在访问你的博客就可以看见写好的文章啦！</p><p><strong>常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo cl== hexo clean #清除缓存 </span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure><h1 id="添加自定义HTML页面"><a href="#添加自定义HTML页面" class="headerlink" title="添加自定义HTML页面"></a>添加自定义HTML页面</h1><p>在博客根目录的<code>source</code>文件夹下，新建文件夹<code>item</code>用于存放HTML文件</p><p>在博客根目录的配置文件<code>_config.yml</code>文件里，跳过渲染</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 跳过文件夹下所有文件</span></span><br><span class="line">skip_render:</span><br><span class="line">  - &#x27;tools/*&#x27;</span><br><span class="line">  - &#x27;tools/**&#x27;</span><br><span class="line">  - &#x27;GoogleHacking/*&#x27;</span><br><span class="line">  - &#x27;GoogleHacking/**&#x27;</span><br><span class="line">  - &#x27;item/*&#x27; </span><br><span class="line">  - &#x27;item/**&#x27; </span><br></pre></td></tr></table></figure><p>hexo部署的是静态文件，所有文章的md文件会被渲染成html文件(hexo g生成)，hexo会帮我们把所有css、js文件都加到文章里，我们之前跳过了渲染(第二步)，所以就需要手动把css、js整合到html文件里。</p><p>最后在主题文件中添加按钮</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  项目||fas fa-book:</span><br><span class="line">    火影: /item/Naruto/ || fa fa-star</span><br></pre></td></tr></table></figure><h1 id="为你的-Hexo-博客配置个性域名"><a href="#为你的-Hexo-博客配置个性域名" class="headerlink" title="为你的 Hexo 博客配置个性域名"></a>为你的 Hexo 博客配置个性域名</h1><p>首先我们要购买域名，<a href="https://www.aliyun.com/">阿里云</a>，<a href="https://cloud.tencent.com/">腾讯云</a>都可以，也不贵，一年几十块钱，最便宜几块钱也能买到，以阿里云为例，我购买的域名是 qwq3.top，购买过程就不赘述了，选择阿里云的解析平台，来到阿里云的<code>域名控制台</code>，点击进入域名解析列表或者直接点击域名后面的解析</p><p><a href="https://imgtu.com/i/5sxPxJ"><img src="https://z3.ax1x.com/2021/10/21/5sxPxJ.png" alt="5sxPxJ.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法一：点击添加记录，需要添加两个记录，两个记录类型都是 CNAME ，第一个主机记录为 @ ，第二个主机记录为 www ，记录值都是填你自己的博客地址（比如我的是：[](waterchen520.github.io)），保存之后域名解析就完成了！</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/5svxaV"><img src="https://z3.ax1x.com/2021/10/21/5svxaV.png" alt="5svxaV.png"></a></p><p>方法二：两个记录类型为 A ，第一个主机记录为 @ ，第二个主机记录为 www，记录值都为博客的 IP 地址，IP 地址可以 cmd 中输入 ping 你的博客地址 获得（比如我的：ping waterchen520.github.io），保存之后域名解析就完成了！</p><p>为了使 GitHub 接收我们的域名，还需要在博客的根目录下添加一个名为 <strong>CNAME</strong> 的文件（<strong>注意不要加.txt，没有任何后缀名</strong>！），这个文件放到 <strong>Hexo</strong> 文件夹的 <strong>source</strong> 里面，（比如我的是：<strong>F:\QiQi_Blog\Hexo\source</strong>），文件里面填写你的域名（<strong>加不加www都行</strong>），比如要填写我的域名，文件里面就写：<a href="http://www.qwq3.top/">www.qwq3.top</a> 或者 qwq3.top，经过以上操作，别人就可以通过 <a href="http://www.qwq3.top/">www.qwq3.top</a> 、qwq3.top 、waterchen520.github.io 三个当中任意一个访问我的博客了！你的也一样！</p><p>有关加不加www的问题有以下区别：</p><ul><li>如果你填写的是没有www的，比如 qwq3.top，那么无论是访问 <a href="https://www.qwq3.top/">https://www.qwq3.top</a> 还是 <a href="https://qwq3.top/">https://qwq3.top</a> ，都会自动跳转到 <a href="https://qwq3.top/">https://qwq3.top</a></li><li>如果你填写的是带www的，比如 <a href="http://www.qwq3.top/">www.qwq3.top</a> ，那么无论是访问 <a href="https://www.qwq3.top/">https://www.qwq3.top</a> 还是 <a href="https://qwq3.top/">https://qwq3.top</a> ，都会自动跳转到 <a href="http://www.qwq3.top/">http://www.qwq3.top</a></li></ul><p><a href="https://imgtu.com/i/5sx9GF"><img src="https://z3.ax1x.com/2021/10/21/5sx9GF.png" alt="5sx9GF.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭建一个这样的Blog首先你得知道什么是Github 和 </summary>
      
    
    
    
    <category term="Hexo" scheme="https://lesliewaong.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://lesliewaong.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
